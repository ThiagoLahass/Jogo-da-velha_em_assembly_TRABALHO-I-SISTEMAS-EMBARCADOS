     1                                  ; Grupo: Gabriel Gatti e Thiago Lahass
     2                                  
     3                                  segment code
     4                                  ..start:
     5 00000000 B8[0000]                	mov 	ax,data
     6 00000003 8ED8                    	mov 	ds,ax
     7 00000005 B8[0000]                	mov 	ax,stack
     8 00000008 8ED0                    	mov 	ss,ax
     9 0000000A BC[0002]                	mov 	sp,stacktop
    10                                  
    11 0000000D FA                      	CLI											; Deshabilita INTerrupções por hardware - pin INTR NÃO atende INTerrupções externas	
    12 0000000E 31C0                    	XOR     AX, AX								; Limpa o registrador AX, é equivalente a fazer "MOV AX,0"
    13 00000010 8EC0                    	MOV     ES, AX								; Inicializa o registrador de Segmento Extra ES para acessar à região de vetores de INTerrupção (posição zero de memoria)
    14 00000012 26A12400                	MOV     AX, [ES:INT9*4]						; Carrega em AX o valor do IP do vector de INTerrupção 9 
    15 00000016 A3[0200]                	MOV     [offset_dos], AX    	        	; Salva na variável offset_dos o valor do IP do vector de INTerrupção 9
    16 00000019 26A12600                	MOV     AX, [ES:INT9*4+2]   	        	; Carrega em AX o valor do CS do vector de INTerrupção 9
    17 0000001D A3[0000]                	MOV     [cs_dos], AX						; Salva na variável cs_dos o valor do CS do vector de INTerrupção 9     
    18 00000020 268C0E2600              	MOV     [ES:INT9*4+2], CS					; Atualiza o valor do CS do vector de INTerrupção 9 com o CS do programa atual 
    19 00000025 26C7062400[7701]        	MOV     WORD [ES:INT9*4],keyINT         	; Atualiza o valor do IP do vector de INTerrupção 9 com o offset "keyINT" do programa atual
    20 0000002C FB                      	STI											; Habilita INTerrupções por hardware - pin INTR SIM atende INTerrupções externas
    21                                  
    22 0000002D E87501                  	call inicia_jogo
    23                                  
    24                                  ;leitura de comando
    25                                  L1:
    26 00000030 A1[0C00]                        MOV     AX,[p_i]	        			; loop - se não tem tecla pulsada, não faz nada! p_i só é atualizado (p_i = p_i + 1) na Rotina de Serviço de INTerrupção (ISR) "keyINT" 
    27 00000033 3B06[0E00]                      CMP     AX,[p_t]
    28 00000037 74F7                            JE      L1
    29 00000039 FF06[0E00]                      INC     word[p_t]						; p_t - se atualiza (p_t = p_t + 1) só se p_i foi atualizado, ou seja, se teve tecla pulsada
    30 0000003D 8126[0E00]0700                  AND     word[p_t],7				
    31 00000043 8B1E[0E00]                      MOV     BX,[p_t]						; Carrega em BX o valor de p_t
    32 00000047 31C0                            XOR     AX, AX
    33 00000049 8A87[0400]                      MOV     AL, [BX+tecla]					; Carrega em AL o valor da variável tecla (variável atualizada durante a ISR) mais o offset BX, AL <- [BX+tecla]  
    34                                  		
    35 0000004D 8B1E[1000]              		mov		bx, [i_atual_comando]			; carrega em bx o indice do vetor de comando
    36 00000051 8887[1200]              		mov 	[comando+bx], al				; transfere o valor make/break da tecla digitada
    37 00000055 FF06[1000]              		inc  	word [i_atual_comando]			; incrementa o indice
    38                                  
    39                                  		; verificações
    40 00000059 803E[1200]9C            		cmp 	byte [comando], break_enter		; se acabou de começar o jogo, lê o break do enter e limpa o vetor
    41 0000005E 7509                    		jne 	verifica_backspace
    42 00000060 C706[1000]0000          		mov 	word [i_atual_comando], 0		; índice volta para a primeira posição
    43 00000066 E9C7FF                  		jmp 	L1								; lê novamente
    44                                  	verifica_backspace:
    45 00000069 80BF[1200]8E            		cmp 	byte [comando+bx], break_backspace ; se não, verifica se digitou backspace
    46 0000006E 7518                    		jne 	verifica_tam_vetor				; se não, segue verificando
    47 00000070 81FB0300                		cmp 	bx, 3							; se sim, verifica se o tamanho atual do vetor é <= 4
    48 00000074 7F09                    		jg		sub4							
    49 00000076 C706[1000]0000          		mov 	word [i_atual_comando], 0		; se sim, limpa o vetor (make e break do backspace + possivelmente make e break de outra tecla)
    50 0000007C E9B1FF                  		jmp 	L1								
    51                                  	sub4:	
    52 0000007F 812E[1000]0400          		sub  	word [i_atual_comando], 4		; se não, subtrai o indice do vetor em 4
    53 00000085 E9A8FF                  		jmp 	L1								; volta a ler
    54                                  
    55                                  	verifica_tam_vetor:
    56 00000088 813E[1000]1000          		cmp		word [i_atual_comando], tam_max_vet_comando ; verifica se estourou o tamanho máximo do vetor
    57 0000008E 7506                    		jne		verifica_enter					; se não, segue verificando
    58 00000090 E8AE09                  		call 	imprime_comando_inv				; se sim, imprime comanda inválido e limpa o vetor
    59 00000093 E9AF00                  		jmp 	limpa_vetor
    60                                  
    61                                  	verifica_enter:
    62 00000096 80BF[1200]9C            		cmp 	byte [comando+bx], break_enter	; verifica se digitou Enter
    63 0000009B 7593                    		jne 	L1								; se não, continua lendo
    64                                  
    65 0000009D E8970A                  		call 	limpa_campo_msg					; se apertou Enter limpa o campo de mensagem
    66 000000A0 E86B0A                  		call 	limpa_campo_com					; se apertou Enter limpa o campo de comando
    67                                  
    68 000000A3 81FB0300                		cmp 	bx, 3							; se apertou 2 teclas -> verifica Enter + 'c' e Enter + 's'
    69 000000A7 7415                    		je	 	verifica_s_c
    70 000000A9 7F34                    		jg 		verifica_tamanho				; se apertou mais de 2 teclas -> verifica o tamanho do vetor
    71                                  		; se apertou somente Enter
    72 000000AB 803E[EB00]00            		cmp 	byte [resultado], 0				; verifica se digitou apos fim do jogo
    73 000000B0 7406                    		je 		enter_inv
    74 000000B2 E8300A                  		call 	imprime_msg_apos_fim_jogo
    75 000000B5 E98D00                  		jmp 	limpa_vetor
    76                                  	enter_inv:
    77 000000B8 E88609                  		call 	imprime_comando_inv				; se apertou só Enter -> comando inválido
    78 000000BB E98700                  		jmp		limpa_vetor
    79                                  
    80                                  	verifica_s_c:
    81 000000BE 803E[1300]9F            		cmp 	byte [comando+1], break_s		; se Enter + 's' -> sai do jogo
    82 000000C3 745A                    		je 		L2_intermediario
    83 000000C5 803E[1300]AE            		cmp 	byte [comando+1], break_c		; se Enter + 'c' -> renicia jogo
    84 000000CA 7506                    		jne 	s_c_inv
    85 000000CC E8D600                  		call 	inicia_jogo
    86 000000CF E95EFF                  		jmp		L1
    87                                  	s_c_inv:
    88 000000D2 803E[EB00]00            		cmp 	byte [resultado], 0				; verifica se digitou apos fim do jogo
    89 000000D7 7575                    		jne 	msg_apos_fim_jogo
    90 000000D9 E86509                  		call 	imprime_comando_inv				; se Enter + qualquer outra tecla -> comando inválido
    91 000000DC E96600                  		jmp 	limpa_vetor
    92                                  		
    93                                  	verifica_tamanho:
    94 000000DF 803E[EB00]00            		cmp 	byte [resultado], 0				; verifica se digitou apos fim do jogo
    95 000000E4 7568                    		jne 	msg_apos_fim_jogo
    96 000000E6 81FB0900                		cmp		bx, 9							; se o vetor tem tamanho 10 -> verifica se é jogada
    97 000000EA 7406                    		je		verifica_comando_jogada
    98 000000EC E85209                  		call 	imprime_comando_inv				; se não, comando inválido
    99 000000EF E95300                  		jmp 	limpa_vetor
   100                                  	verifica_comando_jogada:					; jogada = make_shift + x ou c + break_shift + num1 + num2 + enter
   101 000000F2 E85E02                  		call 	f_verifica_leitura_jogada		; ao final da função sabe-se se a jogada está no formato pelo valor da variavel leitura_jog_val
   102 000000F5 803E[E000]01            		cmp 	byte [leitura_jog_val], 1			
   103 000000FA 7406                    		je 		verifica_validade_jogada		; se está no formato, verifica se é válida
   104 000000FC E84209                  		call 	imprime_comando_inv				; se não, comando inválido
   105 000000FF E94300                  		jmp 	limpa_vetor
   106                                  	verifica_validade_jogada:
   107 00000102 E8AB08                  		call 	imprime_ultima_jog				; se o ultimo comando de jogada esta no formato correto, imprime
   108 00000105 E8B202                  		call 	func_verifica_jogada			; função que verifica se a jogada é valida, se for marca a celula e muda o valor de ultima_jog_val para 1
   109 00000108 803E[E100]01            		cmp 	byte [ultima_jog_val], 1
   110 0000010D 7533                    		jne		jogada_inv						; se a ultima jogada foi inválida, imprime msg inv e lê de novo
   111 0000010F E86006                  		call 	f_verifica_ganhador				; função que verifica se alguem venceu
   112 00000112 803E[EB00]01            		cmp 	byte [resultado], 1				; verifica se X venceu
   113 00000117 7509                    		jne 	verifica_c_venceu
   114 00000119 E84E09                  		call 	imprime_x_venceu				; X VENCEU!
   115 0000011C E92600                  		jmp 	limpa_vetor
   116                                  
   117                                  	L2_intermediario:
   118 0000011F E93200                  		jmp L2
   119                                  
   120                                  	verifica_c_venceu:
   121 00000122 803E[EB00]02            		cmp 	byte [resultado], 2				; verifica se C venceu
   122 00000127 7506                    		jne 	verifica_empate
   123 00000129 E86709                  		call 	imprime_c_venceu				; C VENCEU!
   124 0000012C E91600                  		jmp 	limpa_vetor
   125                                  	verifica_empate:
   126 0000012F 813E[E300]FF01          		cmp 	word [cel_marcadas], 0x01FF		; verifica se todas as celulas foram marcadas
   127 00000135 750E                    		jne 	limpa_vetor
   128 00000137 E88209                  		call 	imprime_empatou					; EMPATOU!
   129 0000013A C606[EB00]03            		mov 	byte [resultado], 3
   130 0000013F E90300                  		jmp 	limpa_vetor
   131                                  		
   132                                  	jogada_inv:
   133 00000142 E8D308                  		call	imprime_jogada_inv				; se não, jogada invalida
   134                                  
   135                                  	limpa_vetor:
   136 00000145 C706[1000]0000          		mov 	word [i_atual_comando], 0		; índice volta para a primeira posição
   137 0000014B E9E2FE                  		jmp 	L1								; lê novamente
   138                                  
   139                                  	msg_apos_fim_jogo:
   140 0000014E E89409                  		call 	imprime_msg_apos_fim_jogo
   141 00000151 E9F1FF                  		jmp 	limpa_vetor
   142                                  ; TERMINAR EXECUÇÃO DO PROGRAMA
   143                                  ; reseta o modo de video
   144                                  L2:
   145 00000154 FA                       	CLI									; Deshabilita INTerrupções por hardware - pin INTR NÃO atende INTerrupções externas
   146 00000155 31C0                    	XOR     AX, AX						; Limpa o registrador AX, é equivalente a fazer "MOV AX,0"				
   147 00000157 8EC0                    	MOV     ES, AX						; Inicializa o registrador de Segmento Extra ES para acessar à região de vetores de INTerrupção (posição zero de memoria)
   148 00000159 A1[0000]                	MOV     AX, [cs_dos]				; Carrega em AX o valor do CS do vector de INTerrupção 9 que foi salvo na variável cs_dos -> linha 25
   149 0000015C 26A32600                	MOV     [ES:INT9*4+2], AX			; Atualiza o valor do CS do vector de INTerrupção 9 que foi salvo na variável cs_dos
   150 00000160 A1[0200]                	MOV     AX, [offset_dos]			; Carrega em AX o valor do IP do vector de INTerrupção 9 que foi salvo na variável offset_dos -> linha 23
   151 00000163 26A32400                	MOV     [ES:INT9*4], AX 			; Atualiza o valor do IP do vector de INTerrupção 9 que foi salvo na variável offset_dos
   152                                  	
   153 00000167 B408                    	mov    	ah,08h
   154 00000169 CD21                    	int     21h
   155 0000016B B400                    	mov  	ah,0   						; set video mode
   156 0000016D A0[2300]                	mov  	al,[modo_anterior]   		; modo anterior
   157 00000170 CD10                    	int  	10h
   158 00000172 B8004C                  	mov     ax,4c00h
   159 00000175 CD21                    	int     21h
   160                                  
   161                                  ;===========================================================================
   162                                  ;========================== FIM DO PROGRAMA ================================
   163                                  ;===========================================================================
   164                                  
   165                                  keyINT:						; Este segmento de código só será executado se uma tecla for presionada, ou seja, se a INT 9h for acionada!
   166 00000177 50                              PUSH    AX				; Salva contexto na pilha
   167 00000178 53                              PUSH    BX
   168 00000179 1E                              PUSH    DS
   169 0000017A B8[0000]                        MOV     AX,data				; Carrega em AX o endereço de "data" -> Região do código onde encontra-se o segemeto de dados "Segment data" 			
   170 0000017D 8ED8                            MOV     DS,AX				; Atualiza registrador de segmento de dados DS, isso pode ser feito no inicio do programa!
   171 0000017F E460                            IN      AL, kb_data			; Le a porta 60h, que é onde está o byte do Make/Break da tecla. Esse valor é fornecido pelo chip "8255 PPI"
   172 00000181 FF06[0C00]                      INC     WORD [p_i]			; Incrementa p_i para indicar no loop principal que uma tecla foi acionada!
   173 00000185 8126[0C00]0700                  AND     WORD [p_i],7			
   174 0000018B 8B1E[0C00]                      MOV     BX,[p_i]			; Carrega p_i em BX
   175 0000018F 8887[0400]                      MOV     [BX+tecla],al		; Transfere o valor Make/Break da tecla armacenado em AL "linha 84" para o segmento de dados com offset DX, na variável "tecla"
   176 00000193 E461                            IN      AL, kb_ctl			; Le porta 61h, pois o bit mais significativo "bit 7" 
   177 00000195 0C80                            OR      AL, 80h				; Faz operação lógica OR com o bit mais significativo do registrador AL (1XXXXXXX) -> Valor lido da porta 61h 
   178 00000197 E661                            OUT     kb_ctl, AL			; Seta o bit mais significativo da porta 61h
   179 00000199 247F                            AND     AL, 7Fh				; Restablece o valor do bit mais significativo do registrador AL (0XXXXXXX), alterado na linha 90 	
   180 0000019B E661                            OUT     kb_ctl, AL			; Reinicia o registrador de dislocamento 74LS322 e Livera a interrupção "CLR do flip-flop 7474". O 8255 - Programmable Peripheral Interface (PPI) fica pronto para recever um outro cód
   181 0000019D B020                            MOV     AL, eoi				; Carrega o AL com a byte de End of Interruption, -> 20h por default
   182 0000019F E620                            OUT     pictrl, AL			; Livera o PIC
   183                                          
   184 000001A1 1F                      		POP     DS			        ; Reestablece os registradores salvos na linha 79 
   185 000001A2 5B                              POP     BX
   186 000001A3 58                              POP     AX
   187 000001A4 CF                              IRET					; Retorna da interrupção
   188                                  
   189                                  inicia_jogo:
   190 000001A5 C606[E200]00            		mov 	byte [ultima_jog_x_c], 0
   191 000001AA C706[E300]0000          		mov 	word [cel_marcadas], 0
   192 000001B0 C706[E500]0000          		mov 	word [cel_marcadas_x], 0
   193 000001B6 C706[E700]0000          		mov 	word [cel_marcadas_c], 0
   194 000001BC C706[E900]0000          		mov 	word [venceu], 0
   195 000001C2 C606[EB00]00            		mov 	byte [resultado], 0
   196                                  
   197                                  	; salvar modo corrente de video(vendo como está o modo de video da maquina)
   198 000001C7 B40F                    		mov  	ah,0Fh
   199 000001C9 CD10                    		int  	10h
   200 000001CB A2[2300]                		mov  	[modo_anterior],al   
   201                                  
   202                                  	; alterar modo de video para gráfico 640x480 16 cores
   203 000001CE B012                    		mov     al,12h
   204 000001D0 B400                    		mov     ah,0
   205 000001D2 CD10                    		int     10h
   206                                  
   207                                  	;desenhar retas da tabela de jogo
   208 000001D4 C606[2200]0F            		mov		byte[cor],branco_intenso	
   209                                  		
   210                                  		;[125,190]->[515,190] -> HORIZONTAL
   211 000001D9 B87D00                  		mov		ax,125
   212 000001DC 50                      		push	ax
   213 000001DD B8BE00                  		mov		ax,190
   214 000001E0 50                      		push	ax
   215 000001E1 B80302                  		mov		ax,515
   216 000001E4 50                      		push	ax
   217 000001E5 B8BE00                  		mov		ax,190
   218 000001E8 50                      		push	ax
   219 000001E9 E8FA0A                  		call	line
   220                                  
   221                                  		;[125,320]->[515,320] -> HORIZONTAL
   222 000001EC B87D00                  		mov		ax,125
   223 000001EF 50                      		push	ax
   224 000001F0 B84001                  		mov		ax,320
   225 000001F3 50                      		push	ax
   226 000001F4 B80302                  		mov		ax,515
   227 000001F7 50                      		push	ax
   228 000001F8 B84001                  		mov		ax,320
   229 000001FB 50                      		push	ax
   230 000001FC E8E70A                  		call	line
   231                                  
   232                                  		;[255,60]->[255,450] -> VERTICAL
   233 000001FF B8FF00                  		mov		ax,255
   234 00000202 50                      		push	ax
   235 00000203 B83C00                  		mov		ax,60
   236 00000206 50                      		push	ax
   237 00000207 B8FF00                  		mov		ax,255
   238 0000020A 50                      		push	ax
   239 0000020B B8C201                  		mov		ax,450
   240 0000020E 50                      		push	ax
   241 0000020F E8D40A                  		call	line
   242                                  
   243                                  		;[385,60]->[385,450] -> VERTICAL
   244 00000212 B88101                  		mov		ax,385
   245 00000215 50                      		push	ax
   246 00000216 B83C00                  		mov		ax,60
   247 00000219 50                      		push	ax
   248 0000021A B88101                  		mov		ax,385
   249 0000021D 50                      		push	ax
   250 0000021E B8C201                  		mov		ax,450
   251 00000221 50                      		push	ax
   252 00000222 E8C10A                  		call	line
   253                                  
   254                                  	;escrever mensagem topo "JOGO DA VELHA"
   255 00000225 B90D00                  		mov     cx,13					;número de caracteres
   256 00000228 BB0000                  		mov     bx,0
   257 0000022B B600                    		mov     dh,0					;linha 0-29
   258 0000022D B222                    		mov     dl,34					;coluna 0-79
   259 0000022F C606[2200]01            		mov		byte[cor],azul
   260                                  	lm1:
   261 00000234 E87509                  		call	cursor
   262 00000237 8A87[2C00]              		mov     al,[bx+titulo]
   263 0000023B E88509                  		call	caracter
   264 0000023E 43                      		inc     bx						;proximo caracter
   265 0000023F FEC2                    		inc		dl						;avanca a coluna
   266 00000241 FE06[2200]              		inc		byte [cor]				;mudar a cor para a seguinte
   267 00000245 E2ED                    		loop    lm1
   268                                  
   269 00000247 C606[2200]07            	mov		byte[cor],branco
   270                                  	;desenhar caixa de comando
   271                                  	;[5,50]->[635,50] -> HORIZONTAL
   272 0000024C B80500                  	mov		ax,5
   273 0000024F 50                      	push	ax
   274 00000250 B83200                  	mov		ax,50
   275 00000253 50                      	push	ax
   276 00000254 B87B02                  	mov		ax,635
   277 00000257 50                      	push	ax
   278 00000258 B83200                  	mov		ax,50
   279 0000025B 50                      	push	ax
   280 0000025C E8870A                  	call	line
   281                                  
   282                                  	;[5,30]->[635,30] -> HORIZONTAL
   283 0000025F B80500                  	mov		ax,5
   284 00000262 50                      	push	ax
   285 00000263 B81E00                  	mov		ax,30
   286 00000266 50                      	push	ax
   287 00000267 B87B02                  	mov		ax,635
   288 0000026A 50                      	push	ax
   289 0000026B B81E00                  	mov		ax,30
   290 0000026E 50                      	push	ax
   291 0000026F E8740A                  	call	line
   292                                  
   293                                  	;[5,30]->[5,50] -> VERTICAL
   294 00000272 B80500                  	mov		ax,5
   295 00000275 50                      	push	ax
   296 00000276 B81E00                  	mov		ax,30
   297 00000279 50                      	push	ax
   298 0000027A B80500                  	mov		ax,5
   299 0000027D 50                      	push	ax
   300 0000027E B83200                  	mov		ax,50
   301 00000281 50                      	push	ax
   302 00000282 E8610A                  	call	line
   303                                  
   304                                  	;[635,30]->[635,50] -> VERTICAL
   305 00000285 B87B02                  	mov		ax,635
   306 00000288 50                      	push	ax
   307 00000289 B81E00                  	mov		ax,30
   308 0000028C 50                      	push	ax
   309 0000028D B87B02                  	mov		ax,635
   310 00000290 50                      	push	ax
   311 00000291 B83200                  	mov		ax,50
   312 00000294 50                      	push	ax
   313 00000295 E84E0A                  	call	line
   314                                  
   315                                  	;desenhar caixa de mensagem
   316                                  	;[5,20]->[635,20] -> HORIZONTAL
   317 00000298 B80500                  	mov		ax,5
   318 0000029B 50                      	push	ax
   319 0000029C B81400                  	mov		ax,20
   320 0000029F 50                      	push	ax
   321 000002A0 B87B02                  	mov		ax,635
   322 000002A3 50                      	push	ax
   323 000002A4 B81400                  	mov		ax,20
   324 000002A7 50                      	push	ax
   325 000002A8 E83B0A                  	call	line
   326                                  
   327                                  	;[5,30]->[5,50] -> VERTICAL
   328 000002AB B80500                  	mov		ax,5
   329 000002AE 50                      	push	ax
   330 000002AF B80000                  	mov		ax,0
   331 000002B2 50                      	push	ax
   332 000002B3 B80500                  	mov		ax,5
   333 000002B6 50                      	push	ax
   334 000002B7 B81400                  	mov		ax,20
   335 000002BA 50                      	push	ax
   336 000002BB E8280A                  	call	line
   337                                  
   338                                  	;[635,30]->[635,50] -> VERTICAL
   339 000002BE B87B02                  	mov		ax,635
   340 000002C1 50                      	push	ax
   341 000002C2 B80000                  	mov		ax,0
   342 000002C5 50                      	push	ax
   343 000002C6 B87B02                  	mov		ax,635
   344 000002C9 50                      	push	ax
   345 000002CA B81400                  	mov		ax,20
   346 000002CD 50                      	push	ax
   347 000002CE E8150A                  	call	line
   348                                  
   349                                  	;escrever mensagem de comando
   350 000002D1 B91100                  		mov     cx,17					;número de caracteres
   351 000002D4 BB0000                  		mov     bx,0
   352 000002D7 B61B                    		mov     dh,27					;linha 0-29
   353 000002D9 B202                    		mov     dl,2					;coluna 0-79
   354 000002DB C606[2200]07            		mov		byte[cor],branco
   355                                  	lm2:
   356 000002E0 E8C908                  		call	cursor
   357 000002E3 8A87[3900]              		mov     al,[bx+campo_comando]
   358 000002E7 E8D908                  		call	caracter
   359 000002EA 43                      		inc     bx						;proximo caracter
   360 000002EB FEC2                    		inc		dl						;avanca a coluna
   361 000002ED E2F1                    		loop    lm2
   362                                  
   363                                  	;escrever mensagem de mensagens
   364 000002EF B91200                  		mov     cx,18					;número de caracteres
   365 000002F2 BB0000                  		mov     bx,0
   366 000002F5 B61D                    		mov     dh,29					;linha 0-29
   367 000002F7 B202                    		mov     dl,2					;coluna 0-79
   368 000002F9 C606[2200]07            		mov		byte[cor],branco
   369                                  	lm3:
   370 000002FE E8AB08                  		call	cursor
   371 00000301 8A87[4A00]              		mov     al,[bx+campo_mensagem]
   372 00000305 E8BB08                  		call	caracter
   373 00000308 43                      		inc     bx						;proximo caracter
   374 00000309 FEC2                    		inc		dl						;avanca a coluna
   375 0000030B E2F1                    		loop    lm3
   376                                  
   377                                  	;escrever identificação das células
   378 0000030D B91200                  		mov     cx,18					;número de caracteres
   379 00000310 BB0000                  		mov     bx,0
   380 00000313 B402                    		mov		ah,2					;valor para comparar e saber se já escreveu 'l' e 'c'
   381 00000315 B603                    		mov     dh,3					;linha 0-29
   382 00000317 B210                    		mov     dl,16					;coluna 0-79
   383 00000319 C606[2200]07            		mov		byte[cor],branco
   384                                  	lm4:
   385 0000031E E88B08                  		call	cursor
   386 00000321 8A87[5C00]              		mov     al,[bx+celulas]
   387 00000325 E89B08                  		call	caracter
   388 00000328 43                      		inc     bx						;proximo caracter
   389 00000329 FEC2                    		inc		dl						;avanca a coluna
   390 0000032B 38E3                    		cmp 	bl,ah					;se ainda não escreveu o num da 'l' e 'c' da célula continua
   391 0000032D 7C1B                    		jl		cont1
   392                                  		;se já, muda para a célula abaixo
   393 0000032F 80C402                  		add 	ah,2
   394 00000332 80EA02                  		sub 	dl,2
   395 00000335 80C608                  		add 	dh,8	
   396                                  		
   397 00000338 80FB06                  		cmp 	bl,6					;verifica se terminou de escrever nas celulas da coluna 1
   398 0000033B 7504                    		jne		cont				;se sim, muda para a coluna 2
   399 0000033D B603                    		mov 	dh,3
   400 0000033F B221                    		mov 	dl,33
   401                                  	cont:
   402 00000341 80FB0C                  		cmp 	bl,12					;verifica se terminou de escrever nas células da coluna 2
   403 00000344 7504                    		jne		cont1				;se sim, muda para a coluna 3
   404 00000346 B603                    		mov 	dh,3
   405 00000348 B231                    		mov 	dl,49
   406                                  	cont1:
   407 0000034A E2D2                    		loop    lm4
   408 0000034C C706[1000]0000          	mov word [i_atual_comando], 0
   409 00000352 C3                      	ret
   410                                  
   411                                  f_verifica_leitura_jogada:
   412 00000353 803E[1200]2A            		cmp 	byte [comando], make_shift		; verifica se o comando começa com Shift
   413 00000358 7405                    		je 		testa_c							; se sim, testa Shift + c
   414 0000035A C606[E000]00            		mov 	byte [leitura_jog_val], 0		; se não, comando inválido
   415                                  	testa_c:
   416 0000035F 803E[1300]2E            		cmp 	byte [comando+1], make_c		; testa se é circulo
   417 00000364 7503                    		jne 	testa_x							; se não for, testa x
   418 00000366 E90F00                  		jmp 	testa_celula1
   419                                  	testa_x:
   420 00000369 803E[1300]2D            		cmp 	byte [comando+1], make_x		; testa se é x
   421 0000036E 7408                    		je 		testa_celula1
   422 00000370 C606[E000]00            		mov 	byte [leitura_jog_val], 0		; se não for, comando invalido
   423 00000375 E94100                  		jmp 	fim_f1
   424                                  	testa_celula1:
   425 00000378 803E[1600]04            		cmp 	byte [comando+4], make_3		; verifica se o numero da celula 1 é > 3
   426 0000037D 7E08                    		jle		testa_esc1						; se não, testa se é a tecla esc
   427 0000037F C606[E000]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   428 00000384 E93200                  		jmp 	fim_f1
   429                                  	testa_esc1:
   430 00000387 803E[1600]01            		cmp 	byte [comando+4], 01h			; se é < 3, verifica se é a tecla esc (make = 01h)
   431 0000038C 7508                    		jne 	testa_celula2					; se não, testa o número da celula 2
   432 0000038E C606[E000]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   433 00000393 E92300                  		jmp 	fim_f1
   434                                  	testa_celula2:
   435 00000396 803E[1800]04            		cmp 	byte [comando+6], make_3		; verifica se o numero da celula 2 é > 3
   436 0000039B 7E08                    		jle		testa_esc2						; se não, testa se é a tecla esc 
   437 0000039D C606[E000]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   438 000003A2 E91400                  		jmp 	fim_f1
   439                                  	testa_esc2: 
   440 000003A5 803E[1800]01            		cmp 	byte [comando+6], 01h			; se é < 3, verifica se é a tecla esc (make = 01h)
   441 000003AA 7508                    		jne 	esta_no_formato					; se não, então está no formato correto
   442 000003AC C606[E000]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   443 000003B1 E90500                  		jmp 	fim_f1
   444                                  	esta_no_formato:
   445 000003B4 C606[E000]01            		mov 	byte [leitura_jog_val], 1		
   446                                  	fim_f1:
   447 000003B9 C3                      		ret
   448                                  
   449                                  func_verifica_jogada:
   450 000003BA A0[1600]                		mov 	al, byte [comando+4]						; transfere o make code da célula 1 para al
   451 000003BD 8A26[1800]              		mov 	ah, byte [comando+6]						; transfere o make code da célula 2 para ah
   452 000003C1 8A1E[E200]              		mov 	bl, byte [ultima_jog_x_c]
   453 000003C5 381E[1300]              		cmp 	byte [comando+1], bl 						; verifica se o jogador tentou jogar 2 vezes seguidas
   454 000003C9 7447                    		je 		fim_f2_inv_intermediario					; se já, jogada invalida
   455                                  	; testa linha 1
   456 000003CB 3C02                    		cmp 	al, make_1							
   457 000003CD 7546                    		jne 	testa_l2									; se o primeiro digito não é 1, testa linha 2
   458                                  		;testa_l1_c1										; se é, testa as colunas
   459 000003CF 80FC02                  			cmp 	ah, make_1								; verifica se é coluna 1
   460 000003D2 7513                    			jne 	testa_l1_c2								; se n é coluna 1, testa coluna 2 
   461                                  			; Se digitou L1 C1
   462 000003D4 BB0100                  			mov 	bx, 0x0001
   463 000003D7 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 11 
   464 000003DB 81FB0100                			cmp 	bx, 0x0001
   465 000003DF 7431                    			je		fim_f2_inv_intermediario				; se já, jogada invalida
   466 000003E1 E8C700                  			call 	marca_celula11							; se não, marca celula 11
   467 000003E4 E9B800                  			jmp		fim_f2_val
   468                                  		testa_l1_c2:
   469 000003E7 80FC03                  			cmp 	ah, make_2					
   470 000003EA 7513                    			jne 	eh_l1_c3								; se n é coluna 2, é coluna 3
   471                                  			; Se digitou L1 C2
   472 000003EC BB0200                  			mov 	bx, 0x0002
   473 000003EF 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 12 
   474 000003F3 81FB0200                			cmp 	bx, 0x0002
   475 000003F7 7419                    			je		fim_f2_inv_intermediario				; se já, jogada invalida
   476 000003F9 E8FE00                  			call 	marca_celula12							; se não, marca celula 12
   477 000003FC E9A000                  			jmp		fim_f2_val
   478                                  		eh_l1_c3:
   479 000003FF BB0400                  			mov 	bx, 0x0004
   480 00000402 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 13 
   481 00000406 81FB0400                			cmp 	bx, 0x0004
   482 0000040A 7406                    			je		fim_f2_inv_intermediario				; se já, jogada invalida
   483 0000040C E83A01                  			call 	marca_celula13							; se não, marca celula 13
   484 0000040F E98D00                  			jmp		fim_f2_val
   485                                  	fim_f2_inv_intermediario:
   486 00000412 E99000                  		jmp fim_f2_inv
   487                                  	testa_l2:
   488 00000415 3C03                    		cmp 	al, make_2							
   489 00000417 7543                    		jne 	eh_l3										; se o primeiro digito não é 2, então é linha 3
   490                                  		;testa_l2_c1										; se é, testa as colunas
   491 00000419 80FC02                  			cmp 	ah, make_1								; verifica se é coluna 1
   492 0000041C 7513                    			jne 	testa_l2_c2								; se n é coluna 1, testa coluna 2 
   493                                  			; Se digitou L2 C1
   494 0000041E BB0800                  			mov 	bx, 0x0008
   495 00000421 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 21 
   496 00000425 81FB0800                			cmp 	bx, 0x0008
   497 00000429 747A                    			je		fim_f2_inv								; se já, jogada invalida
   498 0000042B E86A01                  			call 	marca_celula21							; se não, marca celula 21
   499 0000042E E96E00                  			jmp		fim_f2_val
   500                                  		testa_l2_c2:
   501 00000431 80FC03                  			cmp 	ah, make_2					
   502 00000434 7513                    			jne 	eh_l2_c3								; se n é coluna 2, é coluna 3
   503                                  			; Se digitou L2 C2
   504 00000436 BB1000                  			mov 	bx, 0x0010
   505 00000439 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 22 
   506 0000043D 81FB1000                			cmp 	bx, 0x0010
   507 00000441 7462                    			je		fim_f2_inv								; se já, jogada invalida
   508 00000443 E8A101                  			call 	marca_celula22							; se não, marca celula 22
   509 00000446 E95600                  			jmp		fim_f2_val
   510                                  		eh_l2_c3:
   511 00000449 BB2000                  			mov 	bx, 0x0020
   512 0000044C 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 23 
   513 00000450 81FB2000                			cmp 	bx, 0x0020
   514 00000454 744F                    			je		fim_f2_inv								; se já, jogada invalida
   515 00000456 E8DD01                  			call 	marca_celula23							; se não, marca celula 23
   516 00000459 E94300                  			jmp		fim_f2_val
   517                                  	eh_l3:
   518                                  		;testa_l3_c1										; testa as colunas
   519 0000045C 80FC02                  			cmp 	ah, make_1								; verifica se é coluna 1
   520 0000045F 7513                    			jne 	testa_l3_c2								; se n é coluna 1, testa coluna 2 
   521                                  			; Se digitou L3 C1
   522 00000461 BB4000                  			mov 	bx, 0x0040
   523 00000464 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 31 
   524 00000468 81FB4000                			cmp 	bx, 0x0040
   525 0000046C 7437                    			je		fim_f2_inv								; se já, jogada invalida
   526 0000046E E81402                  			call 	marca_celula31							; se não, marca celula 31
   527 00000471 E92B00                  			jmp		fim_f2_val
   528                                  		testa_l3_c2:
   529 00000474 80FC03                  			cmp 	ah, make_2					
   530 00000477 7513                    			jne 	eh_l3_c3								; se n é coluna 2, é coluna 3
   531                                  			; Se digitou L3 C2
   532 00000479 BB8000                  			mov 	bx, 0x0080
   533 0000047C 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 32 
   534 00000480 81FB8000                			cmp 	bx, 0x0080
   535 00000484 741F                    			je		fim_f2_inv								; se já, jogada invalida
   536 00000486 E84B02                  			call 	marca_celula32							; se não, marca celula 32
   537 00000489 E91300                  			jmp		fim_f2_val
   538                                  		eh_l3_c3:
   539 0000048C BB0001                  			mov 	bx, 0x0100
   540 0000048F 231E[E300]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 33 
   541 00000493 81FB0001                			cmp 	bx, 0x0100
   542 00000497 740C                    			je		fim_f2_inv								; se já, jogada invalida
   543 00000499 E88702                  			call 	marca_celula33							; se não, marca celula 33
   544 0000049C E90000                  			jmp		fim_f2_val
   545                                  	fim_f2_val:
   546 0000049F C606[E100]01            		mov 	byte [ultima_jog_val], 1
   547 000004A4 C3                      		ret
   548                                  	fim_f2_inv:
   549 000004A5 C606[E100]00            		mov 	byte [ultima_jog_val], 0
   550 000004AA C3                      		ret
   551                                  
   552                                  marca_celula11:
   553 000004AB 8106[E300]0100          		add 	word [cel_marcadas], 1						; muda a variavel cel_marcadas indicando que marcou a celula 11
   554 000004B1 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   555 000004B6 7422                    		je		marca_x_11									; se é, marca x
   556                                  		; se não, marca c
   557 000004B8 8106[E700]0100          		add 	word [cel_marcadas_c], 1					; muda a variavel cel_marcadas_c indicando que marcou a celula 11
   558 000004BE C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   559                                  		;desenhar um circulo na posicão [190,385]
   560 000004C3 C606[2200]04            		mov		byte[cor], vermelho
   561 000004C8 B8BE00                  		mov		ax, 190
   562 000004CB 50                      		push	ax
   563 000004CC B88101                  		mov		ax, 385
   564 000004CF 50                      		push	ax
   565 000004D0 B82D00                  		mov		ax, raio
   566 000004D3 50                      		push	ax
   567 000004D4 E83107                  		call 	circle
   568 000004D7 E91F00                  		jmp 	fim_marca11
   569                                  	marca_x_11:
   570 000004DA 8106[E500]0100          		add 	word [cel_marcadas_x], 1					; muda a variavel cel_marcadas_x indicando que marcou a celula 11
   571 000004E0 C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   572                                  		;desenhar um x na posicão [190,385] (centro)
   573 000004E5 C606[2200]01            		mov		byte[cor], azul
   574 000004EA B8BE00                  		mov		ax,190
   575 000004ED 50                      		push	ax
   576 000004EE B88101                  		mov		ax,385
   577 000004F1 50                      		push	ax
   578 000004F2 B82D00                  		mov		ax, lado
   579 000004F5 50                      		push	ax
   580 000004F6 E86706                  		call	desenha_x
   581                                  	fim_marca11:
   582 000004F9 C3                      		ret
   583                                  
   584                                  marca_celula12:
   585 000004FA 8106[E300]0200          		add 	word [cel_marcadas], 2						; muda a variavel cel_marcadas indicando que marcou a celula 12
   586 00000500 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   587 00000505 7422                    		je		marca_x_12									; se é, marca x
   588                                  		; se não, marca c
   589 00000507 8106[E700]0200          		add 	word [cel_marcadas_c], 2					; muda a variavel cel_marcadas_c indicando que marcou a celula 12
   590 0000050D C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   591                                  		;desenhar um circulo na posicão [320,385]
   592 00000512 C606[2200]04            		mov		byte[cor], vermelho
   593 00000517 B84001                  		mov		ax, 320
   594 0000051A 50                      		push	ax
   595 0000051B B88101                  		mov		ax, 385
   596 0000051E 50                      		push	ax
   597 0000051F B82D00                  		mov		ax, raio
   598 00000522 50                      		push	ax
   599 00000523 E8E206                  		call 	circle
   600 00000526 E91F00                  		jmp 	fim_marca12
   601                                  	marca_x_12:
   602 00000529 8106[E500]0200          		add 	word [cel_marcadas_x], 2					; muda a variavel cel_marcadas_x indicando que marcou a celula 12
   603 0000052F C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   604                                  		;desenhar um x na posicão [320,385] (centro)
   605 00000534 C606[2200]01            		mov		byte[cor], azul
   606 00000539 B84001                  		mov		ax,320
   607 0000053C 50                      		push	ax
   608 0000053D B88101                  		mov		ax,385
   609 00000540 50                      		push	ax
   610 00000541 B82D00                  		mov		ax, lado
   611 00000544 50                      		push	ax
   612 00000545 E81806                  		call	desenha_x
   613                                  	fim_marca12:
   614 00000548 C3                      		ret
   615                                  
   616                                  marca_celula13:
   617 00000549 8106[E300]0400          		add 	word [cel_marcadas], 4						; muda a variavel cel_marcadas indicando que marcou a celula 13
   618 0000054F 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   619 00000554 7422                    		je		marca_x_13									; se é, marca x
   620                                  		; se não, marca c
   621 00000556 8106[E700]0400          		add 	word [cel_marcadas_c], 4					; muda a variavel cel_marcadas_c indicando que marcou a celula 13
   622 0000055C C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   623                                  		;desenhar um circulo na posicão [450,385]
   624 00000561 C606[2200]04            		mov		byte[cor], vermelho
   625 00000566 B8C201                  		mov		ax, 450
   626 00000569 50                      		push	ax
   627 0000056A B88101                  		mov		ax, 385
   628 0000056D 50                      		push	ax
   629 0000056E B82D00                  		mov		ax, raio
   630 00000571 50                      		push	ax
   631 00000572 E89306                  		call 	circle
   632 00000575 E91F00                  		jmp 	fim_marca13
   633                                  	marca_x_13:
   634 00000578 8106[E500]0400          		add 	word [cel_marcadas_x], 4					; muda a variavel cel_marcadas_x indicando que marcou a celula 13
   635 0000057E C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   636                                  		;desenhar um x na posicão [450,385] (centro)
   637 00000583 C606[2200]01            		mov		byte[cor], azul
   638 00000588 B8C201                  		mov		ax,450
   639 0000058B 50                      		push	ax
   640 0000058C B88101                  		mov		ax,385
   641 0000058F 50                      		push	ax
   642 00000590 B82D00                  		mov		ax, lado
   643 00000593 50                      		push	ax
   644 00000594 E8C905                  		call	desenha_x
   645                                  	fim_marca13:
   646 00000597 C3                      		ret
   647                                  
   648                                  marca_celula21:
   649 00000598 8106[E300]0800          		add 	word [cel_marcadas], 8						; muda a variavel cel_marcadas indicando que marcou a celula 21
   650 0000059E 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   651 000005A3 7422                    		je		marca_x_21									; se é, marca x
   652                                  		; se não, marca c
   653 000005A5 8106[E700]0800          		add 	word [cel_marcadas_c], 8					; muda a variavel cel_marcadas_c indicando que marcou a celula 21
   654 000005AB C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   655                                  		;desenhar um circulo na posicão [190,255]
   656 000005B0 C606[2200]04            		mov		byte[cor], vermelho
   657 000005B5 B8BE00                  		mov		ax, 190
   658 000005B8 50                      		push	ax
   659 000005B9 B8FF00                  		mov		ax, 255
   660 000005BC 50                      		push	ax
   661 000005BD B82D00                  		mov		ax, raio
   662 000005C0 50                      		push	ax
   663 000005C1 E84406                  		call 	circle
   664 000005C4 E91F00                  		jmp 	fim_marca21
   665                                  	marca_x_21:
   666 000005C7 8106[E500]0800          		add 	word [cel_marcadas_x], 8					; muda a variavel cel_marcadas_x indicando que marcou a celula 21
   667 000005CD C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   668                                  		;desenhar um x na posicão [190,255] (centro)
   669 000005D2 C606[2200]01            		mov		byte[cor], azul
   670 000005D7 B8BE00                  		mov		ax,190
   671 000005DA 50                      		push	ax
   672 000005DB B8FF00                  		mov		ax,255
   673 000005DE 50                      		push	ax
   674 000005DF B82D00                  		mov		ax, lado
   675 000005E2 50                      		push	ax
   676 000005E3 E87A05                  		call	desenha_x
   677                                  	fim_marca21:
   678 000005E6 C3                      		ret
   679                                  
   680                                  marca_celula22:
   681 000005E7 8106[E300]1000          		add 	word [cel_marcadas], 16						; muda a variavel cel_marcadas indicando que marcou a celula 22
   682 000005ED 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   683 000005F2 7422                    		je		marca_x_22									; se é, marca x
   684                                  		; se não, marca c
   685 000005F4 8106[E700]1000          		add 	word [cel_marcadas_c], 16					; muda a variavel cel_marcadas_c indicando que marcou a celula 22
   686 000005FA C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   687                                  		;desenhar um circulo na posicão [320,255]
   688 000005FF C606[2200]04            		mov		byte[cor], vermelho
   689 00000604 B84001                  		mov		ax, 320
   690 00000607 50                      		push	ax
   691 00000608 B8FF00                  		mov		ax, 255
   692 0000060B 50                      		push	ax
   693 0000060C B82D00                  		mov		ax, raio
   694 0000060F 50                      		push	ax
   695 00000610 E8F505                  		call 	circle
   696 00000613 E91F00                  		jmp 	fim_marca22
   697                                  	marca_x_22:
   698 00000616 8106[E500]1000          		add 	word [cel_marcadas_x], 16					; muda a variavel cel_marcadas_x indicando que marcou a celula 22
   699 0000061C C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   700                                  		;desenhar um x na posicão [320,255] (centro)
   701 00000621 C606[2200]01            		mov		byte[cor], azul
   702 00000626 B84001                  		mov		ax,320
   703 00000629 50                      		push	ax
   704 0000062A B8FF00                  		mov		ax,255
   705 0000062D 50                      		push	ax
   706 0000062E B82D00                  		mov		ax, lado
   707 00000631 50                      		push	ax
   708 00000632 E82B05                  		call	desenha_x
   709                                  	fim_marca22:
   710 00000635 C3                      		ret
   711                                  
   712                                  marca_celula23:
   713 00000636 8106[E300]2000          		add 	word [cel_marcadas], 32						; muda a variavel cel_marcadas indicando que marcou a celula 23
   714 0000063C 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   715 00000641 7422                    		je		marca_x_23									; se é, marca x
   716                                  		; se não, marca c
   717 00000643 8106[E700]2000          		add 	word [cel_marcadas_c], 32					; muda a variavel cel_marcadas_c indicando que marcou a celula 23
   718 00000649 C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   719                                  		;desenhar um circulo na posicão [450,255]
   720 0000064E C606[2200]04            		mov		byte[cor], vermelho
   721 00000653 B8C201                  		mov		ax, 450
   722 00000656 50                      		push	ax
   723 00000657 B8FF00                  		mov		ax, 255
   724 0000065A 50                      		push	ax
   725 0000065B B82D00                  		mov		ax, raio
   726 0000065E 50                      		push	ax
   727 0000065F E8A605                  		call 	circle
   728 00000662 E91F00                  		jmp 	fim_marca23
   729                                  	marca_x_23:
   730 00000665 8106[E500]2000          		add 	word [cel_marcadas_x], 32					; muda a variavel cel_marcadas_x indicando que marcou a celula 23
   731 0000066B C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   732                                  		;desenhar um x na posicão [450,255] (centro)
   733 00000670 C606[2200]01            		mov		byte[cor], azul
   734 00000675 B8C201                  		mov		ax,450
   735 00000678 50                      		push	ax
   736 00000679 B8FF00                  		mov		ax,255
   737 0000067C 50                      		push	ax
   738 0000067D B82D00                  		mov		ax, lado
   739 00000680 50                      		push	ax
   740 00000681 E8DC04                  		call	desenha_x
   741                                  	fim_marca23:
   742 00000684 C3                      		ret
   743                                  
   744                                  marca_celula31:
   745 00000685 8106[E300]4000          		add 	word [cel_marcadas], 64						; muda a variavel cel_marcadas indicando que marcou a celula 31
   746 0000068B 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   747 00000690 7422                    		je		marca_x_31									; se é, marca x
   748                                  		; se não, marca c
   749 00000692 8106[E700]4000          		add 	word [cel_marcadas_c], 64					; muda a variavel cel_marcadas_c indicando que marcou a celula 31
   750 00000698 C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   751                                  		;desenhar um circulo na posicão [190,125]
   752 0000069D C606[2200]04            		mov		byte[cor], vermelho
   753 000006A2 B8BE00                  		mov		ax, 190
   754 000006A5 50                      		push	ax
   755 000006A6 B87D00                  		mov		ax, 125
   756 000006A9 50                      		push	ax
   757 000006AA B82D00                  		mov		ax, raio
   758 000006AD 50                      		push	ax
   759 000006AE E85705                  		call 	circle
   760 000006B1 E91F00                  		jmp 	fim_marca31
   761                                  	marca_x_31:
   762 000006B4 8106[E500]4000          		add 	word [cel_marcadas_x], 64					; muda a variavel cel_marcadas_x indicando que marcou a celula 31
   763 000006BA C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   764                                  		;desenhar um x na posicão [190,125] (centro)
   765 000006BF C606[2200]01            		mov		byte[cor], azul
   766 000006C4 B8BE00                  		mov		ax,190
   767 000006C7 50                      		push	ax
   768 000006C8 B87D00                  		mov		ax,125
   769 000006CB 50                      		push	ax
   770 000006CC B82D00                  		mov		ax, lado
   771 000006CF 50                      		push	ax
   772 000006D0 E88D04                  		call	desenha_x
   773                                  	fim_marca31:
   774 000006D3 C3                      		ret
   775                                  
   776                                  marca_celula32:
   777 000006D4 8106[E300]8000          		add 	word [cel_marcadas], 128					; muda a variavel cel_marcadas indicando que marcou a celula 32
   778 000006DA 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   779 000006DF 7422                    		je		marca_x_32									; se é, marca x
   780                                  		; se não, marca c
   781 000006E1 8106[E700]8000          		add 	word [cel_marcadas_c], 128					; muda a variavel cel_marcadas_c indicando que marcou a celula 32
   782 000006E7 C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   783                                  		;desenhar um circulo na posicão [320,125]
   784 000006EC C606[2200]04            		mov		byte[cor], vermelho
   785 000006F1 B84001                  		mov		ax, 320
   786 000006F4 50                      		push	ax
   787 000006F5 B87D00                  		mov		ax, 125
   788 000006F8 50                      		push	ax
   789 000006F9 B82D00                  		mov		ax, raio
   790 000006FC 50                      		push	ax
   791 000006FD E80805                  		call 	circle
   792 00000700 E91F00                  		jmp 	fim_marca32
   793                                  	marca_x_32:
   794 00000703 8106[E500]8000          		add 	word [cel_marcadas_x], 128					; muda a variavel cel_marcadas_x indicando que marcou a celula 32
   795 00000709 C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   796                                  		;desenhar um x na posicão [320,125] (centro)
   797 0000070E C606[2200]01            		mov		byte[cor], azul
   798 00000713 B84001                  		mov		ax,320
   799 00000716 50                      		push	ax
   800 00000717 B87D00                  		mov		ax,125
   801 0000071A 50                      		push	ax
   802 0000071B B82D00                  		mov		ax, lado
   803 0000071E 50                      		push	ax
   804 0000071F E83E04                  		call	desenha_x
   805                                  	fim_marca32:
   806 00000722 C3                      		ret
   807                                  
   808                                  marca_celula33:
   809 00000723 8106[E300]0001          		add 	word [cel_marcadas], 256					; muda a variavel cel_marcadas indicando que marcou a celula 33
   810 00000729 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   811 0000072E 7422                    		je		marca_x_33									; se é, marca x
   812                                  		; se não, marca c
   813 00000730 8106[E700]0001          		add 	word [cel_marcadas_c], 256					; muda a variavel cel_marcadas_c indicando que marcou a celula 33
   814 00000736 C606[E200]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   815                                  		;desenhar um circulo na posicão [450,125]
   816 0000073B C606[2200]04            		mov		byte[cor], vermelho
   817 00000740 B8C201                  		mov		ax, 450
   818 00000743 50                      		push	ax
   819 00000744 B87D00                  		mov		ax, 125
   820 00000747 50                      		push	ax
   821 00000748 B82D00                  		mov		ax, raio
   822 0000074B 50                      		push	ax
   823 0000074C E8B904                  		call 	circle
   824 0000074F E91F00                  		jmp 	fim_marca33
   825                                  	marca_x_33:
   826 00000752 8106[E500]0001          		add 	word [cel_marcadas_x], 256					; muda a variavel cel_marcadas_x indicando que marcou a celula 33
   827 00000758 C606[E200]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   828                                  		;desenhar um x na posicão [450,125] (centro)
   829 0000075D C606[2200]01            		mov		byte[cor], azul
   830 00000762 B8C201                  		mov		ax,450
   831 00000765 50                      		push	ax
   832 00000766 B87D00                  		mov		ax,125
   833 00000769 50                      		push	ax
   834 0000076A B82D00                  		mov		ax, lado
   835 0000076D 50                      		push	ax
   836 0000076E E8EF03                  		call	desenha_x
   837                                  	fim_marca33:
   838 00000771 C3                      		ret
   839                                  
   840                                  f_verifica_ganhador:
   841                                  		; 11-21-31 = 001001001 = 0x0049
   842                                  		; 12-22-32 = 010010010 = 0x0092
   843                                  		; 13-23-33 = 100100100 = 0x0124
   844                                  		; 11-12-13 = 000000111 = 0x0007
   845                                  		; 21-22-23 = 000111000 = 0x0038
   846                                  		; 31-32-33 = 111000000 = 0x01C0
   847                                  		; 11-22-33 = 100010001 = 0x0111
   848                                  		; 13-22-31 = 001010100 = 0x0054
   849 00000772 A1[E500]                		mov 	ax, word [cel_marcadas_x]
   850 00000775 254900                  		and 	ax, 0x0049
   851 00000778 3D4900                  		cmp		ax, 0x0049
   852 0000077B 7509                    		jne		prox1
   853 0000077D C706[E900]4900          		mov 	word [venceu], 0x0049
   854 00000783 E92C01                  		jmp 	ganhou_x
   855                                  	prox1:
   856 00000786 A1[E500]                		mov 	ax, word [cel_marcadas_x]
   857 00000789 259200                  		and 	ax, 0x0092
   858 0000078C 3D9200                  		cmp		ax, 0x0092
   859 0000078F 7509                    		jne		prox2
   860 00000791 C706[E900]9200          		mov 	word [venceu], 0x0092
   861 00000797 E91801                  		jmp 	ganhou_x
   862                                  	prox2:
   863 0000079A A1[E500]                		mov 	ax, word [cel_marcadas_x]
   864 0000079D 252401                  		and 	ax, 0x0124
   865 000007A0 3D2401                  		cmp		ax, 0x0124
   866 000007A3 7509                    		jne		prox3
   867 000007A5 C706[E900]2401          		mov 	word [venceu], 0x0124
   868 000007AB E90401                  		jmp 	ganhou_x
   869                                  	prox3:
   870 000007AE A1[E500]                		mov 	ax, word [cel_marcadas_x]
   871 000007B1 250700                  		and 	ax, 0x0007
   872 000007B4 3D0700                  		cmp		ax, 0x0007
   873 000007B7 7509                    		jne		prox4
   874 000007B9 C706[E900]0700          		mov 	word [venceu], 0x0007
   875 000007BF E9F000                  		jmp 	ganhou_x
   876                                  	prox4:
   877 000007C2 A1[E500]                		mov 	ax, word [cel_marcadas_x]
   878 000007C5 253800                  		and 	ax, 0x0038
   879 000007C8 3D3800                  		cmp		ax, 0x0038
   880 000007CB 7509                    		jne		prox5
   881 000007CD C706[E900]3800          		mov 	word [venceu], 0x0038
   882 000007D3 E9DC00                  		jmp 	ganhou_x
   883                                  	prox5:
   884 000007D6 A1[E500]                		mov 	ax, word [cel_marcadas_x]
   885 000007D9 25C001                  		and 	ax, 0x01C0
   886 000007DC 3DC001                  		cmp		ax, 0x01C0
   887 000007DF 7509                    		jne		prox6
   888 000007E1 C706[E900]C001          		mov 	word [venceu], 0x01C0
   889 000007E7 E9C800                  		jmp 	ganhou_x
   890                                  	prox6:
   891 000007EA A1[E500]                		mov 	ax, word [cel_marcadas_x]
   892 000007ED 251101                  		and 	ax, 0x0111
   893 000007F0 3D1101                  		cmp		ax, 0x0111
   894 000007F3 7509                    		jne		prox7
   895 000007F5 C706[E900]1101          		mov 	word [venceu], 0x0111
   896 000007FB E9B400                  		jmp 	ganhou_x
   897                                  	prox7:
   898 000007FE A1[E500]                		mov 	ax, word [cel_marcadas_x]
   899 00000801 255400                  		and 	ax, 0x0054
   900 00000804 3D5400                  		cmp		ax, 0x0054
   901 00000807 7509                    		jne		prox8
   902 00000809 C706[E900]5400          		mov 	word [venceu], 0x0054
   903 0000080F E9A000                  		jmp 	ganhou_x
   904                                  	prox8:
   905 00000812 A1[E700]                		mov 	ax, word [cel_marcadas_c]
   906 00000815 254900                  		and 	ax, 0x0049
   907 00000818 3D4900                  		cmp		ax, 0x0049
   908 0000081B 7509                    		jne		prox9
   909 0000081D C706[E900]4900          		mov 	word [venceu], 0x0049
   910 00000823 E99500                  		jmp 	ganhou_c
   911                                  	prox9:
   912 00000826 A1[E700]                		mov 	ax, word [cel_marcadas_c]
   913 00000829 259200                  		and 	ax, 0x0092
   914 0000082C 3D9200                  		cmp		ax, 0x0092
   915 0000082F 7509                    		jne		prox10
   916 00000831 C706[E900]9200          		mov 	word [venceu], 0x0092
   917 00000837 E98100                  		jmp 	ganhou_c
   918                                  	prox10:
   919 0000083A A1[E700]                		mov 	ax, word [cel_marcadas_c]
   920 0000083D 252401                  		and 	ax, 0x0124
   921 00000840 3D2401                  		cmp		ax, 0x0124
   922 00000843 7509                    		jne		prox11
   923 00000845 C706[E900]2401          		mov 	word [venceu], 0x0124
   924 0000084B E96D00                  		jmp 	ganhou_c
   925                                  	prox11:
   926 0000084E A1[E700]                		mov 	ax, word [cel_marcadas_c]
   927 00000851 250700                  		and 	ax, 0x0007
   928 00000854 3D0700                  		cmp		ax, 0x0007
   929 00000857 7509                    		jne		prox12
   930 00000859 C706[E900]0700          		mov 	word [venceu], 0x0007
   931 0000085F E95900                  		jmp 	ganhou_c
   932                                  	prox12:
   933 00000862 A1[E700]                		mov 	ax, word [cel_marcadas_c]
   934 00000865 253800                  		and 	ax, 0x0038
   935 00000868 3D3800                  		cmp		ax, 0x0038
   936 0000086B 7509                    		jne		prox13
   937 0000086D C706[E900]3800          		mov 	word [venceu], 0x0038
   938 00000873 E94500                  		jmp 	ganhou_c
   939                                  	prox13:
   940 00000876 A1[E700]                		mov 	ax, word [cel_marcadas_c]
   941 00000879 25C001                  		and 	ax, 0x01C0
   942 0000087C 3DC001                  		cmp		ax, 0x01C0
   943 0000087F 7509                    		jne		prox14
   944 00000881 C706[E900]C001          		mov 	word [venceu], 0x01C0
   945 00000887 E93100                  		jmp 	ganhou_c
   946                                  	prox14:
   947 0000088A A1[E700]                		mov 	ax, word [cel_marcadas_c]
   948 0000088D 251101                  		and 	ax, 0x0111
   949 00000890 3D1101                  		cmp		ax, 0x0111
   950 00000893 7509                    		jne		prox15
   951 00000895 C706[E900]1101          		mov 	word [venceu], 0x0111
   952 0000089B E91D00                  		jmp 	ganhou_c
   953                                  	prox15:
   954 0000089E A1[E700]                		mov 	ax, word [cel_marcadas_c]
   955 000008A1 255400                  		and 	ax, 0x0054
   956 000008A4 3D5400                  		cmp		ax, 0x0054
   957 000008A7 751B                    		jne		n_ganhou
   958 000008A9 C706[E900]5400          		mov 	word [venceu], 0x0054
   959 000008AF E90900                  		jmp 	ganhou_c
   960                                  	ganhou_x:
   961 000008B2 E81000                  		call 	marca_ganhador
   962 000008B5 C606[EB00]01            		mov 	byte [resultado], 1
   963 000008BA C3                      		ret
   964                                  	ganhou_c:
   965 000008BB E80700                  		call 	marca_ganhador
   966 000008BE C606[EB00]02            		mov 	byte [resultado], 2
   967 000008C3 C3                      		ret
   968                                  	n_ganhou:
   969 000008C4 C3                      		ret
   970                                  
   971                                  ; 11-21-31 = 001001001 = 0x0049 
   972                                  ; 12-22-32 = 010010010 = 0x0092	
   973                                  ; 13-23-33 = 100100100 = 0x0124
   974                                  ; 11-12-13 = 000000111 = 0x0007
   975                                  ; 21-22-23 = 000111000 = 0x0038
   976                                  ; 31-32-33 = 111000000 = 0x01C0
   977                                  ; 11-22-33 = 100010001 = 0x0111
   978                                  ; 13-22-31 = 001010100 = 0x0054
   979                                  marca_ganhador: ; 11-21-31 = 001001001 = 0x0049
   980 000008C5 C606[2200]02            		mov		byte[cor],verde
   981 000008CA 813E[E900]4900          		cmp 	word [venceu], 0x0049
   982 000008D0 7516                    		jne		next1
   983                                  		;[190,60]->[190,450] -> VERTICAL
   984 000008D2 B8BE00                  		mov		ax,190
   985 000008D5 50                      		push	ax
   986 000008D6 B83C00                  		mov		ax,60
   987 000008D9 50                      		push	ax
   988 000008DA B8BE00                  		mov		ax,190
   989 000008DD 50                      		push	ax
   990 000008DE B8C201                  		mov		ax,450
   991 000008E1 50                      		push	ax
   992 000008E2 E80104                  		call	line
   993 000008E5 E9C700                  		jmp 	fim_marca_ganhador
   994                                  	next1:		; 12-22-32 = 010010010 = 0x0092
   995 000008E8 813E[E900]9200          		cmp 	word [venceu], 0x0092
   996 000008EE 7516                    		jne		next2
   997                                  		;[320,60]->[320,450] -> VERTICAL
   998 000008F0 B84001                  		mov		ax,320
   999 000008F3 50                      		push	ax
  1000 000008F4 B83C00                  		mov		ax,60
  1001 000008F7 50                      		push	ax
  1002 000008F8 B84001                  		mov		ax,320
  1003 000008FB 50                      		push	ax
  1004 000008FC B8C201                  		mov		ax,450
  1005 000008FF 50                      		push	ax
  1006 00000900 E8E303                  		call	line
  1007 00000903 E9A900                  		jmp 	fim_marca_ganhador
  1008                                  	next2:		; 13-23-33 = 100100100 = 0x0124
  1009 00000906 813E[E900]2401          		cmp 	word [venceu], 0x0124
  1010 0000090C 7516                    		jne		next3
  1011                                  		;[450,60]->[450,450] -> VERTICAL
  1012 0000090E B8C201                  		mov		ax,450
  1013 00000911 50                      		push	ax
  1014 00000912 B83C00                  		mov		ax,60
  1015 00000915 50                      		push	ax
  1016 00000916 B8C201                  		mov		ax,450
  1017 00000919 50                      		push	ax
  1018 0000091A B8C201                  		mov		ax,450
  1019 0000091D 50                      		push	ax
  1020 0000091E E8C503                  		call	line
  1021 00000921 E98B00                  		jmp 	fim_marca_ganhador
  1022                                  	next3:		; 11-12-13 = 000000111 = 0x0007
  1023 00000924 813E[E900]0700          		cmp 	word [venceu], 0x0007
  1024 0000092A 7516                    		jne		next4
  1025                                  		;[125,385]->[515,385] -> HORIZONTAL
  1026 0000092C B87D00                  		mov		ax,125
  1027 0000092F 50                      		push	ax
  1028 00000930 B88101                  		mov		ax,385
  1029 00000933 50                      		push	ax
  1030 00000934 B80302                  		mov		ax,515
  1031 00000937 50                      		push	ax
  1032 00000938 B88101                  		mov		ax,385
  1033 0000093B 50                      		push	ax
  1034 0000093C E8A703                  		call	line
  1035 0000093F E96D00                  		jmp 	fim_marca_ganhador
  1036                                  	next4:		; 21-22-23 = 000111000 = 0x0038
  1037 00000942 813E[E900]3800          		cmp 	word [venceu], 0x0038
  1038 00000948 7516                    		jne		next5
  1039                                  		;[125,255]->[515,255] -> HORIZONTAL
  1040 0000094A B87D00                  		mov		ax,125
  1041 0000094D 50                      		push	ax
  1042 0000094E B8FF00                  		mov		ax,255
  1043 00000951 50                      		push	ax
  1044 00000952 B80302                  		mov		ax,515
  1045 00000955 50                      		push	ax
  1046 00000956 B8FF00                  		mov		ax,255
  1047 00000959 50                      		push	ax
  1048 0000095A E88903                  		call	line
  1049 0000095D E94F00                  		jmp 	fim_marca_ganhador
  1050                                  	next5:		; 31-32-33 = 111000000 = 0x01C0
  1051 00000960 813E[E900]C001          		cmp 	word [venceu], 0x01C0
  1052 00000966 7516                    		jne		next6
  1053                                  		;[125,125]->[515,125] -> HORIZONTAL
  1054 00000968 B87D00                  		mov		ax,125
  1055 0000096B 50                      		push	ax
  1056 0000096C B87D00                  		mov		ax,125
  1057 0000096F 50                      		push	ax
  1058 00000970 B80302                  		mov		ax,515
  1059 00000973 50                      		push	ax
  1060 00000974 B87D00                  		mov		ax,125
  1061 00000977 50                      		push	ax
  1062 00000978 E86B03                  		call	line
  1063 0000097B E93100                  		jmp 	fim_marca_ganhador
  1064                                  	next6:		; 11-22-33 = 100010001 = 0x0111
  1065 0000097E 813E[E900]1101          		cmp 	word [venceu], 0x0111
  1066 00000984 7516                    		jne		next7
  1067                                  		;[125,450]->[515,60] -> DIAGONAL
  1068 00000986 B87D00                  		mov		ax,125
  1069 00000989 50                      		push	ax
  1070 0000098A B8C201                  		mov		ax,450
  1071 0000098D 50                      		push	ax
  1072 0000098E B80302                  		mov		ax,515
  1073 00000991 50                      		push	ax
  1074 00000992 B83C00                  		mov		ax,60
  1075 00000995 50                      		push	ax
  1076 00000996 E84D03                  		call	line
  1077 00000999 E91300                  		jmp 	fim_marca_ganhador
  1078                                  	next7:		; 13-22-31 = 001010100 = 0x0054
  1079                                  		;[515,450]->[125,60] -> DIAGONAL
  1080 0000099C B80302                  		mov		ax,515
  1081 0000099F 50                      		push	ax
  1082 000009A0 B8C201                  		mov		ax,450
  1083 000009A3 50                      		push	ax
  1084 000009A4 B87D00                  		mov		ax,125
  1085 000009A7 50                      		push	ax
  1086 000009A8 B83C00                  		mov		ax,60
  1087 000009AB 50                      		push	ax
  1088 000009AC E83703                  		call	line
  1089                                  	fim_marca_ganhador:
  1090 000009AF C3                      		ret
  1091                                  
  1092                                  imprime_ultima_jog:
  1093 000009B0 9C                      		pushf      
  1094 000009B1 50                      		push 	ax
  1095 000009B2 52                      		push	dx
  1096 000009B3 C606[2200]07            		mov		byte[cor],branco
  1097 000009B8 B61B                    		mov 	dh, 27
  1098 000009BA B214                    		mov		dl, 20
  1099 000009BC E8ED01                  		call	cursor
  1100                                  
  1101 000009BF 803E[1300]2E            		cmp 	byte [comando+1], make_c	; verifica se é C
  1102 000009C4 7505                    		jne 	entao_x						; se não, é X
  1103 000009C6 B043                    		mov 	al,	'C' 					; se sim, coloca a string C em al
  1104 000009C8 E90200                  		jmp 	printa_x_c
  1105                                  	entao_x:
  1106 000009CB B058                    		mov 	al, 'X'						; coloca a string X em al
  1107                                  	printa_x_c:
  1108 000009CD E8F301                  		call 	caracter					; printa X ou C
  1109 000009D0 FEC2                    		inc 	dl							; proxima coluna
  1110 000009D2 E8D701                  		call	cursor
  1111                                  
  1112 000009D5 803E[1600]02            		cmp 	byte [comando+4], make_1	; verifica se é linha 1
  1113 000009DA 7505                    		jne 	check_l2
  1114 000009DC B031                    		mov 	al,	'1' 					; se sim, coloca a string 1 em al
  1115 000009DE E90E00                  		jmp 	printa_l
  1116                                  	check_l2:
  1117 000009E1 803E[1600]03            		cmp 	byte [comando+4], make_2	; verifica se é linha 2
  1118 000009E6 7505                    		jne 	entao_l3
  1119 000009E8 B032                    		mov 	al,	'2' 					; se sim, coloca a string 2 em al
  1120 000009EA E90200                  		jmp 	printa_l
  1121                                  	entao_l3:
  1122 000009ED B033                    		mov 	al,	'3' 					; se não, coloca a string 3 em al
  1123                                  	printa_l:
  1124 000009EF E8D101                  		call 	caracter					; printa 1 2 ou 3
  1125 000009F2 FEC2                    		inc 	dl							; proxima coluna
  1126 000009F4 E8B501                  		call	cursor
  1127                                  		
  1128 000009F7 803E[1800]02            		cmp 	byte [comando+6], make_1	; verifica se é coluna 1
  1129 000009FC 7505                    		jne 	check_c2
  1130 000009FE B031                    		mov 	al,	'1' 					; se sim, coloca a string 1 em al
  1131 00000A00 E90E00                  		jmp 	printa_c
  1132                                  	check_c2:
  1133 00000A03 803E[1800]03            		cmp 	byte [comando+6], make_2	; verifica se é coluna 2
  1134 00000A08 7505                    		jne 	entao_c3
  1135 00000A0A B032                    		mov 	al,	'2' 					; se sim, coloca a string 2 em al
  1136 00000A0C E90200                  		jmp 	printa_c
  1137                                  	entao_c3:
  1138 00000A0F B033                    		mov 	al,	'3' 					; se não, coloca a string 3 em al
  1139                                  	printa_c:
  1140 00000A11 E8AF01                  		call 	caracter						; printa 1 2 ou 3
  1141                                  
  1142 00000A14 5A                      		pop 	dx
  1143 00000A15 58                      		pop		ax
  1144 00000A16 9D                      		popf
  1145 00000A17 C3                      		ret
  1146                                  
  1147                                  imprime_jogada_inv:
  1148 00000A18 9C                      		pushf      
  1149 00000A19 50                      		push 	ax
  1150 00000A1A 53                      		push 	bx
  1151 00000A1B 51                      		push	cx
  1152 00000A1C 52                      		push	dx
  1153                                  
  1154 00000A1D B90F00                  		mov     cx,15					;número de caracteres
  1155 00000A20 BB0000                  		mov     bx,0
  1156 00000A23 B61D                    		mov     dh,29					;linha 0-29
  1157 00000A25 B215                    		mov     dl,21					;coluna 0-79
  1158 00000A27 C606[2200]07            		mov		byte[cor],branco
  1159                                  	l_joginv:
  1160 00000A2C E87D01                  		call	cursor
  1161 00000A2F 8A87[7E00]              		mov     al,[bx+msg_jog_inv]
  1162 00000A33 E88D01                  		call	caracter
  1163 00000A36 43                      		inc     bx						;proximo caracter
  1164 00000A37 FEC2                    		inc		dl						;avanca a coluna
  1165 00000A39 E2F1                    		loop    l_joginv
  1166                                  
  1167 00000A3B 5A                      		pop		dx
  1168 00000A3C 59                      		pop		cx
  1169 00000A3D 5B                      		pop		bx
  1170 00000A3E 58                      		pop		ax
  1171 00000A3F 9D                      		popf
  1172 00000A40 C3                      		ret
  1173                                  
  1174                                  imprime_comando_inv:
  1175 00000A41 9C                      		pushf               	
  1176 00000A42 50                      		push 	ax
  1177 00000A43 53                      		push 	bx
  1178 00000A44 51                      		push	cx
  1179 00000A45 52                      		push	dx
  1180                                  
  1181 00000A46 B91000                  		mov     cx,16					;número de caracteres
  1182 00000A49 BB0000                  		mov     bx,0
  1183 00000A4C B61D                    		mov     dh,29					;linha 0-29
  1184 00000A4E B215                    		mov     dl,21					;coluna 0-79
  1185 00000A50 C606[2200]07            		mov		byte[cor],branco
  1186                                  	l_cominv:
  1187 00000A55 E85401                  		call	cursor
  1188 00000A58 8A87[6E00]              		mov     al,[bx+msg_com_inv]
  1189 00000A5C E86401                  		call	caracter
  1190 00000A5F 43                      		inc     bx						;proximo caracter
  1191 00000A60 FEC2                    		inc		dl						;avanca a coluna
  1192 00000A62 E2F1                    		loop    l_cominv
  1193                                  		
  1194 00000A64 5A                      		pop		dx
  1195 00000A65 59                      		pop		cx
  1196 00000A66 5B                      		pop		bx
  1197 00000A67 58                      		pop		ax
  1198 00000A68 9D                      		popf
  1199 00000A69 C3                      		ret
  1200                                  
  1201                                  imprime_x_venceu:
  1202 00000A6A 9C                      		pushf               	
  1203 00000A6B 50                      		push 	ax
  1204 00000A6C 53                      		push 	bx
  1205 00000A6D 51                      		push	cx
  1206 00000A6E 52                      		push	dx
  1207                                  
  1208 00000A6F B90900                  		mov     cx,9							;número de caracteres
  1209 00000A72 BB0000                  		mov     bx,0
  1210 00000A75 B61D                    		mov     dh,29							;linha 0-29
  1211 00000A77 B215                    		mov     dl,21							;coluna 0-79
  1212 00000A79 C606[2200]07            		mov		byte[cor],branco
  1213                                  	l_xvenc:
  1214 00000A7E E82B01                  		call	cursor
  1215 00000A81 8A87[9000]              		mov     al,[bx+msg_x_venceu]
  1216 00000A85 E83B01                  		call	caracter
  1217 00000A88 43                      		inc     bx								;proximo caracter
  1218 00000A89 FEC2                    		inc		dl								;avanca a coluna
  1219 00000A8B E2F1                    		loop    l_xvenc
  1220                                  
  1221 00000A8D 5A                      		pop		dx
  1222 00000A8E 59                      		pop		cx
  1223 00000A8F 5B                      		pop		bx
  1224 00000A90 58                      		pop		ax
  1225 00000A91 9D                      		popf
  1226 00000A92 C3                      		ret
  1227                                  
  1228                                  imprime_c_venceu:
  1229 00000A93 9C                      		pushf               	
  1230 00000A94 50                      		push 	ax
  1231 00000A95 53                      		push 	bx
  1232 00000A96 51                      		push	cx
  1233 00000A97 52                      		push	dx
  1234                                  
  1235 00000A98 B90900                  		mov     cx,9							;número de caracteres
  1236 00000A9B BB0000                  		mov     bx,0
  1237 00000A9E B61D                    		mov     dh,29							;linha 0-29
  1238 00000AA0 B215                    		mov     dl,21							;coluna 0-79
  1239 00000AA2 C606[2200]07            		mov		byte[cor],branco
  1240                                  	l_cvenc:
  1241 00000AA7 E80201                  		call	cursor
  1242 00000AAA 8A87[9900]              		mov     al,[bx+msg_c_venceu]
  1243 00000AAE E81201                  		call	caracter
  1244 00000AB1 43                      		inc     bx								;proximo caracter
  1245 00000AB2 FEC2                    		inc		dl								;avanca a coluna
  1246 00000AB4 E2F1                    		loop    l_cvenc
  1247                                  
  1248 00000AB6 5A                      		pop		dx
  1249 00000AB7 59                      		pop		cx
  1250 00000AB8 5B                      		pop		bx
  1251 00000AB9 58                      		pop		ax
  1252 00000ABA 9D                      		popf
  1253 00000ABB C3                      		ret
  1254                                  
  1255                                  imprime_empatou:
  1256 00000ABC 9C                      		pushf               	
  1257 00000ABD 50                      		push 	ax
  1258 00000ABE 53                      		push 	bx
  1259 00000ABF 51                      		push	cx
  1260 00000AC0 52                      		push	dx
  1261                                  
  1262 00000AC1 B90800                  		mov     cx,8							;número de caracteres
  1263 00000AC4 BB0000                  		mov     bx,0
  1264 00000AC7 B61D                    		mov     dh,29							;linha 0-29
  1265 00000AC9 B215                    		mov     dl,21							;coluna 0-79
  1266 00000ACB C606[2200]07            		mov		byte[cor],branco
  1267                                  	l_empatou:
  1268 00000AD0 E8D900                  		call	cursor
  1269 00000AD3 8A87[A200]              		mov     al,[bx+msg_empatou]
  1270 00000AD7 E8E900                  		call	caracter
  1271 00000ADA 43                      		inc     bx								;proximo caracter
  1272 00000ADB FEC2                    		inc		dl								;avanca a coluna
  1273 00000ADD E2F1                    		loop    l_empatou
  1274                                  
  1275 00000ADF 5A                      		pop		dx
  1276 00000AE0 59                      		pop		cx
  1277 00000AE1 5B                      		pop		bx
  1278 00000AE2 58                      		pop		ax
  1279 00000AE3 9D                      		popf
  1280 00000AE4 C3                      		ret
  1281                                  
  1282                                  imprime_msg_apos_fim_jogo:
  1283 00000AE5 9C                      		pushf               	
  1284 00000AE6 50                      		push 	ax
  1285 00000AE7 53                      		push 	bx
  1286 00000AE8 51                      		push	cx
  1287 00000AE9 52                      		push	dx
  1288                                  
  1289 00000AEA B93600                  		mov     cx,54							;número de caracteres
  1290 00000AED BB0000                  		mov     bx,0
  1291 00000AF0 B61D                    		mov     dh,29							;linha 0-29
  1292 00000AF2 B215                    		mov     dl,21							;coluna 0-79
  1293 00000AF4 C606[2200]07            		mov		byte[cor],branco
  1294                                  	l_fimjogo:
  1295 00000AF9 E8B000                  		call	cursor
  1296 00000AFC 8A87[AA00]              		mov     al,[bx+msg_fim_jogo]
  1297 00000B00 E8C000                  		call	caracter
  1298 00000B03 43                      		inc     bx								;proximo caracter
  1299 00000B04 FEC2                    		inc		dl								;avanca a coluna
  1300 00000B06 E2F1                    		loop    l_fimjogo
  1301                                  
  1302 00000B08 5A                      		pop		dx
  1303 00000B09 59                      		pop		cx
  1304 00000B0A 5B                      		pop		bx
  1305 00000B0B 58                      		pop		ax
  1306 00000B0C 9D                      		popf
  1307 00000B0D C3                      		ret
  1308                                  
  1309                                  limpa_campo_com:
  1310 00000B0E 9C                      		pushf               	
  1311 00000B0F 50                      		push 	ax
  1312 00000B10 53                      		push 	bx
  1313 00000B11 51                      		push	cx
  1314 00000B12 52                      		push	dx
  1315                                  
  1316 00000B13 B90300                  		mov     cx,3							;número de caracteres
  1317 00000B16 BB0000                  		mov     bx,0
  1318 00000B19 B61B                    		mov     dh,27							;linha 0-29
  1319 00000B1B B214                    		mov     dl,20							;coluna 0-79
  1320 00000B1D C606[2200]00            		mov		byte[cor],preto
  1321                                  	l_limpacom:
  1322 00000B22 E88700                  		call	cursor
  1323 00000B25 8A87[8D00]              		mov     al,[bx+msg_limpa_com]
  1324 00000B29 E89700                  		call	caracter
  1325 00000B2C 43                      		inc     bx								;proximo caracter
  1326 00000B2D FEC2                    		inc		dl								;avanca a coluna
  1327 00000B2F E2F1                    		loop    l_limpacom
  1328                                  
  1329 00000B31 5A                      		pop		dx
  1330 00000B32 59                      		pop		cx
  1331 00000B33 5B                      		pop		bx
  1332 00000B34 58                      		pop		ax
  1333 00000B35 9D                      		popf
  1334 00000B36 C3                      		ret
  1335                                  
  1336                                  limpa_campo_msg:
  1337 00000B37 9C                      		pushf               	
  1338 00000B38 50                      		push 	ax
  1339 00000B39 53                      		push 	bx
  1340 00000B3A 51                      		push	cx
  1341 00000B3B 52                      		push	dx
  1342                                  
  1343 00000B3C B93600                  		mov     cx,54							;número de caracteres
  1344 00000B3F BB0000                  		mov     bx,0
  1345 00000B42 B61D                    		mov     dh,29							;linha 0-29
  1346 00000B44 B215                    		mov     dl,21							;coluna 0-79
  1347 00000B46 C606[2200]00            		mov		byte[cor],preto
  1348                                  	l_limpamsg:
  1349 00000B4B E85E00                  		call	cursor
  1350 00000B4E 8A87[AA00]              		mov     al,[bx+msg_fim_jogo]
  1351 00000B52 E86E00                  		call	caracter
  1352 00000B55 43                      		inc     bx								;proximo caracter
  1353 00000B56 FEC2                    		inc		dl								;avanca a coluna
  1354 00000B58 E2F1                    		loop    l_limpamsg
  1355                                  
  1356 00000B5A 5A                      		pop		dx
  1357 00000B5B 59                      		pop		cx
  1358 00000B5C 5B                      		pop		bx
  1359 00000B5D 58                      		pop		ax
  1360 00000B5E 9D                      		popf
  1361 00000B5F C3                      		ret
  1362                                  ;***************************************************************************
  1363                                  ;
  1364                                  ;   função desenha_x
  1365                                  ;	lado estático de 'lado'px == 55 px
  1366                                  ;
  1367                                  ; push xc; push yc; call desenha_x;  (xc+l<639,yc+l<479)e(xc-l>0,yc-l>0)
  1368                                  ; cor definida na variavel cor
  1369                                  desenha_x:
  1370 00000B60 55                      	push 	bp
  1371 00000B61 89E5                    	mov	 	bp,sp
  1372 00000B63 9C                      	pushf               	;coloca os flags na pilha
  1373 00000B64 50                      	push 	ax
  1374 00000B65 53                      	push 	bx
  1375 00000B66 51                      	push	cx
  1376 00000B67 52                      	push	dx
  1377 00000B68 56                      	push	si
  1378 00000B69 57                      	push	di
  1379                                  	
  1380 00000B6A 8B4608                  	mov		ax,[bp+8]   	; resgata xc
  1381 00000B6D 8B5E06                  	mov		bx,[bp+6]    	; resgata yc
  1382 00000B70 8B4E04                  	mov		cx,[bp+4]		; resgata l
  1383                                  	
  1384                                  	;desenha primeira diagonal
  1385 00000B73 89C2                    	mov 	dx,ax			
  1386 00000B75 29CA                    	sub		dx,cx	; Ponto inferior esquerdo
  1387 00000B77 52                      	push	dx
  1388 00000B78 89DA                    	mov 	dx,bx
  1389 00000B7A 29CA                    	sub		dx,cx
  1390 00000B7C 52                      	push    dx
  1391                                  
  1392 00000B7D 89C2                    	mov 	dx,ax
  1393 00000B7F 01CA                    	add		dx,cx	; Ponto superior direito
  1394 00000B81 52                      	push	dx
  1395 00000B82 89DA                    	mov 	dx,bx
  1396 00000B84 01CA                    	add		dx,cx
  1397 00000B86 52                      	push    dx
  1398                                  
  1399 00000B87 E85C01                  	call line
  1400                                  
  1401                                  	;desenha segunda diagonal
  1402 00000B8A 89C2                    	mov 	dx,ax			
  1403 00000B8C 01CA                    	add		dx,cx	; Ponto inferior direito
  1404 00000B8E 52                      	push	dx
  1405 00000B8F 89DA                    	mov 	dx,bx
  1406 00000B91 29CA                    	sub		dx,cx
  1407 00000B93 52                      	push    dx
  1408                                  
  1409 00000B94 89C2                    	mov 	dx,ax
  1410 00000B96 29CA                    	sub		dx,cx	; Ponto superior esquerdo
  1411 00000B98 52                      	push	dx
  1412 00000B99 89DA                    	mov 	dx,bx
  1413 00000B9B 01CA                    	add		dx,cx
  1414 00000B9D 52                      	push    dx
  1415                                  
  1416 00000B9E E84501                  	call line
  1417                                  
  1418 00000BA1 5F                      	pop		di
  1419 00000BA2 5E                      	pop		si
  1420 00000BA3 5A                      	pop		dx
  1421 00000BA4 59                      	pop		cx
  1422 00000BA5 5B                      	pop		bx
  1423 00000BA6 58                      	pop		ax
  1424 00000BA7 9D                      	popf
  1425 00000BA8 5D                      	pop		bp
  1426 00000BA9 C20600                  	ret		6
  1427                                  
  1428                                  
  1429                                  ;***************************************************************************
  1430                                  ;
  1431                                  ;   função cursor
  1432                                  ;
  1433                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
  1434                                  cursor:
  1435 00000BAC 9C                      	pushf
  1436 00000BAD 50                      	push 	ax
  1437 00000BAE 53                      	push 	bx
  1438 00000BAF 51                      	push	cx
  1439 00000BB0 52                      	push	dx
  1440 00000BB1 56                      	push	si
  1441 00000BB2 57                      	push	di
  1442 00000BB3 55                      	push	bp
  1443 00000BB4 B402                    	mov     ah,2
  1444 00000BB6 B700                    	mov     bh,0
  1445 00000BB8 CD10                    	int     10h
  1446 00000BBA 5D                      	pop		bp
  1447 00000BBB 5F                      	pop		di
  1448 00000BBC 5E                      	pop		si
  1449 00000BBD 5A                      	pop		dx
  1450 00000BBE 59                      	pop		cx
  1451 00000BBF 5B                      	pop		bx
  1452 00000BC0 58                      	pop		ax
  1453 00000BC1 9D                      	popf
  1454 00000BC2 C3                      	ret
  1455                                  
  1456                                  
  1457                                  ;_____________________________________________________________________________
  1458                                  ;
  1459                                  ; função caracter escrito na posisão do cursor
  1460                                  ;
  1461                                  ; al= caracter a ser escrito
  1462                                  ; cor definida na variavel cor
  1463                                  caracter:
  1464 00000BC3 9C                      	pushf
  1465 00000BC4 50                      	push 	ax
  1466 00000BC5 53                      	push 	bx
  1467 00000BC6 51                      	push	cx
  1468 00000BC7 52                      	push	dx
  1469 00000BC8 56                      	push	si
  1470 00000BC9 57                      	push	di
  1471 00000BCA 55                      	push	bp
  1472 00000BCB B409                    	mov     ah,9
  1473 00000BCD B700                    	mov     bh,0
  1474 00000BCF B90100                  	mov     cx,1
  1475 00000BD2 8A1E[2200]              	mov     bl,[cor]
  1476 00000BD6 CD10                    	int     10h
  1477 00000BD8 5D                      	pop		bp
  1478 00000BD9 5F                      	pop		di
  1479 00000BDA 5E                      	pop		si
  1480 00000BDB 5A                      	pop		dx
  1481 00000BDC 59                      	pop		cx
  1482 00000BDD 5B                      	pop		bx
  1483 00000BDE 58                      	pop		ax
  1484 00000BDF 9D                      	popf
  1485 00000BE0 C3                      	ret
  1486                                  
  1487                                  
  1488                                  ;_____________________________________________________________________________
  1489                                  ;
  1490                                  ;   função plot_xy
  1491                                  ;
  1492                                  ; push x; push y; call plot_xy;  (x<639, y<479)
  1493                                  ; cor definida na variavel cor
  1494                                  plot_xy:
  1495 00000BE1 55                      	push	bp
  1496 00000BE2 89E5                    	mov		bp,sp
  1497 00000BE4 9C                      	pushf
  1498 00000BE5 50                      	push 	ax
  1499 00000BE6 53                      	push 	bx
  1500 00000BE7 51                      	push	cx
  1501 00000BE8 52                      	push	dx
  1502 00000BE9 56                      	push	si
  1503 00000BEA 57                      	push	di
  1504 00000BEB B40C                    	mov    	ah,0ch
  1505 00000BED A0[2200]                	mov     al,[cor]
  1506 00000BF0 B700                    	mov     bh,0
  1507 00000BF2 BADF01                  	mov     dx,479
  1508 00000BF5 2B5604                  	sub		dx,[bp+4]
  1509 00000BF8 8B4E06                  	mov     cx,[bp+6]
  1510 00000BFB CD10                    	int     10h
  1511 00000BFD 5F                      	pop		di
  1512 00000BFE 5E                      	pop		si
  1513 00000BFF 5A                      	pop		dx
  1514 00000C00 59                      	pop		cx
  1515 00000C01 5B                      	pop		bx
  1516 00000C02 58                      	pop		ax
  1517 00000C03 9D                      	popf
  1518 00000C04 5D                      	pop		bp
  1519 00000C05 C20400                  	ret		4
  1520                                  
  1521                                  
  1522                                  ;_____________________________________________________________________________
  1523                                  ;    função circle
  1524                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1525                                  ; cor definida na variavel cor
  1526                                  circle:
  1527 00000C08 55                      	push 	bp
  1528 00000C09 89E5                    	mov	 	bp,sp
  1529 00000C0B 9C                      	pushf               	;coloca os flags na pilha
  1530 00000C0C 50                      	push 	ax
  1531 00000C0D 53                      	push 	bx
  1532 00000C0E 51                      	push	cx
  1533 00000C0F 52                      	push	dx
  1534 00000C10 56                      	push	si
  1535 00000C11 57                      	push	di
  1536                                  	
  1537 00000C12 8B4608                  	mov		ax,[bp+8]   	; resgata xc
  1538 00000C15 8B5E06                  	mov		bx,[bp+6]    	; resgata yc
  1539 00000C18 8B4E04                  	mov		cx,[bp+4]    	; resgata r
  1540                                  	
  1541 00000C1B 89DA                    	mov 	dx,bx	
  1542 00000C1D 01CA                    	add		dx,cx      		;ponto extremo superior
  1543 00000C1F 50                      	push    ax			
  1544 00000C20 52                      	push	dx
  1545 00000C21 E8BDFF                  	call 	plot_xy
  1546                                  	
  1547 00000C24 89DA                    	mov		dx,bx
  1548 00000C26 29CA                    	sub		dx,cx       	;ponto extremo inferior
  1549 00000C28 50                      	push    ax			
  1550 00000C29 52                      	push	dx
  1551 00000C2A E8B4FF                  	call 	plot_xy
  1552                                  	
  1553 00000C2D 89C2                    	mov 	dx,ax	
  1554 00000C2F 01CA                    	add		dx,cx       	;ponto extremo direita
  1555 00000C31 52                      	push    dx			
  1556 00000C32 53                      	push	bx
  1557 00000C33 E8ABFF                  	call 	plot_xy
  1558                                  	
  1559 00000C36 89C2                    	mov		dx,ax
  1560 00000C38 29CA                    	sub		dx,cx       	;ponto extremo esquerda
  1561 00000C3A 52                      	push    dx			
  1562 00000C3B 53                      	push	bx
  1563 00000C3C E8A2FF                  	call 	plot_xy
  1564                                  		
  1565 00000C3F 89CF                    	mov		di,cx
  1566 00000C41 81EF0100                	sub		di,1	 		;di=r-1
  1567 00000C45 BA0000                  	mov		dx,0  			;dx será a variável x. cx é a variavel y
  1568                                  	
  1569                                  ;aqui em cima a lógica foi invertida, 1-r => r-1
  1570                                  ;e as comparações passaram a ser jl => jg, assim garante 
  1571                                  ;valores positivos para d
  1572                                  
  1573                                  stay:						;loop
  1574 00000C48 89FE                    	mov		si,di
  1575 00000C4A 81FE0000                	cmp		si,0
  1576 00000C4E 7F0E                    	jg		inf      		;caso d for menor que 0, seleciona pixel superior (não  salta)
  1577 00000C50 89D6                    	mov		si,dx			;o jl é importante porque trata-se de conta com sinal
  1578 00000C52 D1E6                    	sal		si,1			;multiplica por doi (shift arithmetic left)
  1579 00000C54 81C60300                	add		si,3
  1580 00000C58 01F7                    	add		di,si    		;nesse ponto d=d+2*dx+3
  1581 00000C5A 42                      	inc		dx				;incrementa dx
  1582 00000C5B E90E00                  	jmp		plotar
  1583                                  inf:	
  1584 00000C5E 89D6                    	mov		si,dx
  1585 00000C60 29CE                    	sub		si,cx  			;faz x - y (dx-cx), e salva em di 
  1586 00000C62 D1E6                    	sal		si,1
  1587 00000C64 81C60500                	add		si,5
  1588 00000C68 01F7                    	add		di,si			;nesse ponto d=d+2*(dx-cx)+5
  1589 00000C6A 42                      	inc		dx				;incrementa x (dx)
  1590 00000C6B 49                      	dec		cx				;decrementa y (cx)
  1591                                  	
  1592                                  plotar:	
  1593 00000C6C 89D6                    	mov		si,dx
  1594 00000C6E 01C6                    	add		si,ax
  1595 00000C70 56                      	push    si				;coloca a abcisa x+xc na pilha
  1596 00000C71 89CE                    	mov		si,cx
  1597 00000C73 01DE                    	add		si,bx
  1598 00000C75 56                      	push    si				;coloca a ordenada y+yc na pilha
  1599 00000C76 E868FF                  	call 	plot_xy			;toma conta do segundo octante
  1600 00000C79 89C6                    	mov		si,ax
  1601 00000C7B 01D6                    	add		si,dx
  1602 00000C7D 56                      	push    si				;coloca a abcisa xc+x na pilha
  1603 00000C7E 89DE                    	mov		si,bx
  1604 00000C80 29CE                    	sub		si,cx
  1605 00000C82 56                      	push    si				;coloca a ordenada yc-y na pilha
  1606 00000C83 E85BFF                  	call 	plot_xy			;toma conta do sétimo octante
  1607 00000C86 89C6                    	mov		si,ax
  1608 00000C88 01CE                    	add		si,cx
  1609 00000C8A 56                      	push    si				;coloca a abcisa xc+y na pilha
  1610 00000C8B 89DE                    	mov		si,bx
  1611 00000C8D 01D6                    	add		si,dx
  1612 00000C8F 56                      	push    si				;coloca a ordenada yc+x na pilha
  1613 00000C90 E84EFF                  	call 	plot_xy			;toma conta do segundo octante
  1614 00000C93 89C6                    	mov		si,ax
  1615 00000C95 01CE                    	add		si,cx
  1616 00000C97 56                      	push    si				;coloca a abcisa xc+y na pilha
  1617 00000C98 89DE                    	mov		si,bx
  1618 00000C9A 29D6                    	sub		si,dx
  1619 00000C9C 56                      	push    si				;coloca a ordenada yc-x na pilha
  1620 00000C9D E841FF                  	call 	plot_xy			;toma conta do oitavo octante
  1621 00000CA0 89C6                    	mov		si,ax
  1622 00000CA2 29D6                    	sub		si,dx
  1623 00000CA4 56                      	push    si				;coloca a abcisa xc-x na pilha
  1624 00000CA5 89DE                    	mov		si,bx
  1625 00000CA7 01CE                    	add		si,cx
  1626 00000CA9 56                      	push    si				;coloca a ordenada yc+y na pilha
  1627 00000CAA E834FF                  	call 	plot_xy			;toma conta do terceiro octante
  1628 00000CAD 89C6                    	mov		si,ax
  1629 00000CAF 29D6                    	sub		si,dx
  1630 00000CB1 56                      	push    si				;coloca a abcisa xc-x na pilha
  1631 00000CB2 89DE                    	mov		si,bx
  1632 00000CB4 29CE                    	sub		si,cx
  1633 00000CB6 56                      	push    si				;coloca a ordenada yc-y na pilha
  1634 00000CB7 E827FF                  	call 	plot_xy			;toma conta do sexto octante
  1635 00000CBA 89C6                    	mov		si,ax
  1636 00000CBC 29CE                    	sub		si,cx
  1637 00000CBE 56                      	push    si				;coloca a abcisa xc-y na pilha
  1638 00000CBF 89DE                    	mov		si,bx
  1639 00000CC1 29D6                    	sub		si,dx
  1640 00000CC3 56                      	push    si				;coloca a ordenada yc-x na pilha
  1641 00000CC4 E81AFF                  	call 	plot_xy			;toma conta do quinto octante
  1642 00000CC7 89C6                    	mov		si,ax
  1643 00000CC9 29CE                    	sub		si,cx
  1644 00000CCB 56                      	push    si				;coloca a abcisa xc-y na pilha
  1645 00000CCC 89DE                    	mov		si,bx
  1646 00000CCE 01D6                    	add		si,dx
  1647 00000CD0 56                      	push    si				;coloca a ordenada yc-x na pilha
  1648 00000CD1 E80DFF                  	call 	plot_xy			;toma conta do quarto octante
  1649                                  	
  1650 00000CD4 39D1                    	cmp		cx,dx
  1651 00000CD6 7203                    	jb		fim_circle 		;se cx (y) está abaixo de dx (x), termina     
  1652 00000CD8 E96DFF                  	jmp		stay			;se cx (y) está acima de dx (x), continua no loop
  1653                                  	
  1654                                  	
  1655                                  fim_circle:
  1656 00000CDB 5F                      	pop		di
  1657 00000CDC 5E                      	pop		si
  1658 00000CDD 5A                      	pop		dx
  1659 00000CDE 59                      	pop		cx
  1660 00000CDF 5B                      	pop		bx
  1661 00000CE0 58                      	pop		ax
  1662 00000CE1 9D                      	popf
  1663 00000CE2 5D                      	pop		bp
  1664 00000CE3 C20600                  	ret		6
  1665                                  
  1666                                  
  1667                                  ;-----------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;   função line
  1670                                  ;
  1671                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1672                                  line:
  1673 00000CE6 55                      	push	bp
  1674 00000CE7 89E5                    	mov		bp,sp
  1675 00000CE9 9C                      	pushf              		;coloca os flags na pilha
  1676 00000CEA 50                      	push 	ax
  1677 00000CEB 53                      	push 	bx
  1678 00000CEC 51                      	push	cx
  1679 00000CED 52                      	push	dx
  1680 00000CEE 56                      	push	si
  1681 00000CEF 57                      	push	di
  1682 00000CF0 8B460A                  	mov		ax,[bp+10]   	; resgata os valores das coordenadas
  1683 00000CF3 8B5E08                  	mov		bx,[bp+8]    	; resgata os valores das coordenadas
  1684 00000CF6 8B4E06                  	mov		cx,[bp+6]    	; resgata os valores das coordenadas
  1685 00000CF9 8B5604                  	mov		dx,[bp+4]    	; resgata os valores das coordenadas
  1686 00000CFC 39C8                    	cmp		ax,cx
  1687 00000CFE 7408                    	je		line2
  1688 00000D00 721C                    	jb		line1
  1689 00000D02 91                      	xchg	ax,cx
  1690 00000D03 87DA                    	xchg	bx,dx
  1691 00000D05 E91600                  	jmp		line1
  1692                                  line2:						; deltax=0
  1693 00000D08 39D3                    	cmp		bx,dx  			;subtrai dx de bx
  1694 00000D0A 7202                    	jb		line3
  1695 00000D0C 87DA                    	xchg	bx,dx     		;troca os valores de bx e dx entre eles
  1696                                  line3:						; dx > bx
  1697 00000D0E 50                      	push	ax
  1698 00000D0F 53                      	push	bx
  1699 00000D10 E8CEFE                  	call 	plot_xy
  1700 00000D13 39D3                    	cmp		bx,dx
  1701 00000D15 7503                    	jne		line31
  1702 00000D17 E9C600                  	jmp		fim_line
  1703                                  line31:
  1704 00000D1A 43                      	inc		bx
  1705 00000D1B E9F0FF                  	jmp		line3
  1706                                  ;deltax <>0
  1707                                  line1:
  1708                                  ; comparar módulos de deltax e deltay sabendo que cx>ax
  1709                                  ; cx > ax
  1710 00000D1E 51                      	push	cx
  1711 00000D1F 29C1                    	sub		cx,ax
  1712 00000D21 890E[2800]              	mov		[deltax],cx
  1713 00000D25 59                      	pop		cx
  1714 00000D26 52                      	push	dx
  1715 00000D27 29DA                    	sub		dx,bx
  1716 00000D29 7702                    	ja		line32
  1717 00000D2B F7DA                    	neg		dx
  1718                                  line32:		
  1719 00000D2D 8916[2A00]              	mov		[deltay],dx
  1720 00000D31 5A                      	pop		dx
  1721                                  
  1722 00000D32 50                      	push	ax
  1723 00000D33 A1[2800]                	mov		ax,[deltax]
  1724 00000D36 3B06[2A00]              	cmp		ax,[deltay]
  1725 00000D3A 58                      	pop		ax
  1726 00000D3B 724D                    	jb		line5
  1727                                  
  1728                                  ; cx > ax e deltax>deltay
  1729 00000D3D 51                      	push	cx
  1730 00000D3E 29C1                    	sub		cx,ax
  1731 00000D40 890E[2800]              	mov		[deltax],cx
  1732 00000D44 59                      	pop		cx
  1733 00000D45 52                      	push	dx
  1734 00000D46 29DA                    	sub		dx,bx
  1735 00000D48 8916[2A00]              	mov		[deltay],dx
  1736 00000D4C 5A                      	pop		dx
  1737                                  
  1738 00000D4D 89C6                    	mov		si,ax
  1739                                  line4:
  1740 00000D4F 50                      	push	ax
  1741 00000D50 52                      	push	dx
  1742 00000D51 56                      	push	si
  1743 00000D52 29C6                    	sub		si,ax			;(x-x1)
  1744 00000D54 A1[2A00]                	mov		ax,[deltay]
  1745 00000D57 F7EE                    	imul	si
  1746 00000D59 8B36[2800]              	mov		si,[deltax]		;arredondar
  1747 00000D5D D1EE                    	shr		si,1
  1748                                  ; se numerador (DX)>0 soma se <0 subtrai
  1749 00000D5F 81FA0000                	cmp		dx,0
  1750 00000D63 7C09                    	jl		ar1
  1751 00000D65 01F0                    	add		ax,si
  1752 00000D67 81D20000                	adc		dx,0
  1753 00000D6B E90600                  	jmp		arc1
  1754                                  ar1:
  1755 00000D6E 29F0                    	sub		ax,si
  1756 00000D70 81DA0000                	sbb		dx,0
  1757                                  arc1:
  1758 00000D74 F73E[2800]              	idiv	word [deltax]
  1759 00000D78 01D8                    	add		ax,bx
  1760 00000D7A 5E                      	pop		si
  1761 00000D7B 56                      	push	si
  1762 00000D7C 50                      	push	ax
  1763 00000D7D E861FE                  	call	plot_xy
  1764 00000D80 5A                      	pop		dx
  1765 00000D81 58                      	pop		ax
  1766 00000D82 39CE                    	cmp		si,cx
  1767 00000D84 745A                    	je		fim_line
  1768 00000D86 46                      	inc		si
  1769 00000D87 E9C5FF                  	jmp		line4
  1770                                  
  1771                                  line5:	
  1772 00000D8A 39D3                    	cmp		bx,dx
  1773 00000D8C 7203                    	jb 		line7
  1774 00000D8E 91                      	xchg	ax,cx
  1775 00000D8F 87DA                    	xchg	bx,dx
  1776                                  line7:
  1777 00000D91 51                      	push	cx
  1778 00000D92 29C1                    	sub		cx,ax
  1779 00000D94 890E[2800]              	mov		[deltax],cx
  1780 00000D98 59                      	pop		cx
  1781 00000D99 52                      	push	dx
  1782 00000D9A 29DA                    	sub		dx,bx
  1783 00000D9C 8916[2A00]              	mov		[deltay],dx
  1784 00000DA0 5A                      	pop		dx
  1785 00000DA1 89DE                    	mov		si,bx
  1786                                  line6:
  1787 00000DA3 52                      	push	dx
  1788 00000DA4 56                      	push	si
  1789 00000DA5 50                      	push	ax
  1790 00000DA6 29DE                    	sub		si,bx			;(y-y1)
  1791 00000DA8 A1[2800]                	mov		ax,[deltax]
  1792 00000DAB F7EE                    	imul	si
  1793 00000DAD 8B36[2A00]              	mov		si,[deltay]		;arredondar
  1794 00000DB1 D1EE                    	shr		si,1
  1795                                  ; se numerador (DX)>0 soma se <0 subtrai
  1796 00000DB3 81FA0000                	cmp		dx,0
  1797 00000DB7 7C09                    	jl		ar2
  1798 00000DB9 01F0                    	add		ax,si
  1799 00000DBB 81D20000                	adc		dx,0
  1800 00000DBF E90600                  	jmp		arc2
  1801                                  ar2:
  1802 00000DC2 29F0                    	sub		ax,si
  1803 00000DC4 81DA0000                	sbb		dx,0
  1804                                  arc2:
  1805 00000DC8 F73E[2A00]              	idiv	word [deltay]
  1806 00000DCC 89C7                    	mov		di,ax
  1807 00000DCE 58                      	pop		ax
  1808 00000DCF 01C7                    	add		di,ax
  1809 00000DD1 5E                      	pop		si
  1810 00000DD2 57                      	push	di
  1811 00000DD3 56                      	push	si
  1812 00000DD4 E80AFE                  	call	plot_xy
  1813 00000DD7 5A                      	pop		dx
  1814 00000DD8 39D6                    	cmp		si,dx
  1815 00000DDA 7404                    	je		fim_line
  1816 00000DDC 46                      	inc		si
  1817 00000DDD E9C3FF                  	jmp		line6
  1818                                  
  1819                                  fim_line:
  1820 00000DE0 5F                      	pop		di
  1821 00000DE1 5E                      	pop		si
  1822 00000DE2 5A                      	pop		dx
  1823 00000DE3 59                      	pop		cx
  1824 00000DE4 5B                      	pop		bx
  1825 00000DE5 58                      	pop		ax
  1826 00000DE6 9D                      	popf
  1827 00000DE7 5D                      	pop		bp
  1828 00000DE8 C20800                  	ret		8
  1829                                  ;*******************************************************************
  1830                                  
  1831                                  
  1832                                  segment data
  1833                                  
  1834                                  	kb_data EQU 60h  			; PORTA DE LEITURA DE TECLADO
  1835                                  	kb_ctl  EQU 61h  			; PORTA DE RESET PARA PEDIR NOVA INTERRUPCAO
  1836                                  	pictrl  EQU 20h				; PORTA DO PIC DE TECLADO
  1837                                  	eoi     EQU 20h				; Byte de final de interrupção PIC - resgistrador
  1838                                  	INT9    EQU 9h				; Interrupção por hardware do teclado
  1839 00000000 0100                    	cs_dos  DW  1				; Variável de 2 bytes para armacenar o CS da INT 9
  1840 00000002 0100                    	offset_dos  DW 1			; Variável de 2 bytes para armacenar o IP da INT 9
  1841 00000004 <res 00000008>          	tecla   resb  8				; Variável de 8 bytes para armacenar a tecla presionada. Só precisa de 2 bytes!	 
  1842 0000000C 0000                    	p_i     dw  0   			; Indice p/ Interrupcao (Incrementa na ISR quando pressiona/solta qualquer tecla)  
  1843 0000000E 0000                    	p_t     dw  0   			; Indice p/ Interrupcao (Incrementa após retornar da ISR quando pressiona/solta qualquer tecla) 
  1844                                  
  1845 00000010 0000                    	i_atual_comando 	dw 0		; Índice atual do vetor de comando sendo digitado
  1846                                  	tam_max_vet_comando	equ 16
  1847 00000012 <res 00000010>          	comando 			resb tam_max_vet_comando		; Variável de 16 bytes para armazenar o comando sendo digitado
  1848                                  	make_c				equ 2Eh		; códigos Make/Break dos possíveis caracteres que compõem os comandos
  1849                                  	break_c				equ 0xAE
  1850                                  	make_s				equ 1Fh
  1851                                  	break_s				equ 9Fh
  1852                                  	make_x				equ 2Dh
  1853                                  	break_x				equ 0xAD
  1854                                  	make_1				equ 02h
  1855                                  	break_1				equ 82h
  1856                                  	make_2				equ 03h
  1857                                  	break_2				equ 83h
  1858                                  	make_3				equ 04h
  1859                                  	break_3				equ 84h
  1860                                  	make_enter			equ 1Ch
  1861                                  	break_enter			equ 9Ch
  1862                                  	make_backspace		equ 0Eh
  1863                                  	break_backspace		equ 8Eh
  1864                                  	make_shift			equ 2Ah
  1865                                  	break_shift			equ 0xAA
  1866                                  
  1867 00000022 0F                      	cor			db		branco_intenso
  1868                                  
  1869                                  	;	I R G B COR
  1870                                  	;	0 0 0 0 preto
  1871                                  	;	0 0 0 1 azul
  1872                                  	;	0 0 1 0 verde
  1873                                  	;	0 0 1 1 cyan
  1874                                  	;	0 1 0 0 vermelho
  1875                                  	;	0 1 0 1 magenta
  1876                                  	;	0 1 1 0 marrom
  1877                                  	;	0 1 1 1 branco
  1878                                  	;	1 0 0 0 cinza
  1879                                  	;	1 0 0 1 azul claro
  1880                                  	;	1 0 1 0 verde claro
  1881                                  	;	1 0 1 1 cyan claro
  1882                                  	;	1 1 0 0 rosa
  1883                                  	;	1 1 0 1 magenta claro
  1884                                  	;	1 1 1 0 amarelo
  1885                                  	;	1 1 1 1 branco intenso
  1886                                  
  1887                                  	preto			equ		0
  1888                                  	azul			equ		1
  1889                                  	verde			equ		2
  1890                                  	cyan			equ		3
  1891                                  	vermelho		equ		4
  1892                                  	magenta			equ		5
  1893                                  	marrom			equ		6
  1894                                  	branco			equ		7
  1895                                  	cinza			equ		8
  1896                                  	azul_claro		equ		9
  1897                                  	verde_claro		equ		10
  1898                                  	cyan_claro		equ		11
  1899                                  	rosa			equ		12
  1900                                  	magenta_claro	equ		13
  1901                                  	amarelo			equ		14
  1902                                  	branco_intenso	equ		15
  1903                                  
  1904                                  	raio			equ		45
  1905                                  	lado			equ		45
  1906                                  
  1907 00000023 00                      	modo_anterior	db		0
  1908 00000024 0000                    	linha   		dw  	0
  1909 00000026 0000                    	coluna  		dw  	0
  1910 00000028 0000                    	deltax			dw		0
  1911 0000002A 0000                    	deltay			dw		0	
  1912 0000002C 4A4F474F2044412056-     	titulo    		db  	'JOGO DA VELHA'
  1913 00000035 454C4841           
  1914 00000039 43616D706F20646520-     	campo_comando	db		'Campo de Comando:'
  1915 00000042 436F6D616E646F3A   
  1916 0000004A 43616D706F20646520-     	campo_mensagem	db		'Campo de Mensagem:'
  1917 00000053 4D656E736167656D3A 
  1918 0000005C 313132313331313232-     	celulas			db		'112131122232132333'
  1919 00000065 323332313332333333 
  1920 0000006E 436F6D616E646F2049-     	msg_com_inv		db		'Comando Invalido'
  1921 00000077 6E76616C69646F     
  1922 0000007E 4A6F6761646120496E-     	msg_jog_inv		db		'Jogada Invalida'
  1923 00000087 76616C696461       
  1924 0000008D 303030                  	msg_limpa_com	db		'000'
  1925 00000090 582056454E43455521      	msg_x_venceu	db		'X VENCEU!'
  1926 00000099 432056454E43455521      	msg_c_venceu	db		'C VENCEU!'
  1927 000000A2 454D5041544F5521        	msg_empatou		db		'EMPATOU!'
  1928 000000AA 446967697465207320-     	msg_fim_jogo	db		'Digite s + Enter para sair ou c + Enter para reiniciar' 
  1929 000000B3 2B20456E7465722070-
  1930 000000BC 617261207361697220-
  1931 000000C5 6F752063202B20456E-
  1932 000000CE 746572207061726120-
  1933 000000D7 7265696E6963696172 
  1934 000000E0 00                      	leitura_jog_val db		0						; Variável que indica se a jogada está no formato esperado ou se é comando inválido
  1935 000000E1 00                      	ultima_jog_val	db		0						; Variável que indica se a ultima jogada feita é válida
  1936 000000E2 00                      	ultima_jog_x_c 	db		0						; Variável que indica se a ultima jogada feita foi c ou x, guarda o make code
  1937 000000E3 0000                    	cel_marcadas	dw 		0						; Variável que indica quais celulas foram marcadas
  1938                                  													; bit0 = 11, bit1 = 12, bit3 = 13, bit4 = 21, ..., bit8 = 33
  1939 000000E5 0000                    	cel_marcadas_x	dw		0						; Variável que indica quais celulas foram marcadas com x
  1940 000000E7 0000                    	cel_marcadas_c	dw		0						; Variável que indica quais celulas foram marcadas com c	
  1941 000000E9 0000                    	venceu 			dw 		0 						; variável que indica se algum jogador venceu e como venceu (se = 0, nimguem venceu)
  1942                                  													; valor em hexa indica como venceu
  1943                                  													; 11-21-31 = 001001001 = 0x0049 
  1944                                  													; 12-22-32 = 010010010 = 0x0092	
  1945                                  													; 13-23-33 = 100100100 = 0x0124
  1946                                  													; 11-12-13 = 000000111 = 0x0007
  1947                                  													; 21-22-23 = 000111000 = 0x0038
  1948                                  													; 31-32-33 = 111000000 = 0x01C0
  1949                                  													; 11-22-33 = 100010001 = 0x0111
  1950                                  													; 13-22-31 = 001010100 = 0x0054
  1951 000000EB 00                      	resultado		db		0						; jogo n terminou = 0, ganhou x = 1, ganhou c = 2, empate = 3
  1952                                  ;*************************************************************************
  1953                                  segment stack stack
  1954 00000000 <res 00000200>              			resb 	512
  1955                                  stacktop:
