     1                                  ; Grupo: Gabriel Gatti e Thiago Lahass
     2                                  
     3                                  segment code
     4                                  ..start:
     5 00000000 B8[0000]                	mov 	ax,data
     6 00000003 8ED8                    	mov 	ds,ax
     7 00000005 B8[0000]                	mov 	ax,stack
     8 00000008 8ED0                    	mov 	ss,ax
     9 0000000A BC[0002]                	mov 	sp,stacktop
    10                                  
    11 0000000D FA                      	CLI											; Deshabilita INTerrupções por hardware - pin INTR NÃO atende INTerrupções externas	
    12 0000000E 31C0                    	XOR     AX, AX								; Limpa o registrador AX, é equivalente a fazer "MOV AX,0"
    13 00000010 8EC0                    	MOV     ES, AX								; Inicializa o registrador de Segmento Extra ES para acessar à região de vetores de INTerrupção (posição zero de memoria)
    14 00000012 26A12400                	MOV     AX, [ES:INT9*4]						; Carrega em AX o valor do IP do vector de INTerrupção 9 
    15 00000016 A3[0200]                	MOV     [offset_dos], AX    	        	; Salva na variável offset_dos o valor do IP do vector de INTerrupção 9
    16 00000019 26A12600                	MOV     AX, [ES:INT9*4+2]   	        	; Carrega em AX o valor do CS do vector de INTerrupção 9
    17 0000001D A3[0000]                	MOV     [cs_dos], AX						; Salva na variável cs_dos o valor do CS do vector de INTerrupção 9     
    18 00000020 268C0E2600              	MOV     [ES:INT9*4+2], CS					; Atualiza o valor do CS do vector de INTerrupção 9 com o CS do programa atual 
    19 00000025 26C7062400[7701]        	MOV     WORD [ES:INT9*4],keyINT         	; Atualiza o valor do IP do vector de INTerrupção 9 com o offset "keyINT" do programa atual
    20 0000002C FB                      	STI											; Habilita INTerrupções por hardware - pin INTR SIM atende INTerrupções externas
    21                                  
    22 0000002D E87501                  	call inicia_jogo
    23                                  
    24                                  ;leitura de comando
    25                                  L1:
    26 00000030 A1[0C00]                        MOV     AX,[p_i]	        			; loop - se não tem tecla pulsada, não faz nada! p_i só é atualizado (p_i = p_i + 1) na Rotina de Serviço de INTerrupção (ISR) "keyINT" 
    27 00000033 3B06[0E00]                      CMP     AX,[p_t]
    28 00000037 74F7                            JE      L1
    29 00000039 FF06[0E00]                      INC     word[p_t]						; p_t - se atualiza (p_t = p_t + 1) só se p_i foi atualizado, ou seja, se teve tecla pulsada
    30 0000003D 8126[0E00]0700                  AND     word[p_t],7				
    31 00000043 8B1E[0E00]                      MOV     BX,[p_t]						; Carrega em BX o valor de p_t
    32 00000047 31C0                            XOR     AX, AX
    33 00000049 8A87[0400]                      MOV     AL, [BX+tecla]					; Carrega em AL o valor da variável tecla (variável atualizada durante a ISR) mais o offset BX, AL <- [BX+tecla]  
    34                                  		
    35 0000004D 8B1E[1000]              		mov		bx, [i_atual_comando]			; carrega em bx o indice do vetor de comando
    36 00000051 8887[1200]              		mov 	[comando+bx], al				; transfere o valor make/break da tecla digitada
    37 00000055 FF06[1000]              		inc  	word [i_atual_comando]			; incrementa o indice
    38                                  
    39                                  		; verificações
    40 00000059 803E[1200]9C            		cmp 	byte [comando], break_enter		; se acabou de começar o jogo, lê o break do enter e limpa o vetor
    41 0000005E 7509                    		jne 	verifica_backspace
    42 00000060 C706[1000]0000          		mov 	word [i_atual_comando], 0		; índice volta para a primeira posição
    43 00000066 E9C7FF                  		jmp 	L1								; lê novamente
    44                                  	verifica_backspace:
    45 00000069 80BF[1200]8E            		cmp 	byte [comando+bx], break_backspace ; se não, verifica se digitou backspace
    46 0000006E 7518                    		jne 	verifica_tam_vetor				; se não, segue verificando
    47 00000070 81FB0300                		cmp 	bx, 3							; se sim, verifica se o tamanho atual do vetor é <= 4
    48 00000074 7F09                    		jg		sub4							
    49 00000076 C706[1000]0000          		mov 	word [i_atual_comando], 0		; se sim, limpa o vetor (make e break do backspace + possivelmente make e break de outra tecla)
    50 0000007C E9B1FF                  		jmp 	L1								
    51                                  	sub4:	
    52 0000007F 812E[1000]0400          		sub  	word [i_atual_comando], 4		; se não, subtrai o indice do vetor em 4
    53 00000085 E9A8FF                  		jmp 	L1								; volta a ler
    54                                  
    55                                  	verifica_tam_vetor:
    56 00000088 813E[1000]1000          		cmp		word [i_atual_comando], tam_max_vet_comando ; verifica se estourou o tamanho máximo do vetor
    57 0000008E 7506                    		jne		verifica_enter					; se não, segue verificando
    58 00000090 E82409                  		call 	imprime_comando_inv				; se sim, imprime comanda inválido e limpa o vetor
    59 00000093 E9AF00                  		jmp 	limpa_vetor
    60                                  
    61                                  	verifica_enter:
    62 00000096 80BF[1200]9C            		cmp 	byte [comando+bx], break_enter	; verifica se digitou Enter
    63 0000009B 7593                    		jne 	L1								; se não, continua lendo
    64                                  
    65 0000009D E80D0A                  		call 	limpa_campo_msg					; se apertou Enter limpa o campo de mensagem
    66 000000A0 E8E109                  		call 	limpa_campo_com					; se apertou Enter limpa o campo de comando
    67                                  
    68 000000A3 81FB0300                		cmp 	bx, 3							; se apertou 2 teclas -> verifica Enter + 'c' e Enter + 's'
    69 000000A7 7415                    		je	 	verifica_s_c
    70 000000A9 7F34                    		jg 		verifica_tamanho				; se apertou mais de 2 teclas -> verifica o tamanho do vetor
    71                                  		; se apertou somente Enter
    72 000000AB 803E[E900]00            		cmp 	byte [resultado], 0				; verifica se digitou apos fim do jogo
    73 000000B0 E8A809                  		call 	imprime_msg_apos_fim_jogo
    74 000000B3 E98F00                  		jmp 	limpa_vetor
    75 000000B6 7400                    		je 		enter_inv
    76                                  	enter_inv:
    77 000000B8 E8FC08                  		call 	imprime_comando_inv				; se apertou só Enter -> comando inválido
    78 000000BB E98700                  		jmp		limpa_vetor
    79                                  
    80                                  	verifica_s_c:
    81 000000BE 803E[1300]9F            		cmp 	byte [comando+1], break_s		; se Enter + 's' -> sai do jogo
    82 000000C3 745A                    		je 		L2_intermediario
    83 000000C5 803E[1300]AE            		cmp 	byte [comando+1], break_c		; se Enter + 'c' -> renicia jogo
    84 000000CA 7506                    		jne 	s_c_inv
    85 000000CC E8D600                  		call 	inicia_jogo
    86 000000CF E95EFF                  		jmp		L1
    87                                  	s_c_inv:
    88 000000D2 803E[E900]00            		cmp 	byte [resultado], 0				; verifica se digitou apos fim do jogo
    89 000000D7 7575                    		jne 	msg_apos_fim_jogo
    90 000000D9 E8DB08                  		call 	imprime_comando_inv				; se Enter + qualquer outra tecla -> comando inválido
    91 000000DC E96600                  		jmp 	limpa_vetor
    92                                  		
    93                                  	verifica_tamanho:
    94 000000DF 803E[E900]00            		cmp 	byte [resultado], 0				; verifica se digitou apos fim do jogo
    95 000000E4 7568                    		jne 	msg_apos_fim_jogo
    96 000000E6 81FB0900                		cmp		bx, 9							; se o vetor tem tamanho 10 -> verifica se é jogada
    97 000000EA 7406                    		je		verifica_comando_jogada
    98 000000EC E8C808                  		call 	imprime_comando_inv				; se não, comando inválido
    99 000000EF E95300                  		jmp 	limpa_vetor
   100                                  	verifica_comando_jogada:					; jogada = make_shift + x ou c + break_shift + num1 + num2 + enter
   101 000000F2 E8D401                  		call 	f_verifica_leitura_jogada		; ao final da função sabe-se se a jogada está no formato pelo valor da variavel leitura_jog_val
   102 000000F5 803E[DE00]01            		cmp 	byte [leitura_jog_val], 1			
   103 000000FA 7406                    		je 		verifica_validade_jogada		; se está no formato, verifica se é válida
   104 000000FC E8B808                  		call 	imprime_comando_inv				; se não, comando inválido
   105 000000FF E94300                  		jmp 	limpa_vetor
   106                                  	verifica_validade_jogada:
   107 00000102 E82108                  		call 	imprime_ultima_jog				; se o ultimo comando de jogada esta no formato correto, imprime
   108 00000105 E82802                  		call 	func_verifica_jogada			; função que verifica se a jogada é valida, se for marca a celula e muda o valor de ultima_jog_val para 1
   109 00000108 803E[DF00]01            		cmp 	byte [ultima_jog_val], 1
   110 0000010D 7533                    		jne		jogada_inv						; se a ultima jogada foi inválida, imprime msg inv e lê de novo
   111 0000010F E8D605                  		call 	f_verifica_ganhador				; função que verifica se alguem venceu
   112 00000112 803E[E900]01            		cmp 	byte [resultado], 1				; verifica se X venceu
   113 00000117 7509                    		jne 	verifica_c_venceu
   114 00000119 E8C408                  		call 	imprime_x_venceu				; X VENCEU!
   115 0000011C E92600                  		jmp 	limpa_vetor
   116                                  
   117                                  	L2_intermediario:
   118 0000011F E93200                  		jmp L2
   119                                  
   120                                  	verifica_c_venceu:
   121 00000122 803E[E900]02            		cmp 	byte [resultado], 2				; verifica se C venceu
   122 00000127 7506                    		jne 	verifica_empate
   123 00000129 E8DD08                  		call 	imprime_c_venceu				; C VENCEU!
   124 0000012C E91600                  		jmp 	limpa_vetor
   125                                  	verifica_empate:
   126 0000012F 813E[E100]FF01          		cmp 	word [cel_marcadas], 0x01FF		; verifica se todas as celulas foram marcadas
   127 00000135 750E                    		jne 	limpa_vetor
   128 00000137 E8F808                  		call 	imprime_empatou					; EMPATOU!
   129 0000013A C606[E900]03            		mov 	byte [resultado], 3
   130 0000013F E90300                  		jmp 	limpa_vetor
   131                                  		
   132                                  	jogada_inv:
   133 00000142 E84908                  		call	imprime_jogada_inv				; se não, jogada invalida
   134                                  
   135                                  	limpa_vetor:
   136 00000145 C706[1000]0000          		mov 	word [i_atual_comando], 0		; índice volta para a primeira posição
   137 0000014B E9E2FE                  		jmp 	L1								; lê novamente
   138                                  
   139                                  	msg_apos_fim_jogo:
   140 0000014E E80A09                  		call 	imprime_msg_apos_fim_jogo
   141 00000151 E9F1FF                  		jmp 	limpa_vetor
   142                                  ; TERMINAR EXECUÇÃO DO PROGRAMA
   143                                  ; reseta o modo de video
   144                                  L2:
   145 00000154 FA                       	CLI									; Deshabilita INTerrupções por hardware - pin INTR NÃO atende INTerrupções externas
   146 00000155 31C0                    	XOR     AX, AX						; Limpa o registrador AX, é equivalente a fazer "MOV AX,0"				
   147 00000157 8EC0                    	MOV     ES, AX						; Inicializa o registrador de Segmento Extra ES para acessar à região de vetores de INTerrupção (posição zero de memoria)
   148 00000159 A1[0000]                	MOV     AX, [cs_dos]				; Carrega em AX o valor do CS do vector de INTerrupção 9 que foi salvo na variável cs_dos -> linha 25
   149 0000015C 26A32600                	MOV     [ES:INT9*4+2], AX			; Atualiza o valor do CS do vector de INTerrupção 9 que foi salvo na variável cs_dos
   150 00000160 A1[0200]                	MOV     AX, [offset_dos]			; Carrega em AX o valor do IP do vector de INTerrupção 9 que foi salvo na variável offset_dos -> linha 23
   151 00000163 26A32400                	MOV     [ES:INT9*4], AX 			; Atualiza o valor do IP do vector de INTerrupção 9 que foi salvo na variável offset_dos
   152                                  	
   153 00000167 B408                    	mov    	ah,08h
   154 00000169 CD21                    	int     21h
   155 0000016B B400                    	mov  	ah,0   						; set video mode
   156 0000016D A0[2300]                	mov  	al,[modo_anterior]   		; modo anterior
   157 00000170 CD10                    	int  	10h
   158 00000172 B8004C                  	mov     ax,4c00h
   159 00000175 CD21                    	int     21h
   160                                  
   161                                  ;===========================================================================
   162                                  ;========================== FIM DO PROGRAMA ================================
   163                                  ;===========================================================================
   164                                  
   165                                  keyINT:						; Este segmento de código só será executado se uma tecla for presionada, ou seja, se a INT 9h for acionada!
   166 00000177 50                              PUSH    AX				; Salva contexto na pilha
   167 00000178 53                              PUSH    BX
   168 00000179 1E                              PUSH    DS
   169 0000017A B8[0000]                        MOV     AX,data				; Carrega em AX o endereço de "data" -> Região do código onde encontra-se o segemeto de dados "Segment data" 			
   170 0000017D 8ED8                            MOV     DS,AX				; Atualiza registrador de segmento de dados DS, isso pode ser feito no inicio do programa!
   171 0000017F E460                            IN      AL, kb_data			; Le a porta 60h, que é onde está o byte do Make/Break da tecla. Esse valor é fornecido pelo chip "8255 PPI"
   172 00000181 FF06[0C00]                      INC     WORD [p_i]			; Incrementa p_i para indicar no loop principal que uma tecla foi acionada!
   173 00000185 8126[0C00]0700                  AND     WORD [p_i],7			
   174 0000018B 8B1E[0C00]                      MOV     BX,[p_i]			; Carrega p_i em BX
   175 0000018F 8887[0400]                      MOV     [BX+tecla],al		; Transfere o valor Make/Break da tecla armacenado em AL "linha 84" para o segmento de dados com offset DX, na variável "tecla"
   176 00000193 E461                            IN      AL, kb_ctl			; Le porta 61h, pois o bit mais significativo "bit 7" 
   177 00000195 0C80                            OR      AL, 80h				; Faz operação lógica OR com o bit mais significativo do registrador AL (1XXXXXXX) -> Valor lido da porta 61h 
   178 00000197 E661                            OUT     kb_ctl, AL			; Seta o bit mais significativo da porta 61h
   179 00000199 247F                            AND     AL, 7Fh				; Restablece o valor do bit mais significativo do registrador AL (0XXXXXXX), alterado na linha 90 	
   180 0000019B E661                            OUT     kb_ctl, AL			; Reinicia o registrador de dislocamento 74LS322 e Livera a interrupção "CLR do flip-flop 7474". O 8255 - Programmable Peripheral Interface (PPI) fica pronto para recever um outro cód
   181 0000019D B020                            MOV     AL, eoi				; Carrega o AL com a byte de End of Interruption, -> 20h por default
   182 0000019F E620                            OUT     pictrl, AL			; Livera o PIC
   183                                          
   184 000001A1 1F                      		POP     DS			        ; Reestablece os registradores salvos na linha 79 
   185 000001A2 5B                              POP     BX
   186 000001A3 58                              POP     AX
   187 000001A4 CF                              IRET					; Retorna da interrupção
   188                                  
   189                                  inicia_jogo:
   190 000001A5 C606[E000]00            		mov 	byte [ultima_jog_x_c], 0
   191 000001AA C706[E100]0000          		mov 	word [cel_marcadas], 0
   192 000001B0 C706[E300]0000          		mov 	word [cel_marcadas_x], 0
   193 000001B6 C706[E500]0000          		mov 	word [cel_marcadas_c], 0
   194 000001BC C706[E700]0000          		mov 	word [venceu], 0
   195 000001C2 C606[E900]00            		mov 	byte [resultado], 0
   196                                  
   197                                  	; salvar modo corrente de video(vendo como está o modo de video da maquina)
   198 000001C7 B40F                    		mov  	ah,0Fh
   199 000001C9 CD10                    		int  	10h
   200 000001CB A2[2300]                		mov  	[modo_anterior],al   
   201                                  
   202                                  	; alterar modo de video para gráfico 640x480 16 cores
   203 000001CE B012                    		mov     al,12h
   204 000001D0 B400                    		mov     ah,0
   205 000001D2 CD10                    		int     10h
   206                                  
   207                                  	;desenhar retas da tabela de jogo
   208 000001D4 C606[2200]0F            		mov		byte[cor],branco_intenso	
   209                                  		
   210                                  		;[125,190]->[515,190] -> HORIZONTAL
   211 000001D9 B87D00                  		mov		ax,125
   212 000001DC 50                      		push	ax
   213 000001DD B8BE00                  		mov		ax,190
   214 000001E0 50                      		push	ax
   215 000001E1 B80302                  		mov		ax,515
   216 000001E4 50                      		push	ax
   217 000001E5 B8BE00                  		mov		ax,190
   218 000001E8 50                      		push	ax
   219 000001E9 E8700A                  		call	line
   220                                  
   221                                  		;[125,320]->[515,320] -> HORIZONTAL
   222 000001EC B87D00                  		mov		ax,125
   223 000001EF 50                      		push	ax
   224 000001F0 B84001                  		mov		ax,320
   225 000001F3 50                      		push	ax
   226 000001F4 B80302                  		mov		ax,515
   227 000001F7 50                      		push	ax
   228 000001F8 B84001                  		mov		ax,320
   229 000001FB 50                      		push	ax
   230 000001FC E85D0A                  		call	line
   231                                  
   232                                  		;[255,60]->[255,450] -> VERTICAL
   233 000001FF B8FF00                  		mov		ax,255
   234 00000202 50                      		push	ax
   235 00000203 B83C00                  		mov		ax,60
   236 00000206 50                      		push	ax
   237 00000207 B8FF00                  		mov		ax,255
   238 0000020A 50                      		push	ax
   239 0000020B B8C201                  		mov		ax,450
   240 0000020E 50                      		push	ax
   241 0000020F E84A0A                  		call	line
   242                                  
   243                                  		;[385,60]->[385,450] -> VERTICAL
   244 00000212 B88101                  		mov		ax,385
   245 00000215 50                      		push	ax
   246 00000216 B83C00                  		mov		ax,60
   247 00000219 50                      		push	ax
   248 0000021A B88101                  		mov		ax,385
   249 0000021D 50                      		push	ax
   250 0000021E B8C201                  		mov		ax,450
   251 00000221 50                      		push	ax
   252 00000222 E8370A                  		call	line
   253                                  
   254                                  	;escrever mensagem topo "JOGO DA VELHA"
   255 00000225 B90D00                  		mov     cx,13					;número de caracteres
   256 00000228 BB0000                  		mov     bx,0
   257 0000022B B600                    		mov     dh,0					;linha 0-29
   258 0000022D B222                    		mov     dl,34					;coluna 0-79
   259 0000022F C606[2200]01            		mov		byte[cor],azul
   260                                  	lm1:
   261 00000234 E8EB08                  		call	cursor
   262 00000237 8A87[2C00]              		mov     al,[bx+titulo]
   263 0000023B E8FB08                  		call	caracter
   264 0000023E 43                      		inc     bx						;proximo caracter
   265 0000023F FEC2                    		inc		dl						;avanca a coluna
   266 00000241 FE06[2200]              		inc		byte [cor]				;mudar a cor para a seguinte
   267 00000245 E2ED                    		loop    lm1
   268                                  
   269                                  	;escrever mensagem de comando
   270 00000247 B91000                  		mov     cx,16					;número de caracteres
   271 0000024A BB0000                  		mov     bx,0
   272 0000024D B61B                    		mov     dh,27					;linha 0-29
   273 0000024F B202                    		mov     dl,2					;coluna 0-79
   274 00000251 C606[2200]07            		mov		byte[cor],branco
   275                                  	lm2:
   276 00000256 E8C908                  		call	cursor
   277 00000259 8A87[3900]              		mov     al,[bx+campo_comando]
   278 0000025D E8D908                  		call	caracter
   279 00000260 43                      		inc     bx						;proximo caracter
   280 00000261 FEC2                    		inc		dl						;avanca a coluna
   281 00000263 E2F1                    		loop    lm2
   282                                  
   283                                  	;escrever mensagem de mensagens
   284 00000265 B91100                  		mov     cx,17					;número de caracteres
   285 00000268 BB0000                  		mov     bx,0
   286 0000026B B61D                    		mov     dh,29					;linha 0-29
   287 0000026D B202                    		mov     dl,2					;coluna 0-79
   288 0000026F C606[2200]07            		mov		byte[cor],branco
   289                                  	lm3:
   290 00000274 E8AB08                  		call	cursor
   291 00000277 8A87[4900]              		mov     al,[bx+campo_mensagem]
   292 0000027B E8BB08                  		call	caracter
   293 0000027E 43                      		inc     bx						;proximo caracter
   294 0000027F FEC2                    		inc		dl						;avanca a coluna
   295 00000281 E2F1                    		loop    lm3
   296                                  
   297                                  	;escrever identificação das células
   298 00000283 B91200                  		mov     cx,18					;número de caracteres
   299 00000286 BB0000                  		mov     bx,0
   300 00000289 B402                    		mov		ah,2					;valor para comparar e saber se já escreveu 'l' e 'c'
   301 0000028B B603                    		mov     dh,3					;linha 0-29
   302 0000028D B210                    		mov     dl,16					;coluna 0-79
   303 0000028F C606[2200]07            		mov		byte[cor],branco
   304                                  	lm4:
   305 00000294 E88B08                  		call	cursor
   306 00000297 8A87[5A00]              		mov     al,[bx+celulas]
   307 0000029B E89B08                  		call	caracter
   308 0000029E 43                      		inc     bx						;proximo caracter
   309 0000029F FEC2                    		inc		dl						;avanca a coluna
   310 000002A1 38E3                    		cmp 	bl,ah					;se ainda não escreveu o num da 'l' e 'c' da célula continua
   311 000002A3 7C1B                    		jl		cont1
   312                                  		;se já, muda para a célula abaixo
   313 000002A5 80C402                  		add 	ah,2
   314 000002A8 80EA02                  		sub 	dl,2
   315 000002AB 80C608                  		add 	dh,8	
   316                                  		
   317 000002AE 80FB06                  		cmp 	bl,6					;verifica se terminou de escrever nas celulas da coluna 1
   318 000002B1 7504                    		jne		cont				;se sim, muda para a coluna 2
   319 000002B3 B603                    		mov 	dh,3
   320 000002B5 B221                    		mov 	dl,33
   321                                  	cont:
   322 000002B7 80FB0C                  		cmp 	bl,12					;verifica se terminou de escrever nas células da coluna 2
   323 000002BA 7504                    		jne		cont1				;se sim, muda para a coluna 3
   324 000002BC B603                    		mov 	dh,3
   325 000002BE B231                    		mov 	dl,49
   326                                  	cont1:
   327 000002C0 E2D2                    		loop    lm4
   328 000002C2 C706[1000]0000          	mov word [i_atual_comando], 0
   329 000002C8 C3                      	ret
   330                                  
   331                                  f_verifica_leitura_jogada:
   332 000002C9 803E[1200]2A            		cmp 	byte [comando], make_shift		; verifica se o comando começa com Shift
   333 000002CE 7405                    		je 		testa_c							; se sim, testa Shift + c
   334 000002D0 C606[DE00]00            		mov 	byte [leitura_jog_val], 0		; se não, comando inválido
   335                                  	testa_c:
   336 000002D5 803E[1300]2E            		cmp 	byte [comando+1], make_c		; testa se é circulo
   337 000002DA 7503                    		jne 	testa_x							; se não for, testa x
   338 000002DC E90F00                  		jmp 	testa_celula1
   339                                  	testa_x:
   340 000002DF 803E[1300]2D            		cmp 	byte [comando+1], make_x		; testa se é x
   341 000002E4 7408                    		je 		testa_celula1
   342 000002E6 C606[DE00]00            		mov 	byte [leitura_jog_val], 0		; se não for, comando invalido
   343 000002EB E94100                  		jmp 	fim_f1
   344                                  	testa_celula1:
   345 000002EE 803E[1600]04            		cmp 	byte [comando+4], make_3		; verifica se o numero da celula 1 é > 3
   346 000002F3 7E08                    		jle		testa_esc1						; se não, testa se é a tecla esc
   347 000002F5 C606[DE00]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   348 000002FA E93200                  		jmp 	fim_f1
   349                                  	testa_esc1:
   350 000002FD 803E[1600]01            		cmp 	byte [comando+4], 01h			; se é < 3, verifica se é a tecla esc (make = 01h)
   351 00000302 7508                    		jne 	testa_celula2					; se não, testa o número da celula 2
   352 00000304 C606[DE00]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   353 00000309 E92300                  		jmp 	fim_f1
   354                                  	testa_celula2:
   355 0000030C 803E[1800]04            		cmp 	byte [comando+6], make_3		; verifica se o numero da celula 2 é > 3
   356 00000311 7E08                    		jle		testa_esc2						; se não, testa se é a tecla esc 
   357 00000313 C606[DE00]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   358 00000318 E91400                  		jmp 	fim_f1
   359                                  	testa_esc2: 
   360 0000031B 803E[1800]01            		cmp 	byte [comando+6], 01h			; se é < 3, verifica se é a tecla esc (make = 01h)
   361 00000320 7508                    		jne 	esta_no_formato					; se não, então está no formato correto
   362 00000322 C606[DE00]00            		mov 	byte [leitura_jog_val], 0		; se for, comando invalido
   363 00000327 E90500                  		jmp 	fim_f1
   364                                  	esta_no_formato:
   365 0000032A C606[DE00]01            		mov 	byte [leitura_jog_val], 1		
   366                                  	fim_f1:
   367 0000032F C3                      		ret
   368                                  
   369                                  func_verifica_jogada:
   370 00000330 A0[1600]                		mov 	al, byte [comando+4]						; transfere o make code da célula 1 para al
   371 00000333 8A26[1800]              		mov 	ah, byte [comando+6]						; transfere o make code da célula 2 para ah
   372 00000337 8A1E[E000]              		mov 	bl, byte [ultima_jog_x_c]
   373 0000033B 381E[1300]              		cmp 	byte [comando+1], bl 						; verifica se o jogador tentou jogar 2 vezes seguidas
   374 0000033F 7447                    		je 		fim_f2_inv_intermediario					; se já, jogada invalida
   375                                  	; testa linha 1
   376 00000341 3C02                    		cmp 	al, make_1							
   377 00000343 7546                    		jne 	testa_l2									; se o primeiro digito não é 1, testa linha 2
   378                                  		;testa_l1_c1										; se é, testa as colunas
   379 00000345 80FC02                  			cmp 	ah, make_1								; verifica se é coluna 1
   380 00000348 7513                    			jne 	testa_l1_c2								; se n é coluna 1, testa coluna 2 
   381                                  			; Se digitou L1 C1
   382 0000034A BB0100                  			mov 	bx, 0x0001
   383 0000034D 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 11 
   384 00000351 81FB0100                			cmp 	bx, 0x0001
   385 00000355 7431                    			je		fim_f2_inv_intermediario				; se já, jogada invalida
   386 00000357 E8C700                  			call 	marca_celula11							; se não, marca celula 11
   387 0000035A E9B800                  			jmp		fim_f2_val
   388                                  		testa_l1_c2:
   389 0000035D 80FC03                  			cmp 	ah, make_2					
   390 00000360 7513                    			jne 	eh_l1_c3								; se n é coluna 2, é coluna 3
   391                                  			; Se digitou L1 C2
   392 00000362 BB0200                  			mov 	bx, 0x0002
   393 00000365 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 12 
   394 00000369 81FB0200                			cmp 	bx, 0x0002
   395 0000036D 7419                    			je		fim_f2_inv_intermediario				; se já, jogada invalida
   396 0000036F E8FE00                  			call 	marca_celula12							; se não, marca celula 12
   397 00000372 E9A000                  			jmp		fim_f2_val
   398                                  		eh_l1_c3:
   399 00000375 BB0400                  			mov 	bx, 0x0004
   400 00000378 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 13 
   401 0000037C 81FB0400                			cmp 	bx, 0x0004
   402 00000380 7406                    			je		fim_f2_inv_intermediario				; se já, jogada invalida
   403 00000382 E83A01                  			call 	marca_celula13							; se não, marca celula 13
   404 00000385 E98D00                  			jmp		fim_f2_val
   405                                  	fim_f2_inv_intermediario:
   406 00000388 E99000                  		jmp fim_f2_inv
   407                                  	testa_l2:
   408 0000038B 3C03                    		cmp 	al, make_2							
   409 0000038D 7543                    		jne 	eh_l3										; se o primeiro digito não é 2, então é linha 3
   410                                  		;testa_l2_c1										; se é, testa as colunas
   411 0000038F 80FC02                  			cmp 	ah, make_1								; verifica se é coluna 1
   412 00000392 7513                    			jne 	testa_l2_c2								; se n é coluna 1, testa coluna 2 
   413                                  			; Se digitou L2 C1
   414 00000394 BB0800                  			mov 	bx, 0x0008
   415 00000397 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 21 
   416 0000039B 81FB0800                			cmp 	bx, 0x0008
   417 0000039F 747A                    			je		fim_f2_inv								; se já, jogada invalida
   418 000003A1 E86A01                  			call 	marca_celula21							; se não, marca celula 21
   419 000003A4 E96E00                  			jmp		fim_f2_val
   420                                  		testa_l2_c2:
   421 000003A7 80FC03                  			cmp 	ah, make_2					
   422 000003AA 7513                    			jne 	eh_l2_c3								; se n é coluna 2, é coluna 3
   423                                  			; Se digitou L2 C2
   424 000003AC BB1000                  			mov 	bx, 0x0010
   425 000003AF 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 22 
   426 000003B3 81FB1000                			cmp 	bx, 0x0010
   427 000003B7 7462                    			je		fim_f2_inv								; se já, jogada invalida
   428 000003B9 E8A101                  			call 	marca_celula22							; se não, marca celula 22
   429 000003BC E95600                  			jmp		fim_f2_val
   430                                  		eh_l2_c3:
   431 000003BF BB2000                  			mov 	bx, 0x0020
   432 000003C2 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 23 
   433 000003C6 81FB2000                			cmp 	bx, 0x0020
   434 000003CA 744F                    			je		fim_f2_inv								; se já, jogada invalida
   435 000003CC E8DD01                  			call 	marca_celula23							; se não, marca celula 23
   436 000003CF E94300                  			jmp		fim_f2_val
   437                                  	eh_l3:
   438                                  		;testa_l3_c1										; testa as colunas
   439 000003D2 80FC02                  			cmp 	ah, make_1								; verifica se é coluna 1
   440 000003D5 7513                    			jne 	testa_l3_c2								; se n é coluna 1, testa coluna 2 
   441                                  			; Se digitou L3 C1
   442 000003D7 BB4000                  			mov 	bx, 0x0040
   443 000003DA 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 31 
   444 000003DE 81FB4000                			cmp 	bx, 0x0040
   445 000003E2 7437                    			je		fim_f2_inv								; se já, jogada invalida
   446 000003E4 E81402                  			call 	marca_celula31							; se não, marca celula 31
   447 000003E7 E92B00                  			jmp		fim_f2_val
   448                                  		testa_l3_c2:
   449 000003EA 80FC03                  			cmp 	ah, make_2					
   450 000003ED 7513                    			jne 	eh_l3_c3								; se n é coluna 2, é coluna 3
   451                                  			; Se digitou L3 C2
   452 000003EF BB8000                  			mov 	bx, 0x0080
   453 000003F2 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 32 
   454 000003F6 81FB8000                			cmp 	bx, 0x0080
   455 000003FA 741F                    			je		fim_f2_inv								; se já, jogada invalida
   456 000003FC E84B02                  			call 	marca_celula32							; se não, marca celula 32
   457 000003FF E91300                  			jmp		fim_f2_val
   458                                  		eh_l3_c3:
   459 00000402 BB0001                  			mov 	bx, 0x0100
   460 00000405 231E[E100]              			and 	bx, word [cel_marcadas]					; verifica se já foi marcada a célula 33 
   461 00000409 81FB0001                			cmp 	bx, 0x0100
   462 0000040D 740C                    			je		fim_f2_inv								; se já, jogada invalida
   463 0000040F E88702                  			call 	marca_celula33							; se não, marca celula 33
   464 00000412 E90000                  			jmp		fim_f2_val
   465                                  	fim_f2_val:
   466 00000415 C606[DF00]01            		mov 	byte [ultima_jog_val], 1
   467 0000041A C3                      		ret
   468                                  	fim_f2_inv:
   469 0000041B C606[DF00]00            		mov 	byte [ultima_jog_val], 0
   470 00000420 C3                      		ret
   471                                  
   472                                  marca_celula11:
   473 00000421 8106[E100]0100          		add 	word [cel_marcadas], 1						; muda a variavel cel_marcadas indicando que marcou a celula 11
   474 00000427 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   475 0000042C 7422                    		je		marca_x_11									; se é, marca x
   476                                  		; se não, marca c
   477 0000042E 8106[E500]0100          		add 	word [cel_marcadas_c], 1					; muda a variavel cel_marcadas_c indicando que marcou a celula 11
   478 00000434 C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   479                                  		;desenhar um circulo na posicão [190,385]
   480 00000439 C606[2200]04            		mov		byte[cor], vermelho
   481 0000043E B8BE00                  		mov		ax, 190
   482 00000441 50                      		push	ax
   483 00000442 B88101                  		mov		ax, 385
   484 00000445 50                      		push	ax
   485 00000446 B82D00                  		mov		ax, raio
   486 00000449 50                      		push	ax
   487 0000044A E83107                  		call 	circle
   488 0000044D E91F00                  		jmp 	fim_marca11
   489                                  	marca_x_11:
   490 00000450 8106[E300]0100          		add 	word [cel_marcadas_x], 1					; muda a variavel cel_marcadas_x indicando que marcou a celula 11
   491 00000456 C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   492                                  		;desenhar um x na posicão [190,385] (centro)
   493 0000045B C606[2200]01            		mov		byte[cor], azul
   494 00000460 B8BE00                  		mov		ax,190
   495 00000463 50                      		push	ax
   496 00000464 B88101                  		mov		ax,385
   497 00000467 50                      		push	ax
   498 00000468 B82D00                  		mov		ax, lado
   499 0000046B 50                      		push	ax
   500 0000046C E86706                  		call	desenha_x
   501                                  	fim_marca11:
   502 0000046F C3                      		ret
   503                                  
   504                                  marca_celula12:
   505 00000470 8106[E100]0200          		add 	word [cel_marcadas], 2						; muda a variavel cel_marcadas indicando que marcou a celula 12
   506 00000476 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   507 0000047B 7422                    		je		marca_x_12									; se é, marca x
   508                                  		; se não, marca c
   509 0000047D 8106[E500]0200          		add 	word [cel_marcadas_c], 2					; muda a variavel cel_marcadas_c indicando que marcou a celula 12
   510 00000483 C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   511                                  		;desenhar um circulo na posicão [320,385]
   512 00000488 C606[2200]04            		mov		byte[cor], vermelho
   513 0000048D B84001                  		mov		ax, 320
   514 00000490 50                      		push	ax
   515 00000491 B88101                  		mov		ax, 385
   516 00000494 50                      		push	ax
   517 00000495 B82D00                  		mov		ax, raio
   518 00000498 50                      		push	ax
   519 00000499 E8E206                  		call 	circle
   520 0000049C E91F00                  		jmp 	fim_marca12
   521                                  	marca_x_12:
   522 0000049F 8106[E300]0200          		add 	word [cel_marcadas_x], 2					; muda a variavel cel_marcadas_x indicando que marcou a celula 12
   523 000004A5 C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   524                                  		;desenhar um x na posicão [320,385] (centro)
   525 000004AA C606[2200]01            		mov		byte[cor], azul
   526 000004AF B84001                  		mov		ax,320
   527 000004B2 50                      		push	ax
   528 000004B3 B88101                  		mov		ax,385
   529 000004B6 50                      		push	ax
   530 000004B7 B82D00                  		mov		ax, lado
   531 000004BA 50                      		push	ax
   532 000004BB E81806                  		call	desenha_x
   533                                  	fim_marca12:
   534 000004BE C3                      		ret
   535                                  
   536                                  marca_celula13:
   537 000004BF 8106[E100]0400          		add 	word [cel_marcadas], 4						; muda a variavel cel_marcadas indicando que marcou a celula 13
   538 000004C5 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   539 000004CA 7422                    		je		marca_x_13									; se é, marca x
   540                                  		; se não, marca c
   541 000004CC 8106[E500]0400          		add 	word [cel_marcadas_c], 4					; muda a variavel cel_marcadas_c indicando que marcou a celula 13
   542 000004D2 C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   543                                  		;desenhar um circulo na posicão [450,385]
   544 000004D7 C606[2200]04            		mov		byte[cor], vermelho
   545 000004DC B8C201                  		mov		ax, 450
   546 000004DF 50                      		push	ax
   547 000004E0 B88101                  		mov		ax, 385
   548 000004E3 50                      		push	ax
   549 000004E4 B82D00                  		mov		ax, raio
   550 000004E7 50                      		push	ax
   551 000004E8 E89306                  		call 	circle
   552 000004EB E91F00                  		jmp 	fim_marca13
   553                                  	marca_x_13:
   554 000004EE 8106[E300]0400          		add 	word [cel_marcadas_x], 4					; muda a variavel cel_marcadas_x indicando que marcou a celula 13
   555 000004F4 C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   556                                  		;desenhar um x na posicão [450,385] (centro)
   557 000004F9 C606[2200]01            		mov		byte[cor], azul
   558 000004FE B8C201                  		mov		ax,450
   559 00000501 50                      		push	ax
   560 00000502 B88101                  		mov		ax,385
   561 00000505 50                      		push	ax
   562 00000506 B82D00                  		mov		ax, lado
   563 00000509 50                      		push	ax
   564 0000050A E8C905                  		call	desenha_x
   565                                  	fim_marca13:
   566 0000050D C3                      		ret
   567                                  
   568                                  marca_celula21:
   569 0000050E 8106[E100]0800          		add 	word [cel_marcadas], 8						; muda a variavel cel_marcadas indicando que marcou a celula 21
   570 00000514 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   571 00000519 7422                    		je		marca_x_21									; se é, marca x
   572                                  		; se não, marca c
   573 0000051B 8106[E500]0800          		add 	word [cel_marcadas_c], 8					; muda a variavel cel_marcadas_c indicando que marcou a celula 21
   574 00000521 C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   575                                  		;desenhar um circulo na posicão [190,255]
   576 00000526 C606[2200]04            		mov		byte[cor], vermelho
   577 0000052B B8BE00                  		mov		ax, 190
   578 0000052E 50                      		push	ax
   579 0000052F B8FF00                  		mov		ax, 255
   580 00000532 50                      		push	ax
   581 00000533 B82D00                  		mov		ax, raio
   582 00000536 50                      		push	ax
   583 00000537 E84406                  		call 	circle
   584 0000053A E91F00                  		jmp 	fim_marca21
   585                                  	marca_x_21:
   586 0000053D 8106[E300]0800          		add 	word [cel_marcadas_x], 8					; muda a variavel cel_marcadas_x indicando que marcou a celula 21
   587 00000543 C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   588                                  		;desenhar um x na posicão [190,255] (centro)
   589 00000548 C606[2200]01            		mov		byte[cor], azul
   590 0000054D B8BE00                  		mov		ax,190
   591 00000550 50                      		push	ax
   592 00000551 B8FF00                  		mov		ax,255
   593 00000554 50                      		push	ax
   594 00000555 B82D00                  		mov		ax, lado
   595 00000558 50                      		push	ax
   596 00000559 E87A05                  		call	desenha_x
   597                                  	fim_marca21:
   598 0000055C C3                      		ret
   599                                  
   600                                  marca_celula22:
   601 0000055D 8106[E100]1000          		add 	word [cel_marcadas], 16						; muda a variavel cel_marcadas indicando que marcou a celula 22
   602 00000563 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   603 00000568 7422                    		je		marca_x_22									; se é, marca x
   604                                  		; se não, marca c
   605 0000056A 8106[E500]1000          		add 	word [cel_marcadas_c], 16					; muda a variavel cel_marcadas_c indicando que marcou a celula 22
   606 00000570 C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   607                                  		;desenhar um circulo na posicão [320,255]
   608 00000575 C606[2200]04            		mov		byte[cor], vermelho
   609 0000057A B84001                  		mov		ax, 320
   610 0000057D 50                      		push	ax
   611 0000057E B8FF00                  		mov		ax, 255
   612 00000581 50                      		push	ax
   613 00000582 B82D00                  		mov		ax, raio
   614 00000585 50                      		push	ax
   615 00000586 E8F505                  		call 	circle
   616 00000589 E91F00                  		jmp 	fim_marca22
   617                                  	marca_x_22:
   618 0000058C 8106[E300]1000          		add 	word [cel_marcadas_x], 16					; muda a variavel cel_marcadas_x indicando que marcou a celula 22
   619 00000592 C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   620                                  		;desenhar um x na posicão [320,255] (centro)
   621 00000597 C606[2200]01            		mov		byte[cor], azul
   622 0000059C B84001                  		mov		ax,320
   623 0000059F 50                      		push	ax
   624 000005A0 B8FF00                  		mov		ax,255
   625 000005A3 50                      		push	ax
   626 000005A4 B82D00                  		mov		ax, lado
   627 000005A7 50                      		push	ax
   628 000005A8 E82B05                  		call	desenha_x
   629                                  	fim_marca22:
   630 000005AB C3                      		ret
   631                                  
   632                                  marca_celula23:
   633 000005AC 8106[E100]2000          		add 	word [cel_marcadas], 32						; muda a variavel cel_marcadas indicando que marcou a celula 23
   634 000005B2 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   635 000005B7 7422                    		je		marca_x_23									; se é, marca x
   636                                  		; se não, marca c
   637 000005B9 8106[E500]2000          		add 	word [cel_marcadas_c], 32					; muda a variavel cel_marcadas_c indicando que marcou a celula 23
   638 000005BF C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   639                                  		;desenhar um circulo na posicão [450,255]
   640 000005C4 C606[2200]04            		mov		byte[cor], vermelho
   641 000005C9 B8C201                  		mov		ax, 450
   642 000005CC 50                      		push	ax
   643 000005CD B8FF00                  		mov		ax, 255
   644 000005D0 50                      		push	ax
   645 000005D1 B82D00                  		mov		ax, raio
   646 000005D4 50                      		push	ax
   647 000005D5 E8A605                  		call 	circle
   648 000005D8 E91F00                  		jmp 	fim_marca23
   649                                  	marca_x_23:
   650 000005DB 8106[E300]2000          		add 	word [cel_marcadas_x], 32					; muda a variavel cel_marcadas_x indicando que marcou a celula 23
   651 000005E1 C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   652                                  		;desenhar um x na posicão [450,255] (centro)
   653 000005E6 C606[2200]01            		mov		byte[cor], azul
   654 000005EB B8C201                  		mov		ax,450
   655 000005EE 50                      		push	ax
   656 000005EF B8FF00                  		mov		ax,255
   657 000005F2 50                      		push	ax
   658 000005F3 B82D00                  		mov		ax, lado
   659 000005F6 50                      		push	ax
   660 000005F7 E8DC04                  		call	desenha_x
   661                                  	fim_marca23:
   662 000005FA C3                      		ret
   663                                  
   664                                  marca_celula31:
   665 000005FB 8106[E100]4000          		add 	word [cel_marcadas], 64						; muda a variavel cel_marcadas indicando que marcou a celula 31
   666 00000601 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   667 00000606 7422                    		je		marca_x_31									; se é, marca x
   668                                  		; se não, marca c
   669 00000608 8106[E500]4000          		add 	word [cel_marcadas_c], 64					; muda a variavel cel_marcadas_c indicando que marcou a celula 31
   670 0000060E C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   671                                  		;desenhar um circulo na posicão [190,125]
   672 00000613 C606[2200]04            		mov		byte[cor], vermelho
   673 00000618 B8BE00                  		mov		ax, 190
   674 0000061B 50                      		push	ax
   675 0000061C B87D00                  		mov		ax, 125
   676 0000061F 50                      		push	ax
   677 00000620 B82D00                  		mov		ax, raio
   678 00000623 50                      		push	ax
   679 00000624 E85705                  		call 	circle
   680 00000627 E91F00                  		jmp 	fim_marca31
   681                                  	marca_x_31:
   682 0000062A 8106[E300]4000          		add 	word [cel_marcadas_x], 64					; muda a variavel cel_marcadas_x indicando que marcou a celula 31
   683 00000630 C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   684                                  		;desenhar um x na posicão [190,125] (centro)
   685 00000635 C606[2200]01            		mov		byte[cor], azul
   686 0000063A B8BE00                  		mov		ax,190
   687 0000063D 50                      		push	ax
   688 0000063E B87D00                  		mov		ax,125
   689 00000641 50                      		push	ax
   690 00000642 B82D00                  		mov		ax, lado
   691 00000645 50                      		push	ax
   692 00000646 E88D04                  		call	desenha_x
   693                                  	fim_marca31:
   694 00000649 C3                      		ret
   695                                  
   696                                  marca_celula32:
   697 0000064A 8106[E100]8000          		add 	word [cel_marcadas], 128					; muda a variavel cel_marcadas indicando que marcou a celula 32
   698 00000650 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   699 00000655 7422                    		je		marca_x_32									; se é, marca x
   700                                  		; se não, marca c
   701 00000657 8106[E500]8000          		add 	word [cel_marcadas_c], 128					; muda a variavel cel_marcadas_c indicando que marcou a celula 32
   702 0000065D C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   703                                  		;desenhar um circulo na posicão [320,125]
   704 00000662 C606[2200]04            		mov		byte[cor], vermelho
   705 00000667 B84001                  		mov		ax, 320
   706 0000066A 50                      		push	ax
   707 0000066B B87D00                  		mov		ax, 125
   708 0000066E 50                      		push	ax
   709 0000066F B82D00                  		mov		ax, raio
   710 00000672 50                      		push	ax
   711 00000673 E80805                  		call 	circle
   712 00000676 E91F00                  		jmp 	fim_marca32
   713                                  	marca_x_32:
   714 00000679 8106[E300]8000          		add 	word [cel_marcadas_x], 128					; muda a variavel cel_marcadas_x indicando que marcou a celula 32
   715 0000067F C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   716                                  		;desenhar um x na posicão [320,125] (centro)
   717 00000684 C606[2200]01            		mov		byte[cor], azul
   718 00000689 B84001                  		mov		ax,320
   719 0000068C 50                      		push	ax
   720 0000068D B87D00                  		mov		ax,125
   721 00000690 50                      		push	ax
   722 00000691 B82D00                  		mov		ax, lado
   723 00000694 50                      		push	ax
   724 00000695 E83E04                  		call	desenha_x
   725                                  	fim_marca32:
   726 00000698 C3                      		ret
   727                                  
   728                                  marca_celula33:
   729 00000699 8106[E100]0001          		add 	word [cel_marcadas], 256					; muda a variavel cel_marcadas indicando que marcou a celula 33
   730 0000069F 803E[1300]2D            		cmp 	byte [comando+1], make_x					; verifica se é x
   731 000006A4 7422                    		je		marca_x_33									; se é, marca x
   732                                  		; se não, marca c
   733 000006A6 8106[E500]0001          		add 	word [cel_marcadas_c], 256					; muda a variavel cel_marcadas_c indicando que marcou a celula 33
   734 000006AC C606[E000]2E            		mov 	byte [ultima_jog_x_c], make_c				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o c
   735                                  		;desenhar um circulo na posicão [450,125]
   736 000006B1 C606[2200]04            		mov		byte[cor], vermelho
   737 000006B6 B8C201                  		mov		ax, 450
   738 000006B9 50                      		push	ax
   739 000006BA B87D00                  		mov		ax, 125
   740 000006BD 50                      		push	ax
   741 000006BE B82D00                  		mov		ax, raio
   742 000006C1 50                      		push	ax
   743 000006C2 E8B904                  		call 	circle
   744 000006C5 E91F00                  		jmp 	fim_marca33
   745                                  	marca_x_33:
   746 000006C8 8106[E300]0001          		add 	word [cel_marcadas_x], 256					; muda a variavel cel_marcadas_x indicando que marcou a celula 33
   747 000006CE C606[E000]2D            		mov 	byte [ultima_jog_x_c], make_x				; muda a variável ultima_jog_x_c indicando que o ultimo a jogar foi o x
   748                                  		;desenhar um x na posicão [450,125] (centro)
   749 000006D3 C606[2200]01            		mov		byte[cor], azul
   750 000006D8 B8C201                  		mov		ax,450
   751 000006DB 50                      		push	ax
   752 000006DC B87D00                  		mov		ax,125
   753 000006DF 50                      		push	ax
   754 000006E0 B82D00                  		mov		ax, lado
   755 000006E3 50                      		push	ax
   756 000006E4 E8EF03                  		call	desenha_x
   757                                  	fim_marca33:
   758 000006E7 C3                      		ret
   759                                  
   760                                  f_verifica_ganhador:
   761                                  		; 11-21-31 = 001001001 = 0x0049
   762                                  		; 12-22-32 = 010010010 = 0x0092
   763                                  		; 13-23-33 = 100100100 = 0x0124
   764                                  		; 11-12-13 = 000000111 = 0x0007
   765                                  		; 21-22-23 = 000111000 = 0x0038
   766                                  		; 31-32-33 = 111000000 = 0x01C0
   767                                  		; 11-22-33 = 100010001 = 0x0111
   768                                  		; 13-22-31 = 001010100 = 0x0054
   769 000006E8 A1[E300]                		mov 	ax, word [cel_marcadas_x]
   770 000006EB 254900                  		and 	ax, 0x0049
   771 000006EE 3D4900                  		cmp		ax, 0x0049
   772 000006F1 7509                    		jne		prox1
   773 000006F3 C706[E700]4900          		mov 	word [venceu], 0x0049
   774 000006F9 E92C01                  		jmp 	ganhou_x
   775                                  	prox1:
   776 000006FC A1[E300]                		mov 	ax, word [cel_marcadas_x]
   777 000006FF 259200                  		and 	ax, 0x0092
   778 00000702 3D9200                  		cmp		ax, 0x0092
   779 00000705 7509                    		jne		prox2
   780 00000707 C706[E700]9200          		mov 	word [venceu], 0x0092
   781 0000070D E91801                  		jmp 	ganhou_x
   782                                  	prox2:
   783 00000710 A1[E300]                		mov 	ax, word [cel_marcadas_x]
   784 00000713 252401                  		and 	ax, 0x0124
   785 00000716 3D2401                  		cmp		ax, 0x0124
   786 00000719 7509                    		jne		prox3
   787 0000071B C706[E700]2401          		mov 	word [venceu], 0x0124
   788 00000721 E90401                  		jmp 	ganhou_x
   789                                  	prox3:
   790 00000724 A1[E300]                		mov 	ax, word [cel_marcadas_x]
   791 00000727 250700                  		and 	ax, 0x0007
   792 0000072A 3D0700                  		cmp		ax, 0x0007
   793 0000072D 7509                    		jne		prox4
   794 0000072F C706[E700]0700          		mov 	word [venceu], 0x0007
   795 00000735 E9F000                  		jmp 	ganhou_x
   796                                  	prox4:
   797 00000738 A1[E300]                		mov 	ax, word [cel_marcadas_x]
   798 0000073B 253800                  		and 	ax, 0x0038
   799 0000073E 3D3800                  		cmp		ax, 0x0038
   800 00000741 7509                    		jne		prox5
   801 00000743 C706[E700]3800          		mov 	word [venceu], 0x0038
   802 00000749 E9DC00                  		jmp 	ganhou_x
   803                                  	prox5:
   804 0000074C A1[E300]                		mov 	ax, word [cel_marcadas_x]
   805 0000074F 25C001                  		and 	ax, 0x01C0
   806 00000752 3DC001                  		cmp		ax, 0x01C0
   807 00000755 7509                    		jne		prox6
   808 00000757 C706[E700]C001          		mov 	word [venceu], 0x01C0
   809 0000075D E9C800                  		jmp 	ganhou_x
   810                                  	prox6:
   811 00000760 A1[E300]                		mov 	ax, word [cel_marcadas_x]
   812 00000763 251101                  		and 	ax, 0x0111
   813 00000766 3D1101                  		cmp		ax, 0x0111
   814 00000769 7509                    		jne		prox7
   815 0000076B C706[E700]1101          		mov 	word [venceu], 0x0111
   816 00000771 E9B400                  		jmp 	ganhou_x
   817                                  	prox7:
   818 00000774 A1[E300]                		mov 	ax, word [cel_marcadas_x]
   819 00000777 255400                  		and 	ax, 0x0054
   820 0000077A 3D5400                  		cmp		ax, 0x0054
   821 0000077D 7509                    		jne		prox8
   822 0000077F C706[E700]5400          		mov 	word [venceu], 0x0054
   823 00000785 E9A000                  		jmp 	ganhou_x
   824                                  	prox8:
   825 00000788 A1[E500]                		mov 	ax, word [cel_marcadas_c]
   826 0000078B 254900                  		and 	ax, 0x0049
   827 0000078E 3D4900                  		cmp		ax, 0x0049
   828 00000791 7509                    		jne		prox9
   829 00000793 C706[E700]4900          		mov 	word [venceu], 0x0049
   830 00000799 E99500                  		jmp 	ganhou_c
   831                                  	prox9:
   832 0000079C A1[E500]                		mov 	ax, word [cel_marcadas_c]
   833 0000079F 259200                  		and 	ax, 0x0092
   834 000007A2 3D9200                  		cmp		ax, 0x0092
   835 000007A5 7509                    		jne		prox10
   836 000007A7 C706[E700]9200          		mov 	word [venceu], 0x0092
   837 000007AD E98100                  		jmp 	ganhou_c
   838                                  	prox10:
   839 000007B0 A1[E500]                		mov 	ax, word [cel_marcadas_c]
   840 000007B3 252401                  		and 	ax, 0x0124
   841 000007B6 3D2401                  		cmp		ax, 0x0124
   842 000007B9 7509                    		jne		prox11
   843 000007BB C706[E700]2401          		mov 	word [venceu], 0x0124
   844 000007C1 E96D00                  		jmp 	ganhou_c
   845                                  	prox11:
   846 000007C4 A1[E500]                		mov 	ax, word [cel_marcadas_c]
   847 000007C7 250700                  		and 	ax, 0x0007
   848 000007CA 3D0700                  		cmp		ax, 0x0007
   849 000007CD 7509                    		jne		prox12
   850 000007CF C706[E700]0700          		mov 	word [venceu], 0x0007
   851 000007D5 E95900                  		jmp 	ganhou_c
   852                                  	prox12:
   853 000007D8 A1[E500]                		mov 	ax, word [cel_marcadas_c]
   854 000007DB 253800                  		and 	ax, 0x0038
   855 000007DE 3D3800                  		cmp		ax, 0x0038
   856 000007E1 7509                    		jne		prox13
   857 000007E3 C706[E700]3800          		mov 	word [venceu], 0x0038
   858 000007E9 E94500                  		jmp 	ganhou_c
   859                                  	prox13:
   860 000007EC A1[E500]                		mov 	ax, word [cel_marcadas_c]
   861 000007EF 25C001                  		and 	ax, 0x01C0
   862 000007F2 3DC001                  		cmp		ax, 0x01C0
   863 000007F5 7509                    		jne		prox14
   864 000007F7 C706[E700]C001          		mov 	word [venceu], 0x01C0
   865 000007FD E93100                  		jmp 	ganhou_c
   866                                  	prox14:
   867 00000800 A1[E500]                		mov 	ax, word [cel_marcadas_c]
   868 00000803 251101                  		and 	ax, 0x0111
   869 00000806 3D1101                  		cmp		ax, 0x0111
   870 00000809 7509                    		jne		prox15
   871 0000080B C706[E700]1101          		mov 	word [venceu], 0x0111
   872 00000811 E91D00                  		jmp 	ganhou_c
   873                                  	prox15:
   874 00000814 A1[E500]                		mov 	ax, word [cel_marcadas_c]
   875 00000817 255400                  		and 	ax, 0x0054
   876 0000081A 3D5400                  		cmp		ax, 0x0054
   877 0000081D 751B                    		jne		n_ganhou
   878 0000081F C706[E700]5400          		mov 	word [venceu], 0x0054
   879 00000825 E90900                  		jmp 	ganhou_c
   880                                  	ganhou_x:
   881 00000828 E81000                  		call 	marca_ganhador
   882 0000082B C606[E900]01            		mov 	byte [resultado], 1
   883 00000830 C3                      		ret
   884                                  	ganhou_c:
   885 00000831 E80700                  		call 	marca_ganhador
   886 00000834 C606[E900]02            		mov 	byte [resultado], 2
   887 00000839 C3                      		ret
   888                                  	n_ganhou:
   889 0000083A C3                      		ret
   890                                  
   891                                  ; 11-21-31 = 001001001 = 0x0049 
   892                                  ; 12-22-32 = 010010010 = 0x0092	
   893                                  ; 13-23-33 = 100100100 = 0x0124
   894                                  ; 11-12-13 = 000000111 = 0x0007
   895                                  ; 21-22-23 = 000111000 = 0x0038
   896                                  ; 31-32-33 = 111000000 = 0x01C0
   897                                  ; 11-22-33 = 100010001 = 0x0111
   898                                  ; 13-22-31 = 001010100 = 0x0054
   899                                  marca_ganhador: ; 11-21-31 = 001001001 = 0x0049
   900 0000083B C606[2200]02            		mov		byte[cor],verde
   901 00000840 813E[E700]4900          		cmp 	word [venceu], 0x0049
   902 00000846 7516                    		jne		next1
   903                                  		;[190,60]->[190,450] -> VERTICAL
   904 00000848 B8BE00                  		mov		ax,190
   905 0000084B 50                      		push	ax
   906 0000084C B83C00                  		mov		ax,60
   907 0000084F 50                      		push	ax
   908 00000850 B8BE00                  		mov		ax,190
   909 00000853 50                      		push	ax
   910 00000854 B8C201                  		mov		ax,450
   911 00000857 50                      		push	ax
   912 00000858 E80104                  		call	line
   913 0000085B E9C700                  		jmp 	fim_marca_ganhador
   914                                  	next1:		; 12-22-32 = 010010010 = 0x0092
   915 0000085E 813E[E700]9200          		cmp 	word [venceu], 0x0092
   916 00000864 7516                    		jne		next2
   917                                  		;[320,60]->[320,450] -> VERTICAL
   918 00000866 B84001                  		mov		ax,320
   919 00000869 50                      		push	ax
   920 0000086A B83C00                  		mov		ax,60
   921 0000086D 50                      		push	ax
   922 0000086E B84001                  		mov		ax,320
   923 00000871 50                      		push	ax
   924 00000872 B8C201                  		mov		ax,450
   925 00000875 50                      		push	ax
   926 00000876 E8E303                  		call	line
   927 00000879 E9A900                  		jmp 	fim_marca_ganhador
   928                                  	next2:		; 13-23-33 = 100100100 = 0x0124
   929 0000087C 813E[E700]2401          		cmp 	word [venceu], 0x0124
   930 00000882 7516                    		jne		next3
   931                                  		;[450,60]->[450,450] -> VERTICAL
   932 00000884 B8C201                  		mov		ax,450
   933 00000887 50                      		push	ax
   934 00000888 B83C00                  		mov		ax,60
   935 0000088B 50                      		push	ax
   936 0000088C B8C201                  		mov		ax,450
   937 0000088F 50                      		push	ax
   938 00000890 B8C201                  		mov		ax,450
   939 00000893 50                      		push	ax
   940 00000894 E8C503                  		call	line
   941 00000897 E98B00                  		jmp 	fim_marca_ganhador
   942                                  	next3:		; 11-12-13 = 000000111 = 0x0007
   943 0000089A 813E[E700]0700          		cmp 	word [venceu], 0x0007
   944 000008A0 7516                    		jne		next4
   945                                  		;[125,385]->[515,385] -> HORIZONTAL
   946 000008A2 B87D00                  		mov		ax,125
   947 000008A5 50                      		push	ax
   948 000008A6 B88101                  		mov		ax,385
   949 000008A9 50                      		push	ax
   950 000008AA B80302                  		mov		ax,515
   951 000008AD 50                      		push	ax
   952 000008AE B88101                  		mov		ax,385
   953 000008B1 50                      		push	ax
   954 000008B2 E8A703                  		call	line
   955 000008B5 E96D00                  		jmp 	fim_marca_ganhador
   956                                  	next4:		; 21-22-23 = 000111000 = 0x0038
   957 000008B8 813E[E700]3800          		cmp 	word [venceu], 0x0038
   958 000008BE 7516                    		jne		next5
   959                                  		;[125,255]->[515,255] -> HORIZONTAL
   960 000008C0 B87D00                  		mov		ax,125
   961 000008C3 50                      		push	ax
   962 000008C4 B8FF00                  		mov		ax,255
   963 000008C7 50                      		push	ax
   964 000008C8 B80302                  		mov		ax,515
   965 000008CB 50                      		push	ax
   966 000008CC B8FF00                  		mov		ax,255
   967 000008CF 50                      		push	ax
   968 000008D0 E88903                  		call	line
   969 000008D3 E94F00                  		jmp 	fim_marca_ganhador
   970                                  	next5:		; 31-32-33 = 111000000 = 0x01C0
   971 000008D6 813E[E700]C001          		cmp 	word [venceu], 0x01C0
   972 000008DC 7516                    		jne		next6
   973                                  		;[125,125]->[515,125] -> HORIZONTAL
   974 000008DE B87D00                  		mov		ax,125
   975 000008E1 50                      		push	ax
   976 000008E2 B87D00                  		mov		ax,125
   977 000008E5 50                      		push	ax
   978 000008E6 B80302                  		mov		ax,515
   979 000008E9 50                      		push	ax
   980 000008EA B87D00                  		mov		ax,125
   981 000008ED 50                      		push	ax
   982 000008EE E86B03                  		call	line
   983 000008F1 E93100                  		jmp 	fim_marca_ganhador
   984                                  	next6:		; 11-22-33 = 100010001 = 0x0111
   985 000008F4 813E[E700]1101          		cmp 	word [venceu], 0x0111
   986 000008FA 7516                    		jne		next7
   987                                  		;[125,450]->[515,60] -> DIAGONAL
   988 000008FC B87D00                  		mov		ax,125
   989 000008FF 50                      		push	ax
   990 00000900 B8C201                  		mov		ax,450
   991 00000903 50                      		push	ax
   992 00000904 B80302                  		mov		ax,515
   993 00000907 50                      		push	ax
   994 00000908 B83C00                  		mov		ax,60
   995 0000090B 50                      		push	ax
   996 0000090C E84D03                  		call	line
   997 0000090F E91300                  		jmp 	fim_marca_ganhador
   998                                  	next7:		; 13-22-31 = 001010100 = 0x0054
   999                                  		;[515,450]->[125,60] -> DIAGONAL
  1000 00000912 B80302                  		mov		ax,515
  1001 00000915 50                      		push	ax
  1002 00000916 B8C201                  		mov		ax,450
  1003 00000919 50                      		push	ax
  1004 0000091A B87D00                  		mov		ax,125
  1005 0000091D 50                      		push	ax
  1006 0000091E B83C00                  		mov		ax,60
  1007 00000921 50                      		push	ax
  1008 00000922 E83703                  		call	line
  1009                                  	fim_marca_ganhador:
  1010 00000925 C3                      		ret
  1011                                  
  1012                                  imprime_ultima_jog:
  1013 00000926 9C                      		pushf      
  1014 00000927 50                      		push 	ax
  1015 00000928 52                      		push	dx
  1016 00000929 C606[2200]07            		mov		byte[cor],branco
  1017 0000092E B61B                    		mov 	dh, 27
  1018 00000930 B214                    		mov		dl, 20
  1019 00000932 E8ED01                  		call	cursor
  1020                                  
  1021 00000935 803E[1300]2E            		cmp 	byte [comando+1], make_c	; verifica se é C
  1022 0000093A 7505                    		jne 	entao_x						; se não, é X
  1023 0000093C B043                    		mov 	al,	'C' 					; se sim, coloca a string C em al
  1024 0000093E E90200                  		jmp 	printa_x_c
  1025                                  	entao_x:
  1026 00000941 B058                    		mov 	al, 'X'						; coloca a string X em al
  1027                                  	printa_x_c:
  1028 00000943 E8F301                  		call 	caracter					; printa X ou C
  1029 00000946 FEC2                    		inc 	dl							; proxima coluna
  1030 00000948 E8D701                  		call	cursor
  1031                                  
  1032 0000094B 803E[1600]02            		cmp 	byte [comando+4], make_1	; verifica se é linha 1
  1033 00000950 7505                    		jne 	check_l2
  1034 00000952 B031                    		mov 	al,	'1' 					; se sim, coloca a string 1 em al
  1035 00000954 E90E00                  		jmp 	printa_l
  1036                                  	check_l2:
  1037 00000957 803E[1600]03            		cmp 	byte [comando+4], make_2	; verifica se é linha 2
  1038 0000095C 7505                    		jne 	entao_l3
  1039 0000095E B032                    		mov 	al,	'2' 					; se sim, coloca a string 2 em al
  1040 00000960 E90200                  		jmp 	printa_l
  1041                                  	entao_l3:
  1042 00000963 B033                    		mov 	al,	'3' 					; se não, coloca a string 3 em al
  1043                                  	printa_l:
  1044 00000965 E8D101                  		call 	caracter					; printa 1 2 ou 3
  1045 00000968 FEC2                    		inc 	dl							; proxima coluna
  1046 0000096A E8B501                  		call	cursor
  1047                                  		
  1048 0000096D 803E[1800]02            		cmp 	byte [comando+6], make_1	; verifica se é coluna 1
  1049 00000972 7505                    		jne 	check_c2
  1050 00000974 B031                    		mov 	al,	'1' 					; se sim, coloca a string 1 em al
  1051 00000976 E90E00                  		jmp 	printa_c
  1052                                  	check_c2:
  1053 00000979 803E[1800]03            		cmp 	byte [comando+6], make_2	; verifica se é coluna 2
  1054 0000097E 7505                    		jne 	entao_c3
  1055 00000980 B032                    		mov 	al,	'2' 					; se sim, coloca a string 2 em al
  1056 00000982 E90200                  		jmp 	printa_c
  1057                                  	entao_c3:
  1058 00000985 B033                    		mov 	al,	'3' 					; se não, coloca a string 3 em al
  1059                                  	printa_c:
  1060 00000987 E8AF01                  		call 	caracter						; printa 1 2 ou 3
  1061                                  
  1062 0000098A 5A                      		pop 	dx
  1063 0000098B 58                      		pop		ax
  1064 0000098C 9D                      		popf
  1065 0000098D C3                      		ret
  1066                                  
  1067                                  imprime_jogada_inv:
  1068 0000098E 9C                      		pushf      
  1069 0000098F 50                      		push 	ax
  1070 00000990 53                      		push 	bx
  1071 00000991 51                      		push	cx
  1072 00000992 52                      		push	dx
  1073                                  
  1074 00000993 B90F00                  		mov     cx,15					;número de caracteres
  1075 00000996 BB0000                  		mov     bx,0
  1076 00000999 B61D                    		mov     dh,29					;linha 0-29
  1077 0000099B B215                    		mov     dl,21					;coluna 0-79
  1078 0000099D C606[2200]07            		mov		byte[cor],branco
  1079                                  	l_joginv:
  1080 000009A2 E87D01                  		call	cursor
  1081 000009A5 8A87[7C00]              		mov     al,[bx+msg_jog_inv]
  1082 000009A9 E88D01                  		call	caracter
  1083 000009AC 43                      		inc     bx						;proximo caracter
  1084 000009AD FEC2                    		inc		dl						;avanca a coluna
  1085 000009AF E2F1                    		loop    l_joginv
  1086                                  
  1087 000009B1 5A                      		pop		dx
  1088 000009B2 59                      		pop		cx
  1089 000009B3 5B                      		pop		bx
  1090 000009B4 58                      		pop		ax
  1091 000009B5 9D                      		popf
  1092 000009B6 C3                      		ret
  1093                                  
  1094                                  imprime_comando_inv:
  1095 000009B7 9C                      		pushf               	
  1096 000009B8 50                      		push 	ax
  1097 000009B9 53                      		push 	bx
  1098 000009BA 51                      		push	cx
  1099 000009BB 52                      		push	dx
  1100                                  
  1101 000009BC B91000                  		mov     cx,16					;número de caracteres
  1102 000009BF BB0000                  		mov     bx,0
  1103 000009C2 B61D                    		mov     dh,29					;linha 0-29
  1104 000009C4 B215                    		mov     dl,21					;coluna 0-79
  1105 000009C6 C606[2200]07            		mov		byte[cor],branco
  1106                                  	l_cominv:
  1107 000009CB E85401                  		call	cursor
  1108 000009CE 8A87[6C00]              		mov     al,[bx+msg_com_inv]
  1109 000009D2 E86401                  		call	caracter
  1110 000009D5 43                      		inc     bx						;proximo caracter
  1111 000009D6 FEC2                    		inc		dl						;avanca a coluna
  1112 000009D8 E2F1                    		loop    l_cominv
  1113                                  		
  1114 000009DA 5A                      		pop		dx
  1115 000009DB 59                      		pop		cx
  1116 000009DC 5B                      		pop		bx
  1117 000009DD 58                      		pop		ax
  1118 000009DE 9D                      		popf
  1119 000009DF C3                      		ret
  1120                                  
  1121                                  imprime_x_venceu:
  1122 000009E0 9C                      		pushf               	
  1123 000009E1 50                      		push 	ax
  1124 000009E2 53                      		push 	bx
  1125 000009E3 51                      		push	cx
  1126 000009E4 52                      		push	dx
  1127                                  
  1128 000009E5 B90900                  		mov     cx,9							;número de caracteres
  1129 000009E8 BB0000                  		mov     bx,0
  1130 000009EB B61D                    		mov     dh,29							;linha 0-29
  1131 000009ED B215                    		mov     dl,21							;coluna 0-79
  1132 000009EF C606[2200]07            		mov		byte[cor],branco
  1133                                  	l_xvenc:
  1134 000009F4 E82B01                  		call	cursor
  1135 000009F7 8A87[8E00]              		mov     al,[bx+msg_x_venceu]
  1136 000009FB E83B01                  		call	caracter
  1137 000009FE 43                      		inc     bx								;proximo caracter
  1138 000009FF FEC2                    		inc		dl								;avanca a coluna
  1139 00000A01 E2F1                    		loop    l_xvenc
  1140                                  
  1141 00000A03 5A                      		pop		dx
  1142 00000A04 59                      		pop		cx
  1143 00000A05 5B                      		pop		bx
  1144 00000A06 58                      		pop		ax
  1145 00000A07 9D                      		popf
  1146 00000A08 C3                      		ret
  1147                                  
  1148                                  imprime_c_venceu:
  1149 00000A09 9C                      		pushf               	
  1150 00000A0A 50                      		push 	ax
  1151 00000A0B 53                      		push 	bx
  1152 00000A0C 51                      		push	cx
  1153 00000A0D 52                      		push	dx
  1154                                  
  1155 00000A0E B90900                  		mov     cx,9							;número de caracteres
  1156 00000A11 BB0000                  		mov     bx,0
  1157 00000A14 B61D                    		mov     dh,29							;linha 0-29
  1158 00000A16 B215                    		mov     dl,21							;coluna 0-79
  1159 00000A18 C606[2200]07            		mov		byte[cor],branco
  1160                                  	l_cvenc:
  1161 00000A1D E80201                  		call	cursor
  1162 00000A20 8A87[9700]              		mov     al,[bx+msg_c_venceu]
  1163 00000A24 E81201                  		call	caracter
  1164 00000A27 43                      		inc     bx								;proximo caracter
  1165 00000A28 FEC2                    		inc		dl								;avanca a coluna
  1166 00000A2A E2F1                    		loop    l_cvenc
  1167                                  
  1168 00000A2C 5A                      		pop		dx
  1169 00000A2D 59                      		pop		cx
  1170 00000A2E 5B                      		pop		bx
  1171 00000A2F 58                      		pop		ax
  1172 00000A30 9D                      		popf
  1173 00000A31 C3                      		ret
  1174                                  
  1175                                  imprime_empatou:
  1176 00000A32 9C                      		pushf               	
  1177 00000A33 50                      		push 	ax
  1178 00000A34 53                      		push 	bx
  1179 00000A35 51                      		push	cx
  1180 00000A36 52                      		push	dx
  1181                                  
  1182 00000A37 B90800                  		mov     cx,8							;número de caracteres
  1183 00000A3A BB0000                  		mov     bx,0
  1184 00000A3D B61D                    		mov     dh,29							;linha 0-29
  1185 00000A3F B215                    		mov     dl,21							;coluna 0-79
  1186 00000A41 C606[2200]07            		mov		byte[cor],branco
  1187                                  	l_empatou:
  1188 00000A46 E8D900                  		call	cursor
  1189 00000A49 8A87[A000]              		mov     al,[bx+msg_empatou]
  1190 00000A4D E8E900                  		call	caracter
  1191 00000A50 43                      		inc     bx								;proximo caracter
  1192 00000A51 FEC2                    		inc		dl								;avanca a coluna
  1193 00000A53 E2F1                    		loop    l_empatou
  1194                                  
  1195 00000A55 5A                      		pop		dx
  1196 00000A56 59                      		pop		cx
  1197 00000A57 5B                      		pop		bx
  1198 00000A58 58                      		pop		ax
  1199 00000A59 9D                      		popf
  1200 00000A5A C3                      		ret
  1201                                  
  1202                                  imprime_msg_apos_fim_jogo:
  1203 00000A5B 9C                      		pushf               	
  1204 00000A5C 50                      		push 	ax
  1205 00000A5D 53                      		push 	bx
  1206 00000A5E 51                      		push	cx
  1207 00000A5F 52                      		push	dx
  1208                                  
  1209 00000A60 B93600                  		mov     cx,54							;número de caracteres
  1210 00000A63 BB0000                  		mov     bx,0
  1211 00000A66 B61D                    		mov     dh,29							;linha 0-29
  1212 00000A68 B215                    		mov     dl,21							;coluna 0-79
  1213 00000A6A C606[2200]07            		mov		byte[cor],branco
  1214                                  	l_fimjogo:
  1215 00000A6F E8B000                  		call	cursor
  1216 00000A72 8A87[A800]              		mov     al,[bx+msg_fim_jogo]
  1217 00000A76 E8C000                  		call	caracter
  1218 00000A79 43                      		inc     bx								;proximo caracter
  1219 00000A7A FEC2                    		inc		dl								;avanca a coluna
  1220 00000A7C E2F1                    		loop    l_fimjogo
  1221                                  
  1222 00000A7E 5A                      		pop		dx
  1223 00000A7F 59                      		pop		cx
  1224 00000A80 5B                      		pop		bx
  1225 00000A81 58                      		pop		ax
  1226 00000A82 9D                      		popf
  1227 00000A83 C3                      		ret
  1228                                  
  1229                                  limpa_campo_com:
  1230 00000A84 9C                      		pushf               	
  1231 00000A85 50                      		push 	ax
  1232 00000A86 53                      		push 	bx
  1233 00000A87 51                      		push	cx
  1234 00000A88 52                      		push	dx
  1235                                  
  1236 00000A89 B90300                  		mov     cx,3							;número de caracteres
  1237 00000A8C BB0000                  		mov     bx,0
  1238 00000A8F B61B                    		mov     dh,27							;linha 0-29
  1239 00000A91 B214                    		mov     dl,20							;coluna 0-79
  1240 00000A93 C606[2200]00            		mov		byte[cor],preto
  1241                                  	l_limpacom:
  1242 00000A98 E88700                  		call	cursor
  1243 00000A9B 8A87[8B00]              		mov     al,[bx+msg_limpa_com]
  1244 00000A9F E89700                  		call	caracter
  1245 00000AA2 43                      		inc     bx								;proximo caracter
  1246 00000AA3 FEC2                    		inc		dl								;avanca a coluna
  1247 00000AA5 E2F1                    		loop    l_limpacom
  1248                                  
  1249 00000AA7 5A                      		pop		dx
  1250 00000AA8 59                      		pop		cx
  1251 00000AA9 5B                      		pop		bx
  1252 00000AAA 58                      		pop		ax
  1253 00000AAB 9D                      		popf
  1254 00000AAC C3                      		ret
  1255                                  
  1256                                  limpa_campo_msg:
  1257 00000AAD 9C                      		pushf               	
  1258 00000AAE 50                      		push 	ax
  1259 00000AAF 53                      		push 	bx
  1260 00000AB0 51                      		push	cx
  1261 00000AB1 52                      		push	dx
  1262                                  
  1263 00000AB2 B93600                  		mov     cx,54							;número de caracteres
  1264 00000AB5 BB0000                  		mov     bx,0
  1265 00000AB8 B61D                    		mov     dh,29							;linha 0-29
  1266 00000ABA B215                    		mov     dl,21							;coluna 0-79
  1267 00000ABC C606[2200]00            		mov		byte[cor],preto
  1268                                  	l_limpamsg:
  1269 00000AC1 E85E00                  		call	cursor
  1270 00000AC4 8A87[A800]              		mov     al,[bx+msg_fim_jogo]
  1271 00000AC8 E86E00                  		call	caracter
  1272 00000ACB 43                      		inc     bx								;proximo caracter
  1273 00000ACC FEC2                    		inc		dl								;avanca a coluna
  1274 00000ACE E2F1                    		loop    l_limpamsg
  1275                                  
  1276 00000AD0 5A                      		pop		dx
  1277 00000AD1 59                      		pop		cx
  1278 00000AD2 5B                      		pop		bx
  1279 00000AD3 58                      		pop		ax
  1280 00000AD4 9D                      		popf
  1281 00000AD5 C3                      		ret
  1282                                  ;***************************************************************************
  1283                                  ;
  1284                                  ;   função desenha_x
  1285                                  ;	lado estático de 'lado'px == 55 px
  1286                                  ;
  1287                                  ; push xc; push yc; call desenha_x;  (xc+l<639,yc+l<479)e(xc-l>0,yc-l>0)
  1288                                  ; cor definida na variavel cor
  1289                                  desenha_x:
  1290 00000AD6 55                      	push 	bp
  1291 00000AD7 89E5                    	mov	 	bp,sp
  1292 00000AD9 9C                      	pushf               	;coloca os flags na pilha
  1293 00000ADA 50                      	push 	ax
  1294 00000ADB 53                      	push 	bx
  1295 00000ADC 51                      	push	cx
  1296 00000ADD 52                      	push	dx
  1297 00000ADE 56                      	push	si
  1298 00000ADF 57                      	push	di
  1299                                  	
  1300 00000AE0 8B4608                  	mov		ax,[bp+8]   	; resgata xc
  1301 00000AE3 8B5E06                  	mov		bx,[bp+6]    	; resgata yc
  1302 00000AE6 8B4E04                  	mov		cx,[bp+4]		; resgata l
  1303                                  	
  1304                                  	;desenha primeira diagonal
  1305 00000AE9 89C2                    	mov 	dx,ax			
  1306 00000AEB 29CA                    	sub		dx,cx	; Ponto inferior esquerdo
  1307 00000AED 52                      	push	dx
  1308 00000AEE 89DA                    	mov 	dx,bx
  1309 00000AF0 29CA                    	sub		dx,cx
  1310 00000AF2 52                      	push    dx
  1311                                  
  1312 00000AF3 89C2                    	mov 	dx,ax
  1313 00000AF5 01CA                    	add		dx,cx	; Ponto superior direito
  1314 00000AF7 52                      	push	dx
  1315 00000AF8 89DA                    	mov 	dx,bx
  1316 00000AFA 01CA                    	add		dx,cx
  1317 00000AFC 52                      	push    dx
  1318                                  
  1319 00000AFD E85C01                  	call line
  1320                                  
  1321                                  	;desenha segunda diagonal
  1322 00000B00 89C2                    	mov 	dx,ax			
  1323 00000B02 01CA                    	add		dx,cx	; Ponto inferior direito
  1324 00000B04 52                      	push	dx
  1325 00000B05 89DA                    	mov 	dx,bx
  1326 00000B07 29CA                    	sub		dx,cx
  1327 00000B09 52                      	push    dx
  1328                                  
  1329 00000B0A 89C2                    	mov 	dx,ax
  1330 00000B0C 29CA                    	sub		dx,cx	; Ponto superior esquerdo
  1331 00000B0E 52                      	push	dx
  1332 00000B0F 89DA                    	mov 	dx,bx
  1333 00000B11 01CA                    	add		dx,cx
  1334 00000B13 52                      	push    dx
  1335                                  
  1336 00000B14 E84501                  	call line
  1337                                  
  1338 00000B17 5F                      	pop		di
  1339 00000B18 5E                      	pop		si
  1340 00000B19 5A                      	pop		dx
  1341 00000B1A 59                      	pop		cx
  1342 00000B1B 5B                      	pop		bx
  1343 00000B1C 58                      	pop		ax
  1344 00000B1D 9D                      	popf
  1345 00000B1E 5D                      	pop		bp
  1346 00000B1F C20600                  	ret		6
  1347                                  
  1348                                  
  1349                                  ;***************************************************************************
  1350                                  ;
  1351                                  ;   função cursor
  1352                                  ;
  1353                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
  1354                                  cursor:
  1355 00000B22 9C                      	pushf
  1356 00000B23 50                      	push 	ax
  1357 00000B24 53                      	push 	bx
  1358 00000B25 51                      	push	cx
  1359 00000B26 52                      	push	dx
  1360 00000B27 56                      	push	si
  1361 00000B28 57                      	push	di
  1362 00000B29 55                      	push	bp
  1363 00000B2A B402                    	mov     ah,2
  1364 00000B2C B700                    	mov     bh,0
  1365 00000B2E CD10                    	int     10h
  1366 00000B30 5D                      	pop		bp
  1367 00000B31 5F                      	pop		di
  1368 00000B32 5E                      	pop		si
  1369 00000B33 5A                      	pop		dx
  1370 00000B34 59                      	pop		cx
  1371 00000B35 5B                      	pop		bx
  1372 00000B36 58                      	pop		ax
  1373 00000B37 9D                      	popf
  1374 00000B38 C3                      	ret
  1375                                  
  1376                                  
  1377                                  ;_____________________________________________________________________________
  1378                                  ;
  1379                                  ; função caracter escrito na posisão do cursor
  1380                                  ;
  1381                                  ; al= caracter a ser escrito
  1382                                  ; cor definida na variavel cor
  1383                                  caracter:
  1384 00000B39 9C                      	pushf
  1385 00000B3A 50                      	push 	ax
  1386 00000B3B 53                      	push 	bx
  1387 00000B3C 51                      	push	cx
  1388 00000B3D 52                      	push	dx
  1389 00000B3E 56                      	push	si
  1390 00000B3F 57                      	push	di
  1391 00000B40 55                      	push	bp
  1392 00000B41 B409                    	mov     ah,9
  1393 00000B43 B700                    	mov     bh,0
  1394 00000B45 B90100                  	mov     cx,1
  1395 00000B48 8A1E[2200]              	mov     bl,[cor]
  1396 00000B4C CD10                    	int     10h
  1397 00000B4E 5D                      	pop		bp
  1398 00000B4F 5F                      	pop		di
  1399 00000B50 5E                      	pop		si
  1400 00000B51 5A                      	pop		dx
  1401 00000B52 59                      	pop		cx
  1402 00000B53 5B                      	pop		bx
  1403 00000B54 58                      	pop		ax
  1404 00000B55 9D                      	popf
  1405 00000B56 C3                      	ret
  1406                                  
  1407                                  
  1408                                  ;_____________________________________________________________________________
  1409                                  ;
  1410                                  ;   função plot_xy
  1411                                  ;
  1412                                  ; push x; push y; call plot_xy;  (x<639, y<479)
  1413                                  ; cor definida na variavel cor
  1414                                  plot_xy:
  1415 00000B57 55                      	push	bp
  1416 00000B58 89E5                    	mov		bp,sp
  1417 00000B5A 9C                      	pushf
  1418 00000B5B 50                      	push 	ax
  1419 00000B5C 53                      	push 	bx
  1420 00000B5D 51                      	push	cx
  1421 00000B5E 52                      	push	dx
  1422 00000B5F 56                      	push	si
  1423 00000B60 57                      	push	di
  1424 00000B61 B40C                    	mov    	ah,0ch
  1425 00000B63 A0[2200]                	mov     al,[cor]
  1426 00000B66 B700                    	mov     bh,0
  1427 00000B68 BADF01                  	mov     dx,479
  1428 00000B6B 2B5604                  	sub		dx,[bp+4]
  1429 00000B6E 8B4E06                  	mov     cx,[bp+6]
  1430 00000B71 CD10                    	int     10h
  1431 00000B73 5F                      	pop		di
  1432 00000B74 5E                      	pop		si
  1433 00000B75 5A                      	pop		dx
  1434 00000B76 59                      	pop		cx
  1435 00000B77 5B                      	pop		bx
  1436 00000B78 58                      	pop		ax
  1437 00000B79 9D                      	popf
  1438 00000B7A 5D                      	pop		bp
  1439 00000B7B C20400                  	ret		4
  1440                                  
  1441                                  
  1442                                  ;_____________________________________________________________________________
  1443                                  ;    função circle
  1444                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1445                                  ; cor definida na variavel cor
  1446                                  circle:
  1447 00000B7E 55                      	push 	bp
  1448 00000B7F 89E5                    	mov	 	bp,sp
  1449 00000B81 9C                      	pushf               	;coloca os flags na pilha
  1450 00000B82 50                      	push 	ax
  1451 00000B83 53                      	push 	bx
  1452 00000B84 51                      	push	cx
  1453 00000B85 52                      	push	dx
  1454 00000B86 56                      	push	si
  1455 00000B87 57                      	push	di
  1456                                  	
  1457 00000B88 8B4608                  	mov		ax,[bp+8]   	; resgata xc
  1458 00000B8B 8B5E06                  	mov		bx,[bp+6]    	; resgata yc
  1459 00000B8E 8B4E04                  	mov		cx,[bp+4]    	; resgata r
  1460                                  	
  1461 00000B91 89DA                    	mov 	dx,bx	
  1462 00000B93 01CA                    	add		dx,cx      		;ponto extremo superior
  1463 00000B95 50                      	push    ax			
  1464 00000B96 52                      	push	dx
  1465 00000B97 E8BDFF                  	call 	plot_xy
  1466                                  	
  1467 00000B9A 89DA                    	mov		dx,bx
  1468 00000B9C 29CA                    	sub		dx,cx       	;ponto extremo inferior
  1469 00000B9E 50                      	push    ax			
  1470 00000B9F 52                      	push	dx
  1471 00000BA0 E8B4FF                  	call 	plot_xy
  1472                                  	
  1473 00000BA3 89C2                    	mov 	dx,ax	
  1474 00000BA5 01CA                    	add		dx,cx       	;ponto extremo direita
  1475 00000BA7 52                      	push    dx			
  1476 00000BA8 53                      	push	bx
  1477 00000BA9 E8ABFF                  	call 	plot_xy
  1478                                  	
  1479 00000BAC 89C2                    	mov		dx,ax
  1480 00000BAE 29CA                    	sub		dx,cx       	;ponto extremo esquerda
  1481 00000BB0 52                      	push    dx			
  1482 00000BB1 53                      	push	bx
  1483 00000BB2 E8A2FF                  	call 	plot_xy
  1484                                  		
  1485 00000BB5 89CF                    	mov		di,cx
  1486 00000BB7 81EF0100                	sub		di,1	 		;di=r-1
  1487 00000BBB BA0000                  	mov		dx,0  			;dx será a variável x. cx é a variavel y
  1488                                  	
  1489                                  ;aqui em cima a lógica foi invertida, 1-r => r-1
  1490                                  ;e as comparações passaram a ser jl => jg, assim garante 
  1491                                  ;valores positivos para d
  1492                                  
  1493                                  stay:						;loop
  1494 00000BBE 89FE                    	mov		si,di
  1495 00000BC0 81FE0000                	cmp		si,0
  1496 00000BC4 7F0E                    	jg		inf      		;caso d for menor que 0, seleciona pixel superior (não  salta)
  1497 00000BC6 89D6                    	mov		si,dx			;o jl é importante porque trata-se de conta com sinal
  1498 00000BC8 D1E6                    	sal		si,1			;multiplica por doi (shift arithmetic left)
  1499 00000BCA 81C60300                	add		si,3
  1500 00000BCE 01F7                    	add		di,si    		;nesse ponto d=d+2*dx+3
  1501 00000BD0 42                      	inc		dx				;incrementa dx
  1502 00000BD1 E90E00                  	jmp		plotar
  1503                                  inf:	
  1504 00000BD4 89D6                    	mov		si,dx
  1505 00000BD6 29CE                    	sub		si,cx  			;faz x - y (dx-cx), e salva em di 
  1506 00000BD8 D1E6                    	sal		si,1
  1507 00000BDA 81C60500                	add		si,5
  1508 00000BDE 01F7                    	add		di,si			;nesse ponto d=d+2*(dx-cx)+5
  1509 00000BE0 42                      	inc		dx				;incrementa x (dx)
  1510 00000BE1 49                      	dec		cx				;decrementa y (cx)
  1511                                  	
  1512                                  plotar:	
  1513 00000BE2 89D6                    	mov		si,dx
  1514 00000BE4 01C6                    	add		si,ax
  1515 00000BE6 56                      	push    si				;coloca a abcisa x+xc na pilha
  1516 00000BE7 89CE                    	mov		si,cx
  1517 00000BE9 01DE                    	add		si,bx
  1518 00000BEB 56                      	push    si				;coloca a ordenada y+yc na pilha
  1519 00000BEC E868FF                  	call 	plot_xy			;toma conta do segundo octante
  1520 00000BEF 89C6                    	mov		si,ax
  1521 00000BF1 01D6                    	add		si,dx
  1522 00000BF3 56                      	push    si				;coloca a abcisa xc+x na pilha
  1523 00000BF4 89DE                    	mov		si,bx
  1524 00000BF6 29CE                    	sub		si,cx
  1525 00000BF8 56                      	push    si				;coloca a ordenada yc-y na pilha
  1526 00000BF9 E85BFF                  	call 	plot_xy			;toma conta do sétimo octante
  1527 00000BFC 89C6                    	mov		si,ax
  1528 00000BFE 01CE                    	add		si,cx
  1529 00000C00 56                      	push    si				;coloca a abcisa xc+y na pilha
  1530 00000C01 89DE                    	mov		si,bx
  1531 00000C03 01D6                    	add		si,dx
  1532 00000C05 56                      	push    si				;coloca a ordenada yc+x na pilha
  1533 00000C06 E84EFF                  	call 	plot_xy			;toma conta do segundo octante
  1534 00000C09 89C6                    	mov		si,ax
  1535 00000C0B 01CE                    	add		si,cx
  1536 00000C0D 56                      	push    si				;coloca a abcisa xc+y na pilha
  1537 00000C0E 89DE                    	mov		si,bx
  1538 00000C10 29D6                    	sub		si,dx
  1539 00000C12 56                      	push    si				;coloca a ordenada yc-x na pilha
  1540 00000C13 E841FF                  	call 	plot_xy			;toma conta do oitavo octante
  1541 00000C16 89C6                    	mov		si,ax
  1542 00000C18 29D6                    	sub		si,dx
  1543 00000C1A 56                      	push    si				;coloca a abcisa xc-x na pilha
  1544 00000C1B 89DE                    	mov		si,bx
  1545 00000C1D 01CE                    	add		si,cx
  1546 00000C1F 56                      	push    si				;coloca a ordenada yc+y na pilha
  1547 00000C20 E834FF                  	call 	plot_xy			;toma conta do terceiro octante
  1548 00000C23 89C6                    	mov		si,ax
  1549 00000C25 29D6                    	sub		si,dx
  1550 00000C27 56                      	push    si				;coloca a abcisa xc-x na pilha
  1551 00000C28 89DE                    	mov		si,bx
  1552 00000C2A 29CE                    	sub		si,cx
  1553 00000C2C 56                      	push    si				;coloca a ordenada yc-y na pilha
  1554 00000C2D E827FF                  	call 	plot_xy			;toma conta do sexto octante
  1555 00000C30 89C6                    	mov		si,ax
  1556 00000C32 29CE                    	sub		si,cx
  1557 00000C34 56                      	push    si				;coloca a abcisa xc-y na pilha
  1558 00000C35 89DE                    	mov		si,bx
  1559 00000C37 29D6                    	sub		si,dx
  1560 00000C39 56                      	push    si				;coloca a ordenada yc-x na pilha
  1561 00000C3A E81AFF                  	call 	plot_xy			;toma conta do quinto octante
  1562 00000C3D 89C6                    	mov		si,ax
  1563 00000C3F 29CE                    	sub		si,cx
  1564 00000C41 56                      	push    si				;coloca a abcisa xc-y na pilha
  1565 00000C42 89DE                    	mov		si,bx
  1566 00000C44 01D6                    	add		si,dx
  1567 00000C46 56                      	push    si				;coloca a ordenada yc-x na pilha
  1568 00000C47 E80DFF                  	call 	plot_xy			;toma conta do quarto octante
  1569                                  	
  1570 00000C4A 39D1                    	cmp		cx,dx
  1571 00000C4C 7203                    	jb		fim_circle 		;se cx (y) está abaixo de dx (x), termina     
  1572 00000C4E E96DFF                  	jmp		stay			;se cx (y) está acima de dx (x), continua no loop
  1573                                  	
  1574                                  	
  1575                                  fim_circle:
  1576 00000C51 5F                      	pop		di
  1577 00000C52 5E                      	pop		si
  1578 00000C53 5A                      	pop		dx
  1579 00000C54 59                      	pop		cx
  1580 00000C55 5B                      	pop		bx
  1581 00000C56 58                      	pop		ax
  1582 00000C57 9D                      	popf
  1583 00000C58 5D                      	pop		bp
  1584 00000C59 C20600                  	ret		6
  1585                                  
  1586                                  
  1587                                  ;-----------------------------------------------------------------------------
  1588                                  ;
  1589                                  ;   função line
  1590                                  ;
  1591                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1592                                  line:
  1593 00000C5C 55                      	push	bp
  1594 00000C5D 89E5                    	mov		bp,sp
  1595 00000C5F 9C                      	pushf              		;coloca os flags na pilha
  1596 00000C60 50                      	push 	ax
  1597 00000C61 53                      	push 	bx
  1598 00000C62 51                      	push	cx
  1599 00000C63 52                      	push	dx
  1600 00000C64 56                      	push	si
  1601 00000C65 57                      	push	di
  1602 00000C66 8B460A                  	mov		ax,[bp+10]   	; resgata os valores das coordenadas
  1603 00000C69 8B5E08                  	mov		bx,[bp+8]    	; resgata os valores das coordenadas
  1604 00000C6C 8B4E06                  	mov		cx,[bp+6]    	; resgata os valores das coordenadas
  1605 00000C6F 8B5604                  	mov		dx,[bp+4]    	; resgata os valores das coordenadas
  1606 00000C72 39C8                    	cmp		ax,cx
  1607 00000C74 7408                    	je		line2
  1608 00000C76 721C                    	jb		line1
  1609 00000C78 91                      	xchg	ax,cx
  1610 00000C79 87DA                    	xchg	bx,dx
  1611 00000C7B E91600                  	jmp		line1
  1612                                  line2:						; deltax=0
  1613 00000C7E 39D3                    	cmp		bx,dx  			;subtrai dx de bx
  1614 00000C80 7202                    	jb		line3
  1615 00000C82 87DA                    	xchg	bx,dx     		;troca os valores de bx e dx entre eles
  1616                                  line3:						; dx > bx
  1617 00000C84 50                      	push	ax
  1618 00000C85 53                      	push	bx
  1619 00000C86 E8CEFE                  	call 	plot_xy
  1620 00000C89 39D3                    	cmp		bx,dx
  1621 00000C8B 7503                    	jne		line31
  1622 00000C8D E9C600                  	jmp		fim_line
  1623                                  line31:
  1624 00000C90 43                      	inc		bx
  1625 00000C91 E9F0FF                  	jmp		line3
  1626                                  ;deltax <>0
  1627                                  line1:
  1628                                  ; comparar módulos de deltax e deltay sabendo que cx>ax
  1629                                  ; cx > ax
  1630 00000C94 51                      	push	cx
  1631 00000C95 29C1                    	sub		cx,ax
  1632 00000C97 890E[2800]              	mov		[deltax],cx
  1633 00000C9B 59                      	pop		cx
  1634 00000C9C 52                      	push	dx
  1635 00000C9D 29DA                    	sub		dx,bx
  1636 00000C9F 7702                    	ja		line32
  1637 00000CA1 F7DA                    	neg		dx
  1638                                  line32:		
  1639 00000CA3 8916[2A00]              	mov		[deltay],dx
  1640 00000CA7 5A                      	pop		dx
  1641                                  
  1642 00000CA8 50                      	push	ax
  1643 00000CA9 A1[2800]                	mov		ax,[deltax]
  1644 00000CAC 3B06[2A00]              	cmp		ax,[deltay]
  1645 00000CB0 58                      	pop		ax
  1646 00000CB1 724D                    	jb		line5
  1647                                  
  1648                                  ; cx > ax e deltax>deltay
  1649 00000CB3 51                      	push	cx
  1650 00000CB4 29C1                    	sub		cx,ax
  1651 00000CB6 890E[2800]              	mov		[deltax],cx
  1652 00000CBA 59                      	pop		cx
  1653 00000CBB 52                      	push	dx
  1654 00000CBC 29DA                    	sub		dx,bx
  1655 00000CBE 8916[2A00]              	mov		[deltay],dx
  1656 00000CC2 5A                      	pop		dx
  1657                                  
  1658 00000CC3 89C6                    	mov		si,ax
  1659                                  line4:
  1660 00000CC5 50                      	push	ax
  1661 00000CC6 52                      	push	dx
  1662 00000CC7 56                      	push	si
  1663 00000CC8 29C6                    	sub		si,ax			;(x-x1)
  1664 00000CCA A1[2A00]                	mov		ax,[deltay]
  1665 00000CCD F7EE                    	imul	si
  1666 00000CCF 8B36[2800]              	mov		si,[deltax]		;arredondar
  1667 00000CD3 D1EE                    	shr		si,1
  1668                                  ; se numerador (DX)>0 soma se <0 subtrai
  1669 00000CD5 81FA0000                	cmp		dx,0
  1670 00000CD9 7C09                    	jl		ar1
  1671 00000CDB 01F0                    	add		ax,si
  1672 00000CDD 81D20000                	adc		dx,0
  1673 00000CE1 E90600                  	jmp		arc1
  1674                                  ar1:
  1675 00000CE4 29F0                    	sub		ax,si
  1676 00000CE6 81DA0000                	sbb		dx,0
  1677                                  arc1:
  1678 00000CEA F73E[2800]              	idiv	word [deltax]
  1679 00000CEE 01D8                    	add		ax,bx
  1680 00000CF0 5E                      	pop		si
  1681 00000CF1 56                      	push	si
  1682 00000CF2 50                      	push	ax
  1683 00000CF3 E861FE                  	call	plot_xy
  1684 00000CF6 5A                      	pop		dx
  1685 00000CF7 58                      	pop		ax
  1686 00000CF8 39CE                    	cmp		si,cx
  1687 00000CFA 745A                    	je		fim_line
  1688 00000CFC 46                      	inc		si
  1689 00000CFD E9C5FF                  	jmp		line4
  1690                                  
  1691                                  line5:	
  1692 00000D00 39D3                    	cmp		bx,dx
  1693 00000D02 7203                    	jb 		line7
  1694 00000D04 91                      	xchg	ax,cx
  1695 00000D05 87DA                    	xchg	bx,dx
  1696                                  line7:
  1697 00000D07 51                      	push	cx
  1698 00000D08 29C1                    	sub		cx,ax
  1699 00000D0A 890E[2800]              	mov		[deltax],cx
  1700 00000D0E 59                      	pop		cx
  1701 00000D0F 52                      	push	dx
  1702 00000D10 29DA                    	sub		dx,bx
  1703 00000D12 8916[2A00]              	mov		[deltay],dx
  1704 00000D16 5A                      	pop		dx
  1705 00000D17 89DE                    	mov		si,bx
  1706                                  line6:
  1707 00000D19 52                      	push	dx
  1708 00000D1A 56                      	push	si
  1709 00000D1B 50                      	push	ax
  1710 00000D1C 29DE                    	sub		si,bx			;(y-y1)
  1711 00000D1E A1[2800]                	mov		ax,[deltax]
  1712 00000D21 F7EE                    	imul	si
  1713 00000D23 8B36[2A00]              	mov		si,[deltay]		;arredondar
  1714 00000D27 D1EE                    	shr		si,1
  1715                                  ; se numerador (DX)>0 soma se <0 subtrai
  1716 00000D29 81FA0000                	cmp		dx,0
  1717 00000D2D 7C09                    	jl		ar2
  1718 00000D2F 01F0                    	add		ax,si
  1719 00000D31 81D20000                	adc		dx,0
  1720 00000D35 E90600                  	jmp		arc2
  1721                                  ar2:
  1722 00000D38 29F0                    	sub		ax,si
  1723 00000D3A 81DA0000                	sbb		dx,0
  1724                                  arc2:
  1725 00000D3E F73E[2A00]              	idiv	word [deltay]
  1726 00000D42 89C7                    	mov		di,ax
  1727 00000D44 58                      	pop		ax
  1728 00000D45 01C7                    	add		di,ax
  1729 00000D47 5E                      	pop		si
  1730 00000D48 57                      	push	di
  1731 00000D49 56                      	push	si
  1732 00000D4A E80AFE                  	call	plot_xy
  1733 00000D4D 5A                      	pop		dx
  1734 00000D4E 39D6                    	cmp		si,dx
  1735 00000D50 7404                    	je		fim_line
  1736 00000D52 46                      	inc		si
  1737 00000D53 E9C3FF                  	jmp		line6
  1738                                  
  1739                                  fim_line:
  1740 00000D56 5F                      	pop		di
  1741 00000D57 5E                      	pop		si
  1742 00000D58 5A                      	pop		dx
  1743 00000D59 59                      	pop		cx
  1744 00000D5A 5B                      	pop		bx
  1745 00000D5B 58                      	pop		ax
  1746 00000D5C 9D                      	popf
  1747 00000D5D 5D                      	pop		bp
  1748 00000D5E C20800                  	ret		8
  1749                                  ;*******************************************************************
  1750                                  
  1751                                  
  1752                                  segment data
  1753                                  
  1754                                  	kb_data EQU 60h  			; PORTA DE LEITURA DE TECLADO
  1755                                  	kb_ctl  EQU 61h  			; PORTA DE RESET PARA PEDIR NOVA INTERRUPCAO
  1756                                  	pictrl  EQU 20h				; PORTA DO PIC DE TECLADO
  1757                                  	eoi     EQU 20h				; Byte de final de interrupção PIC - resgistrador
  1758                                  	INT9    EQU 9h				; Interrupção por hardware do teclado
  1759 00000000 0100                    	cs_dos  DW  1				; Variável de 2 bytes para armacenar o CS da INT 9
  1760 00000002 0100                    	offset_dos  DW 1			; Variável de 2 bytes para armacenar o IP da INT 9
  1761 00000004 <res 00000008>          	tecla   resb  8				; Variável de 8 bytes para armacenar a tecla presionada. Só precisa de 2 bytes!	 
  1762 0000000C 0000                    	p_i     dw  0   			; Indice p/ Interrupcao (Incrementa na ISR quando pressiona/solta qualquer tecla)  
  1763 0000000E 0000                    	p_t     dw  0   			; Indice p/ Interrupcao (Incrementa após retornar da ISR quando pressiona/solta qualquer tecla) 
  1764                                  
  1765 00000010 0000                    	i_atual_comando 	dw 0		; Índice atual do vetor de comando sendo digitado
  1766                                  	tam_max_vet_comando	equ 16
  1767 00000012 <res 00000010>          	comando 			resb tam_max_vet_comando		; Variável de 16 bytes para armazenar o comando sendo digitado
  1768                                  	make_c				equ 2Eh		; códigos Make/Break dos possíveis caracteres que compõem os comandos
  1769                                  	break_c				equ 0xAE
  1770                                  	make_s				equ 1Fh
  1771                                  	break_s				equ 9Fh
  1772                                  	make_x				equ 2Dh
  1773                                  	break_x				equ 0xAD
  1774                                  	make_1				equ 02h
  1775                                  	break_1				equ 82h
  1776                                  	make_2				equ 03h
  1777                                  	break_2				equ 83h
  1778                                  	make_3				equ 04h
  1779                                  	break_3				equ 84h
  1780                                  	make_enter			equ 1Ch
  1781                                  	break_enter			equ 9Ch
  1782                                  	make_backspace		equ 0Eh
  1783                                  	break_backspace		equ 8Eh
  1784                                  	make_shift			equ 2Ah
  1785                                  	break_shift			equ 0xAA
  1786                                  
  1787 00000022 0F                      	cor			db		branco_intenso
  1788                                  
  1789                                  	;	I R G B COR
  1790                                  	;	0 0 0 0 preto
  1791                                  	;	0 0 0 1 azul
  1792                                  	;	0 0 1 0 verde
  1793                                  	;	0 0 1 1 cyan
  1794                                  	;	0 1 0 0 vermelho
  1795                                  	;	0 1 0 1 magenta
  1796                                  	;	0 1 1 0 marrom
  1797                                  	;	0 1 1 1 branco
  1798                                  	;	1 0 0 0 cinza
  1799                                  	;	1 0 0 1 azul claro
  1800                                  	;	1 0 1 0 verde claro
  1801                                  	;	1 0 1 1 cyan claro
  1802                                  	;	1 1 0 0 rosa
  1803                                  	;	1 1 0 1 magenta claro
  1804                                  	;	1 1 1 0 amarelo
  1805                                  	;	1 1 1 1 branco intenso
  1806                                  
  1807                                  	preto			equ		0
  1808                                  	azul			equ		1
  1809                                  	verde			equ		2
  1810                                  	cyan			equ		3
  1811                                  	vermelho		equ		4
  1812                                  	magenta			equ		5
  1813                                  	marrom			equ		6
  1814                                  	branco			equ		7
  1815                                  	cinza			equ		8
  1816                                  	azul_claro		equ		9
  1817                                  	verde_claro		equ		10
  1818                                  	cyan_claro		equ		11
  1819                                  	rosa			equ		12
  1820                                  	magenta_claro	equ		13
  1821                                  	amarelo			equ		14
  1822                                  	branco_intenso	equ		15
  1823                                  
  1824                                  	raio			equ		45
  1825                                  	lado			equ		45
  1826                                  
  1827 00000023 00                      	modo_anterior	db		0
  1828 00000024 0000                    	linha   		dw  	0
  1829 00000026 0000                    	coluna  		dw  	0
  1830 00000028 0000                    	deltax			dw		0
  1831 0000002A 0000                    	deltay			dw		0	
  1832 0000002C 4A4F474F2044412056-     	titulo    		db  	'JOGO DA VELHA'
  1833 00000035 454C4841           
  1834 00000039 43616D706F20646520-     	campo_comando	db		'Campo de Comando'
  1835 00000042 436F6D616E646F     
  1836 00000049 43616D706F20646520-     	campo_mensagem	db		'Campo de Mensagem'
  1837 00000052 4D656E736167656D   
  1838 0000005A 313132313331313232-     	celulas			db		'112131122232132333'
  1839 00000063 323332313332333333 
  1840 0000006C 436F6D616E646F2049-     	msg_com_inv		db		'Comando Invalido'
  1841 00000075 6E76616C69646F     
  1842 0000007C 4A6F6761646120496E-     	msg_jog_inv		db		'Jogada Invalida'
  1843 00000085 76616C696461       
  1844 0000008B 303030                  	msg_limpa_com	db		'000'
  1845 0000008E 582056454E43455521      	msg_x_venceu	db		'X VENCEU!'
  1846 00000097 432056454E43455521      	msg_c_venceu	db		'C VENCEU!'
  1847 000000A0 454D5041544F5521        	msg_empatou		db		'EMPATOU!'
  1848 000000A8 446967697465207320-     	msg_fim_jogo	db		'Digite s + Enter para sair ou c + Enter para reiniciar' 
  1849 000000B1 2B20456E7465722070-
  1850 000000BA 617261207361697220-
  1851 000000C3 6F752063202B20456E-
  1852 000000CC 746572207061726120-
  1853 000000D5 7265696E6963696172 
  1854 000000DE 00                      	leitura_jog_val db		0						; Variável que indica se a jogada está no formato esperado ou se é comando inválido
  1855 000000DF 00                      	ultima_jog_val	db		0						; Variável que indica se a ultima jogada feita é válida
  1856 000000E0 00                      	ultima_jog_x_c 	db		0						; Variável que indica se a ultima jogada feita foi c ou x, guarda o make code
  1857 000000E1 0000                    	cel_marcadas	dw 		0						; Variável que indica quais celulas foram marcadas
  1858                                  													; bit0 = 11, bit1 = 12, bit3 = 13, bit4 = 21, ..., bit8 = 33
  1859 000000E3 0000                    	cel_marcadas_x	dw		0						; Variável que indica quais celulas foram marcadas com x
  1860 000000E5 0000                    	cel_marcadas_c	dw		0						; Variável que indica quais celulas foram marcadas com c	
  1861 000000E7 0000                    	venceu 			dw 		0 						; variável que indica se algum jogador venceu e como venceu (se = 0, nimguem venceu)
  1862                                  													; valor em hexa indica como venceu
  1863                                  													; 11-21-31 = 001001001 = 0x0049 
  1864                                  													; 12-22-32 = 010010010 = 0x0092	
  1865                                  													; 13-23-33 = 100100100 = 0x0124
  1866                                  													; 11-12-13 = 000000111 = 0x0007
  1867                                  													; 21-22-23 = 000111000 = 0x0038
  1868                                  													; 31-32-33 = 111000000 = 0x01C0
  1869                                  													; 11-22-33 = 100010001 = 0x0111
  1870                                  													; 13-22-31 = 001010100 = 0x0054
  1871 000000E9 00                      	resultado		db		0						; jogo n terminou = 0, ganhou x = 1, ganhou c = 2, empate = 3
  1872                                  ;*************************************************************************
  1873                                  segment stack stack
  1874 00000000 <res 00000200>              			resb 	512
  1875                                  stacktop:
