     1                                  ; versão de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                	mov 	ax,data
     8 00000003 8ED8                    	mov 	ds,ax
     9 00000005 B8[0000]                	mov 	ax,stack
    10 00000008 8ED0                    	mov 	ss,ax
    11 0000000A BC[0002]                	mov 	sp,stacktop
    12                                  
    13                                  ; salvar modo corrente de video(vendo como está o modo de video da maquina)
    14 0000000D B40F                    	mov  	ah,0Fh
    15 0000000F CD10                    	int  	10h
    16 00000011 A2[0100]                	mov  	[modo_anterior],al   
    17                                  
    18                                  ; alterar modo de video para gráfico 640x480 16 cores
    19 00000014 B012                    	mov     al,12h
    20 00000016 B400                    	mov     ah,0
    21 00000018 CD10                    	int     10h
    22                                  	
    23                                  
    24                                  ;desenhar retas da tabela de jogo
    25 0000001A C606[0000]0F            	mov		byte[cor],branco_intenso	
    26                                  	
    27                                  	;[125,190]->[515,190] -> HORIZONTAL
    28 0000001F B87D00                  	mov		ax,125
    29 00000022 50                      	push	ax
    30 00000023 B8BE00                  	mov		ax,190
    31 00000026 50                      	push	ax
    32 00000027 B80302                  	mov		ax,515
    33 0000002A 50                      	push	ax
    34 0000002B B8BE00                  	mov		ax,190
    35 0000002E 50                      	push	ax
    36 0000002F E81203                  	call	line
    37                                  
    38                                  	;[125,320]->[515,320] -> HORIZONTAL
    39 00000032 B87D00                  	mov		ax,125
    40 00000035 50                      	push	ax
    41 00000036 B84001                  	mov		ax,320
    42 00000039 50                      	push	ax
    43 0000003A B80302                  	mov		ax,515
    44 0000003D 50                      	push	ax
    45 0000003E B84001                  	mov		ax,320
    46 00000041 50                      	push	ax
    47 00000042 E8FF02                  	call	line
    48                                  
    49                                  	;[255,60]->[255,450] -> VERTICAL
    50 00000045 B8FF00                  	mov		ax,255
    51 00000048 50                      	push	ax
    52 00000049 B83C00                  	mov		ax,60
    53 0000004C 50                      	push	ax
    54 0000004D B8FF00                  	mov		ax,255
    55 00000050 50                      	push	ax
    56 00000051 B8C201                  	mov		ax,450
    57 00000054 50                      	push	ax
    58 00000055 E8EC02                  	call	line
    59                                  
    60                                  	;[385,60]->[385,450] -> VERTICAL
    61 00000058 B88101                  	mov		ax,385
    62 0000005B 50                      	push	ax
    63 0000005C B83C00                  	mov		ax,60
    64 0000005F 50                      	push	ax
    65 00000060 B88101                  	mov		ax,385
    66 00000063 50                      	push	ax
    67 00000064 B8C201                  	mov		ax,450
    68 00000067 50                      	push	ax
    69 00000068 E8D902                  	call	line
    70                                  
    71                                  ;escrever mensagem topo "JOGO DA VELHA"
    72 0000006B B90D00                  	mov     cx,13					;número de caracteres
    73 0000006E BB0000                  	mov     bx,0
    74 00000071 B600                    	mov     dh,0					;linha 0-29
    75 00000073 B222                    	mov     dl,34					;coluna 0-79
    76 00000075 C606[0000]01            	mov		byte[cor],azul
    77                                  lm1:
    78 0000007A E8D000                  	call	cursor
    79 0000007D 8A87[0A00]              	mov     al,[bx+titulo]
    80 00000081 E8E000                  	call	caracter
    81 00000084 43                      	inc     bx						;proximo caracter
    82 00000085 FEC2                    	inc		dl						;avanca a coluna
    83 00000087 FE06[0000]              	inc		byte [cor]				;mudar a cor para a seguinte
    84 0000008B E2ED                    	loop    lm1
    85                                  
    86                                  ;escrever mensagem de comando
    87 0000008D B91000                  	mov     cx,16					;número de caracteres
    88 00000090 BB0000                  	mov     bx,0
    89 00000093 B61B                    	mov     dh,27					;linha 0-29
    90 00000095 B202                    	mov     dl,2					;coluna 0-79
    91 00000097 C606[0000]07            	mov		byte[cor],branco
    92                                  lm2:
    93 0000009C E8AE00                  	call	cursor
    94 0000009F 8A87[1700]              	mov     al,[bx+comando]
    95 000000A3 E8BE00                  	call	caracter
    96 000000A6 43                      	inc     bx						;proximo caracter
    97 000000A7 FEC2                    	inc		dl						;avanca a coluna
    98 000000A9 E2F1                    	loop    lm2
    99                                  
   100                                  ;escrever mensagem de mensagens
   101 000000AB B91100                  	mov     cx,17					;número de caracteres
   102 000000AE BB0000                  	mov     bx,0
   103 000000B1 B61D                    	mov     dh,29					;linha 0-29
   104 000000B3 B202                    	mov     dl,2					;coluna 0-79
   105 000000B5 C606[0000]07            	mov		byte[cor],branco
   106                                  lm3:
   107 000000BA E89000                  	call	cursor
   108 000000BD 8A87[2700]              	mov     al,[bx+mensagem]
   109 000000C1 E8A000                  	call	caracter
   110 000000C4 43                      	inc     bx						;proximo caracter
   111 000000C5 FEC2                    	inc		dl						;avanca a coluna
   112 000000C7 E2F1                    	loop    lm3
   113                                  
   114                                  
   115                                  ;desenhar um circulo na posicão [0,0] (só para testes por enquanto)
   116 000000C9 C606[0000]04            	mov		byte[cor], vermelho
   117 000000CE B84001                  	mov		ax, 320
   118 000000D1 50                      	push	ax
   119 000000D2 B8FF00                  	mov		ax, 255
   120 000000D5 50                      	push	ax
   121 000000D6 B83700                  	mov		ax, 55
   122 000000D9 50                      	push	ax
   123 000000DA E8CC00                  	call 	circle
   124                                  
   125                                  ;desenhar um x na posicão [190,125] (centro), com lado 2*55 = 110px
   126 000000DD C606[0000]01            	mov		byte[cor], azul
   127 000000E2 B8BE00                  	mov		ax,190
   128 000000E5 50                      	push	ax
   129 000000E6 B87D00                  	mov		ax,125
   130 000000E9 50                      	push	ax
   131 000000EA B83700                  	mov		ax,55
   132 000000ED 50                      	push	ax
   133 000000EE E81000                  	call	desenha_x
   134                                  
   135                                  
   136                                  ; TERMINAR EXECUÇÃO DO PROGRAMA
   137                                  ; reseta o modo de video
   138 000000F1 B408                    	mov    	ah,08h
   139 000000F3 CD21                    	int     21h
   140 000000F5 B400                    	mov  	ah,0   					; set video mode
   141 000000F7 A0[0100]                	mov  	al,[modo_anterior]   	; modo anterior
   142 000000FA CD10                    	int  	10h
   143 000000FC B8004C                  	mov     ax,4c00h
   144 000000FF CD21                    	int     21h
   145                                  
   146                                  
   147                                  ;***************************************************************************
   148                                  ;
   149                                  ;   função desenha_x
   150                                  ;
   151                                  ; push xc; push yc; push l; call desenha_x;  (xc+l<639,yc+l<479)e(xc-l>0,yc-l>0)
   152                                  ; cor definida na variavel cor
   153                                  desenha_x:
   154 00000101 55                      	push 	bp
   155 00000102 89E5                    	mov	 	bp,sp
   156 00000104 9C                      	pushf               	;coloca os flags na pilha
   157 00000105 50                      	push 	ax
   158 00000106 53                      	push 	bx
   159 00000107 51                      	push	cx
   160 00000108 52                      	push	dx
   161 00000109 56                      	push	si
   162 0000010A 57                      	push	di
   163                                  	
   164 0000010B 8B4608                  	mov		ax,[bp+8]   	; resgata xc
   165 0000010E 8B5E06                  	mov		bx,[bp+6]    	; resgata yc
   166 00000111 8B4E04                  	mov		cx,[bp+4]    	; resgata l
   167                                  	
   168                                  	;desenha primeira diagonal
   169 00000114 89C2                    	mov 	dx,ax			
   170 00000116 29CA                    	sub		dx,cx			; Ponto inferior esquerdo
   171 00000118 52                      	push	dx
   172 00000119 89DA                    	mov 	dx,bx
   173 0000011B 29CA                    	sub		dx,cx
   174 0000011D 52                      	push    dx
   175                                  
   176 0000011E 89C2                    	mov 	dx,ax
   177 00000120 01CA                    	add		dx,cx			; Ponto superior direito
   178 00000122 52                      	push	dx
   179 00000123 89DA                    	mov 	dx,bx
   180 00000125 01CA                    	add		dx,cx
   181 00000127 52                      	push    dx
   182                                  
   183 00000128 E81902                  	call line
   184                                  
   185                                  	;desenha segunda diagonal
   186 0000012B 89C2                    	mov 	dx,ax			
   187 0000012D 01CA                    	add		dx,cx			; Ponto inferior direito
   188 0000012F 52                      	push	dx
   189 00000130 89DA                    	mov 	dx,bx
   190 00000132 29CA                    	sub		dx,cx
   191 00000134 52                      	push    dx
   192                                  
   193 00000135 89C2                    	mov 	dx,ax
   194 00000137 29CA                    	sub		dx,cx			; Ponto superior esquerdo
   195 00000139 52                      	push	dx
   196 0000013A 89DA                    	mov 	dx,bx
   197 0000013C 01CA                    	add		dx,cx
   198 0000013E 52                      	push    dx
   199                                  
   200 0000013F E80202                  	call line
   201                                  
   202 00000142 5F                      	pop		di
   203 00000143 5E                      	pop		si
   204 00000144 5A                      	pop		dx
   205 00000145 59                      	pop		cx
   206 00000146 5B                      	pop		bx
   207 00000147 58                      	pop		ax
   208 00000148 9D                      	popf
   209 00000149 5D                      	pop		bp
   210 0000014A C20600                  	ret		6
   211                                  
   212                                  
   213                                  ;***************************************************************************
   214                                  ;
   215                                  ;   função cursor
   216                                  ;
   217                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   218                                  cursor:
   219 0000014D 9C                      	pushf
   220 0000014E 50                      	push 	ax
   221 0000014F 53                      	push 	bx
   222 00000150 51                      	push	cx
   223 00000151 52                      	push	dx
   224 00000152 56                      	push	si
   225 00000153 57                      	push	di
   226 00000154 55                      	push	bp
   227 00000155 B402                    	mov     ah,2
   228 00000157 B700                    	mov     bh,0
   229 00000159 CD10                    	int     10h
   230 0000015B 5D                      	pop		bp
   231 0000015C 5F                      	pop		di
   232 0000015D 5E                      	pop		si
   233 0000015E 5A                      	pop		dx
   234 0000015F 59                      	pop		cx
   235 00000160 5B                      	pop		bx
   236 00000161 58                      	pop		ax
   237 00000162 9D                      	popf
   238 00000163 C3                      	ret
   239                                  ;_____________________________________________________________________________
   240                                  ;
   241                                  ; função caracter escrito na posisão do cursor
   242                                  ;
   243                                  ; al= caracter a ser escrito
   244                                  ; cor definida na variavel cor
   245                                  caracter:
   246 00000164 9C                      	pushf
   247 00000165 50                      	push 	ax
   248 00000166 53                      	push 	bx
   249 00000167 51                      	push	cx
   250 00000168 52                      	push	dx
   251 00000169 56                      	push	si
   252 0000016A 57                      	push	di
   253 0000016B 55                      	push	bp
   254 0000016C B409                    	mov     ah,9
   255 0000016E B700                    	mov     bh,0
   256 00000170 B90100                  	mov     cx,1
   257 00000173 8A1E[0000]              	mov     bl,[cor]
   258 00000177 CD10                    	int     10h
   259 00000179 5D                      	pop		bp
   260 0000017A 5F                      	pop		di
   261 0000017B 5E                      	pop		si
   262 0000017C 5A                      	pop		dx
   263 0000017D 59                      	pop		cx
   264 0000017E 5B                      	pop		bx
   265 0000017F 58                      	pop		ax
   266 00000180 9D                      	popf
   267 00000181 C3                      	ret
   268                                  ;_____________________________________________________________________________
   269                                  ;
   270                                  ;   função plot_xy
   271                                  ;
   272                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   273                                  ; cor definida na variavel cor
   274                                  plot_xy:
   275 00000182 55                      	push	bp
   276 00000183 89E5                    	mov		bp,sp
   277 00000185 9C                      	pushf
   278 00000186 50                      	push 	ax
   279 00000187 53                      	push 	bx
   280 00000188 51                      	push	cx
   281 00000189 52                      	push	dx
   282 0000018A 56                      	push	si
   283 0000018B 57                      	push	di
   284 0000018C B40C                    	mov    	ah,0ch
   285 0000018E A0[0000]                	mov     al,[cor]
   286 00000191 B700                    	mov     bh,0
   287 00000193 BADF01                  	mov     dx,479
   288 00000196 2B5604                  	sub		dx,[bp+4]
   289 00000199 8B4E06                  	mov     cx,[bp+6]
   290 0000019C CD10                    	int     10h
   291 0000019E 5F                      	pop		di
   292 0000019F 5E                      	pop		si
   293 000001A0 5A                      	pop		dx
   294 000001A1 59                      	pop		cx
   295 000001A2 5B                      	pop		bx
   296 000001A3 58                      	pop		ax
   297 000001A4 9D                      	popf
   298 000001A5 5D                      	pop		bp
   299 000001A6 C20400                  	ret		4
   300                                  ;_____________________________________________________________________________
   301                                  ;    função circle
   302                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   303                                  ; cor definida na variavel cor
   304                                  circle:
   305 000001A9 55                      	push 	bp
   306 000001AA 89E5                    	mov	 	bp,sp
   307 000001AC 9C                      	pushf               	;coloca os flags na pilha
   308 000001AD 50                      	push 	ax
   309 000001AE 53                      	push 	bx
   310 000001AF 51                      	push	cx
   311 000001B0 52                      	push	dx
   312 000001B1 56                      	push	si
   313 000001B2 57                      	push	di
   314                                  	
   315 000001B3 8B4608                  	mov		ax,[bp+8]   	; resgata xc
   316 000001B6 8B5E06                  	mov		bx,[bp+6]    	; resgata yc
   317 000001B9 8B4E04                  	mov		cx,[bp+4]    	; resgata r
   318                                  	
   319 000001BC 89DA                    	mov 	dx,bx	
   320 000001BE 01CA                    	add		dx,cx      		;ponto extremo superior
   321 000001C0 50                      	push    ax			
   322 000001C1 52                      	push	dx
   323 000001C2 E8BDFF                  	call 	plot_xy
   324                                  	
   325 000001C5 89DA                    	mov		dx,bx
   326 000001C7 29CA                    	sub		dx,cx       	;ponto extremo inferior
   327 000001C9 50                      	push    ax			
   328 000001CA 52                      	push	dx
   329 000001CB E8B4FF                  	call 	plot_xy
   330                                  	
   331 000001CE 89C2                    	mov 	dx,ax	
   332 000001D0 01CA                    	add		dx,cx       	;ponto extremo direita
   333 000001D2 52                      	push    dx			
   334 000001D3 53                      	push	bx
   335 000001D4 E8ABFF                  	call 	plot_xy
   336                                  	
   337 000001D7 89C2                    	mov		dx,ax
   338 000001D9 29CA                    	sub		dx,cx       	;ponto extremo esquerda
   339 000001DB 52                      	push    dx			
   340 000001DC 53                      	push	bx
   341 000001DD E8A2FF                  	call 	plot_xy
   342                                  		
   343 000001E0 89CF                    	mov		di,cx
   344 000001E2 81EF0100                	sub		di,1	 		;di=r-1
   345 000001E6 BA0000                  	mov		dx,0  			;dx será a variável x. cx é a variavel y
   346                                  	
   347                                  ;aqui em cima a lógica foi invertida, 1-r => r-1
   348                                  ;e as comparações passaram a ser jl => jg, assim garante 
   349                                  ;valores positivos para d
   350                                  
   351                                  stay:						;loop
   352 000001E9 89FE                    	mov		si,di
   353 000001EB 81FE0000                	cmp		si,0
   354 000001EF 7F0E                    	jg		inf      		;caso d for menor que 0, seleciona pixel superior (não  salta)
   355 000001F1 89D6                    	mov		si,dx			;o jl é importante porque trata-se de conta com sinal
   356 000001F3 D1E6                    	sal		si,1			;multiplica por doi (shift arithmetic left)
   357 000001F5 81C60300                	add		si,3
   358 000001F9 01F7                    	add		di,si    		;nesse ponto d=d+2*dx+3
   359 000001FB 42                      	inc		dx				;incrementa dx
   360 000001FC E90E00                  	jmp		plotar
   361                                  inf:	
   362 000001FF 89D6                    	mov		si,dx
   363 00000201 29CE                    	sub		si,cx  			;faz x - y (dx-cx), e salva em di 
   364 00000203 D1E6                    	sal		si,1
   365 00000205 81C60500                	add		si,5
   366 00000209 01F7                    	add		di,si			;nesse ponto d=d+2*(dx-cx)+5
   367 0000020B 42                      	inc		dx				;incrementa x (dx)
   368 0000020C 49                      	dec		cx				;decrementa y (cx)
   369                                  	
   370                                  plotar:	
   371 0000020D 89D6                    	mov		si,dx
   372 0000020F 01C6                    	add		si,ax
   373 00000211 56                      	push    si				;coloca a abcisa x+xc na pilha
   374 00000212 89CE                    	mov		si,cx
   375 00000214 01DE                    	add		si,bx
   376 00000216 56                      	push    si				;coloca a ordenada y+yc na pilha
   377 00000217 E868FF                  	call 	plot_xy			;toma conta do segundo octante
   378 0000021A 89C6                    	mov		si,ax
   379 0000021C 01D6                    	add		si,dx
   380 0000021E 56                      	push    si				;coloca a abcisa xc+x na pilha
   381 0000021F 89DE                    	mov		si,bx
   382 00000221 29CE                    	sub		si,cx
   383 00000223 56                      	push    si				;coloca a ordenada yc-y na pilha
   384 00000224 E85BFF                  	call 	plot_xy			;toma conta do sétimo octante
   385 00000227 89C6                    	mov		si,ax
   386 00000229 01CE                    	add		si,cx
   387 0000022B 56                      	push    si				;coloca a abcisa xc+y na pilha
   388 0000022C 89DE                    	mov		si,bx
   389 0000022E 01D6                    	add		si,dx
   390 00000230 56                      	push    si				;coloca a ordenada yc+x na pilha
   391 00000231 E84EFF                  	call 	plot_xy			;toma conta do segundo octante
   392 00000234 89C6                    	mov		si,ax
   393 00000236 01CE                    	add		si,cx
   394 00000238 56                      	push    si				;coloca a abcisa xc+y na pilha
   395 00000239 89DE                    	mov		si,bx
   396 0000023B 29D6                    	sub		si,dx
   397 0000023D 56                      	push    si				;coloca a ordenada yc-x na pilha
   398 0000023E E841FF                  	call 	plot_xy			;toma conta do oitavo octante
   399 00000241 89C6                    	mov		si,ax
   400 00000243 29D6                    	sub		si,dx
   401 00000245 56                      	push    si				;coloca a abcisa xc-x na pilha
   402 00000246 89DE                    	mov		si,bx
   403 00000248 01CE                    	add		si,cx
   404 0000024A 56                      	push    si				;coloca a ordenada yc+y na pilha
   405 0000024B E834FF                  	call 	plot_xy			;toma conta do terceiro octante
   406 0000024E 89C6                    	mov		si,ax
   407 00000250 29D6                    	sub		si,dx
   408 00000252 56                      	push    si				;coloca a abcisa xc-x na pilha
   409 00000253 89DE                    	mov		si,bx
   410 00000255 29CE                    	sub		si,cx
   411 00000257 56                      	push    si				;coloca a ordenada yc-y na pilha
   412 00000258 E827FF                  	call 	plot_xy			;toma conta do sexto octante
   413 0000025B 89C6                    	mov		si,ax
   414 0000025D 29CE                    	sub		si,cx
   415 0000025F 56                      	push    si				;coloca a abcisa xc-y na pilha
   416 00000260 89DE                    	mov		si,bx
   417 00000262 29D6                    	sub		si,dx
   418 00000264 56                      	push    si				;coloca a ordenada yc-x na pilha
   419 00000265 E81AFF                  	call 	plot_xy			;toma conta do quinto octante
   420 00000268 89C6                    	mov		si,ax
   421 0000026A 29CE                    	sub		si,cx
   422 0000026C 56                      	push    si				;coloca a abcisa xc-y na pilha
   423 0000026D 89DE                    	mov		si,bx
   424 0000026F 01D6                    	add		si,dx
   425 00000271 56                      	push    si				;coloca a ordenada yc-x na pilha
   426 00000272 E80DFF                  	call 	plot_xy			;toma conta do quarto octante
   427                                  	
   428 00000275 39D1                    	cmp		cx,dx
   429 00000277 7203                    	jb		fim_circle 		;se cx (y) está abaixo de dx (x), termina     
   430 00000279 E96DFF                  	jmp		stay			;se cx (y) está acima de dx (x), continua no loop
   431                                  	
   432                                  	
   433                                  fim_circle:
   434 0000027C 5F                      	pop		di
   435 0000027D 5E                      	pop		si
   436 0000027E 5A                      	pop		dx
   437 0000027F 59                      	pop		cx
   438 00000280 5B                      	pop		bx
   439 00000281 58                      	pop		ax
   440 00000282 9D                      	popf
   441 00000283 5D                      	pop		bp
   442 00000284 C20600                  	ret		6
   443                                  ;-----------------------------------------------------------------------------
   444                                  ;    função full_circle
   445                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   446                                  ; cor definida na variavel cor					  
   447                                  full_circle:
   448 00000287 55                      	push 	bp
   449 00000288 89E5                    	mov	 	bp,sp
   450 0000028A 9C                      	pushf                	;coloca os flags na pilha
   451 0000028B 50                      	push 	ax
   452 0000028C 53                      	push 	bx
   453 0000028D 51                      	push	cx
   454 0000028E 52                      	push	dx
   455 0000028F 56                      	push	si
   456 00000290 57                      	push	di
   457                                  
   458 00000291 8B4608                  	mov		ax,[bp+8]    	; resgata xc
   459 00000294 8B5E06                  	mov		bx,[bp+6]   	; resgata yc
   460 00000297 8B4E04                  	mov		cx,[bp+4]    	; resgata r
   461                                  	
   462 0000029A 89DE                    	mov		si,bx
   463 0000029C 29CE                    	sub		si,cx
   464 0000029E 50                      	push    ax				;coloca xc na pilha			
   465 0000029F 56                      	push	si				;coloca yc-r na pilha
   466 000002A0 89DE                    	mov		si,bx
   467 000002A2 01CE                    	add		si,cx
   468 000002A4 50                      	push	ax				;coloca xc na pilha
   469 000002A5 56                      	push	si				;coloca yc+r na pilha
   470 000002A6 E89B00                  	call 	line
   471                                  	
   472                                  		
   473 000002A9 89CF                    	mov		di,cx
   474 000002AB 81EF0100                	sub		di,1	 		;di=r-1
   475 000002AF BA0000                  	mov		dx,0  			;dx será a variável x. cx é a variavel y
   476                                  	
   477                                  ;aqui em cima a lógica foi invertida, 1-r => r-1
   478                                  ;e as comparações passaram a ser jl => jg, assim garante 
   479                                  ;valores positivos para d
   480                                  
   481                                  stay_full:					;loop
   482 000002B2 89FE                    	mov		si,di
   483 000002B4 81FE0000                	cmp		si,0
   484 000002B8 7F0E                    	jg		inf_full       	;caso d for menor que 0, seleciona pixel superior (não  salta)
   485 000002BA 89D6                    	mov		si,dx			;o jl é importante porque trata-se de conta com sinal
   486 000002BC D1E6                    	sal		si,1			;multiplica por doi (shift arithmetic left)
   487 000002BE 81C60300                	add		si,3
   488 000002C2 01F7                    	add		di,si     		;nesse ponto d=d+2*dx+3
   489 000002C4 42                      	inc		dx				;incrementa dx
   490 000002C5 E90E00                  	jmp		plotar_full
   491                                  inf_full:	
   492 000002C8 89D6                    	mov		si,dx
   493 000002CA 29CE                    	sub		si,cx  			;faz x - y (dx-cx), e salva em di 
   494 000002CC D1E6                    	sal		si,1
   495 000002CE 81C60500                	add		si,5
   496 000002D2 01F7                    	add		di,si			;nesse ponto d=d+2*(dx-cx)+5
   497 000002D4 42                      	inc		dx				;incrementa x (dx)
   498 000002D5 49                      	dec		cx				;decrementa y (cx)
   499                                  	
   500                                  plotar_full:	
   501 000002D6 89C6                    	mov		si,ax
   502 000002D8 01CE                    	add		si,cx
   503 000002DA 56                      	push	si				;coloca a abcisa y+xc na pilha			
   504 000002DB 89DE                    	mov		si,bx
   505 000002DD 29D6                    	sub		si,dx
   506 000002DF 56                      	push    si				;coloca a ordenada yc-x na pilha
   507 000002E0 89C6                    	mov		si,ax
   508 000002E2 01CE                    	add		si,cx
   509 000002E4 56                      	push	si				;coloca a abcisa y+xc na pilha	
   510 000002E5 89DE                    	mov		si,bx
   511 000002E7 01D6                    	add		si,dx
   512 000002E9 56                      	push    si				;coloca a ordenada yc+x na pilha	
   513 000002EA E85700                  	call 	line
   514                                  	
   515 000002ED 89C6                    	mov		si,ax
   516 000002EF 01D6                    	add		si,dx
   517 000002F1 56                      	push	si				;coloca a abcisa xc+x na pilha			
   518 000002F2 89DE                    	mov		si,bx
   519 000002F4 29CE                    	sub		si,cx
   520 000002F6 56                      	push    si				;coloca a ordenada yc-y na pilha
   521 000002F7 89C6                    	mov		si,ax
   522 000002F9 01D6                    	add		si,dx
   523 000002FB 56                      	push	si				;coloca a abcisa xc+x na pilha	
   524 000002FC 89DE                    	mov		si,bx
   525 000002FE 01CE                    	add		si,cx
   526 00000300 56                      	push    si				;coloca a ordenada yc+y na pilha	
   527 00000301 E84000                  	call	line
   528                                  	
   529 00000304 89C6                    	mov		si,ax
   530 00000306 29D6                    	sub		si,dx
   531 00000308 56                      	push	si				;coloca a abcisa xc-x na pilha			
   532 00000309 89DE                    	mov		si,bx
   533 0000030B 29CE                    	sub		si,cx
   534 0000030D 56                      	push    si				;coloca a ordenada yc-y na pilha
   535 0000030E 89C6                    	mov		si,ax
   536 00000310 29D6                    	sub		si,dx
   537 00000312 56                      	push	si				;coloca a abcisa xc-x na pilha	
   538 00000313 89DE                    	mov		si,bx
   539 00000315 01CE                    	add		si,cx
   540 00000317 56                      	push    si				;coloca a ordenada yc+y na pilha	
   541 00000318 E82900                  	call	line
   542                                  	
   543 0000031B 89C6                    	mov		si,ax
   544 0000031D 29CE                    	sub		si,cx
   545 0000031F 56                      	push	si				;coloca a abcisa xc-y na pilha			
   546 00000320 89DE                    	mov		si,bx
   547 00000322 29D6                    	sub		si,dx
   548 00000324 56                      	push    si				;coloca a ordenada yc-x na pilha
   549 00000325 89C6                    	mov		si,ax
   550 00000327 29CE                    	sub		si,cx
   551 00000329 56                      	push	si				;coloca a abcisa xc-y na pilha	
   552 0000032A 89DE                    	mov		si,bx
   553 0000032C 01D6                    	add		si,dx
   554 0000032E 56                      	push    si				;coloca a ordenada yc+x na pilha	
   555 0000032F E81200                  	call	line
   556                                  	
   557 00000332 39D1                    	cmp		cx,dx
   558 00000334 7203                    	jb		fim_full_circle	;se cx (y) está abaixo de dx (x), termina     
   559 00000336 E979FF                  	jmp		stay_full		;se cx (y) está acima de dx (x), continua no loop
   560                                  	
   561                                  	
   562                                  fim_full_circle:
   563 00000339 5F                      	pop		di
   564 0000033A 5E                      	pop		si
   565 0000033B 5A                      	pop		dx
   566 0000033C 59                      	pop		cx
   567 0000033D 5B                      	pop		bx
   568 0000033E 58                      	pop		ax
   569 0000033F 9D                      	popf
   570 00000340 5D                      	pop		bp
   571 00000341 C20600                  	ret		6
   572                                  ;-----------------------------------------------------------------------------
   573                                  ;
   574                                  ;   função line
   575                                  ;
   576                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   577                                  line:
   578 00000344 55                      	push	bp
   579 00000345 89E5                    	mov		bp,sp
   580 00000347 9C                      	pushf              		;coloca os flags na pilha
   581 00000348 50                      	push 	ax
   582 00000349 53                      	push 	bx
   583 0000034A 51                      	push	cx
   584 0000034B 52                      	push	dx
   585 0000034C 56                      	push	si
   586 0000034D 57                      	push	di
   587 0000034E 8B460A                  	mov		ax,[bp+10]   	; resgata os valores das coordenadas
   588 00000351 8B5E08                  	mov		bx,[bp+8]    	; resgata os valores das coordenadas
   589 00000354 8B4E06                  	mov		cx,[bp+6]    	; resgata os valores das coordenadas
   590 00000357 8B5604                  	mov		dx,[bp+4]    	; resgata os valores das coordenadas
   591 0000035A 39C8                    	cmp		ax,cx
   592 0000035C 7408                    	je		line2
   593 0000035E 721C                    	jb		line1
   594 00000360 91                      	xchg	ax,cx
   595 00000361 87DA                    	xchg	bx,dx
   596 00000363 E91600                  	jmp		line1
   597                                  line2:						; deltax=0
   598 00000366 39D3                    	cmp		bx,dx  			;subtrai dx de bx
   599 00000368 7202                    	jb		line3
   600 0000036A 87DA                    	xchg	bx,dx     		;troca os valores de bx e dx entre eles
   601                                  line3:						; dx > bx
   602 0000036C 50                      	push	ax
   603 0000036D 53                      	push	bx
   604 0000036E E811FE                  	call 	plot_xy
   605 00000371 39D3                    	cmp		bx,dx
   606 00000373 7503                    	jne		line31
   607 00000375 E9C600                  	jmp		fim_line
   608                                  line31:
   609 00000378 43                      	inc		bx
   610 00000379 E9F0FF                  	jmp		line3
   611                                  ;deltax <>0
   612                                  line1:
   613                                  ; comparar módulos de deltax e deltay sabendo que cx>ax
   614                                  ; cx > ax
   615 0000037C 51                      	push	cx
   616 0000037D 29C1                    	sub		cx,ax
   617 0000037F 890E[0600]              	mov		[deltax],cx
   618 00000383 59                      	pop		cx
   619 00000384 52                      	push	dx
   620 00000385 29DA                    	sub		dx,bx
   621 00000387 7702                    	ja		line32
   622 00000389 F7DA                    	neg		dx
   623                                  line32:		
   624 0000038B 8916[0800]              	mov		[deltay],dx
   625 0000038F 5A                      	pop		dx
   626                                  
   627 00000390 50                      	push	ax
   628 00000391 A1[0600]                	mov		ax,[deltax]
   629 00000394 3B06[0800]              	cmp		ax,[deltay]
   630 00000398 58                      	pop		ax
   631 00000399 724D                    	jb		line5
   632                                  
   633                                  ; cx > ax e deltax>deltay
   634 0000039B 51                      	push	cx
   635 0000039C 29C1                    	sub		cx,ax
   636 0000039E 890E[0600]              	mov		[deltax],cx
   637 000003A2 59                      	pop		cx
   638 000003A3 52                      	push	dx
   639 000003A4 29DA                    	sub		dx,bx
   640 000003A6 8916[0800]              	mov		[deltay],dx
   641 000003AA 5A                      	pop		dx
   642                                  
   643 000003AB 89C6                    	mov		si,ax
   644                                  line4:
   645 000003AD 50                      	push	ax
   646 000003AE 52                      	push	dx
   647 000003AF 56                      	push	si
   648 000003B0 29C6                    	sub		si,ax			;(x-x1)
   649 000003B2 A1[0800]                	mov		ax,[deltay]
   650 000003B5 F7EE                    	imul	si
   651 000003B7 8B36[0600]              	mov		si,[deltax]		;arredondar
   652 000003BB D1EE                    	shr		si,1
   653                                  ; se numerador (DX)>0 soma se <0 subtrai
   654 000003BD 81FA0000                	cmp		dx,0
   655 000003C1 7C09                    	jl		ar1
   656 000003C3 01F0                    	add		ax,si
   657 000003C5 81D20000                	adc		dx,0
   658 000003C9 E90600                  	jmp		arc1
   659                                  ar1:
   660 000003CC 29F0                    	sub		ax,si
   661 000003CE 81DA0000                	sbb		dx,0
   662                                  arc1:
   663 000003D2 F73E[0600]              	idiv	word [deltax]
   664 000003D6 01D8                    	add		ax,bx
   665 000003D8 5E                      	pop		si
   666 000003D9 56                      	push	si
   667 000003DA 50                      	push	ax
   668 000003DB E8A4FD                  	call	plot_xy
   669 000003DE 5A                      	pop		dx
   670 000003DF 58                      	pop		ax
   671 000003E0 39CE                    	cmp		si,cx
   672 000003E2 745A                    	je		fim_line
   673 000003E4 46                      	inc		si
   674 000003E5 E9C5FF                  	jmp		line4
   675                                  
   676                                  line5:	
   677 000003E8 39D3                    	cmp		bx,dx
   678 000003EA 7203                    	jb 		line7
   679 000003EC 91                      	xchg	ax,cx
   680 000003ED 87DA                    	xchg	bx,dx
   681                                  line7:
   682 000003EF 51                      	push	cx
   683 000003F0 29C1                    	sub		cx,ax
   684 000003F2 890E[0600]              	mov		[deltax],cx
   685 000003F6 59                      	pop		cx
   686 000003F7 52                      	push	dx
   687 000003F8 29DA                    	sub		dx,bx
   688 000003FA 8916[0800]              	mov		[deltay],dx
   689 000003FE 5A                      	pop		dx
   690 000003FF 89DE                    	mov		si,bx
   691                                  line6:
   692 00000401 52                      	push	dx
   693 00000402 56                      	push	si
   694 00000403 50                      	push	ax
   695 00000404 29DE                    	sub		si,bx			;(y-y1)
   696 00000406 A1[0600]                	mov		ax,[deltax]
   697 00000409 F7EE                    	imul	si
   698 0000040B 8B36[0800]              	mov		si,[deltay]		;arredondar
   699 0000040F D1EE                    	shr		si,1
   700                                  ; se numerador (DX)>0 soma se <0 subtrai
   701 00000411 81FA0000                	cmp		dx,0
   702 00000415 7C09                    	jl		ar2
   703 00000417 01F0                    	add		ax,si
   704 00000419 81D20000                	adc		dx,0
   705 0000041D E90600                  	jmp		arc2
   706                                  ar2:
   707 00000420 29F0                    	sub		ax,si
   708 00000422 81DA0000                	sbb		dx,0
   709                                  arc2:
   710 00000426 F73E[0800]              	idiv	word [deltay]
   711 0000042A 89C7                    	mov		di,ax
   712 0000042C 58                      	pop		ax
   713 0000042D 01C7                    	add		di,ax
   714 0000042F 5E                      	pop		si
   715 00000430 57                      	push	di
   716 00000431 56                      	push	si
   717 00000432 E84DFD                  	call	plot_xy
   718 00000435 5A                      	pop		dx
   719 00000436 39D6                    	cmp		si,dx
   720 00000438 7404                    	je		fim_line
   721 0000043A 46                      	inc		si
   722 0000043B E9C3FF                  	jmp		line6
   723                                  
   724                                  fim_line:
   725 0000043E 5F                      	pop		di
   726 0000043F 5E                      	pop		si
   727 00000440 5A                      	pop		dx
   728 00000441 59                      	pop		cx
   729 00000442 5B                      	pop		bx
   730 00000443 58                      	pop		ax
   731 00000444 9D                      	popf
   732 00000445 5D                      	pop		bp
   733 00000446 C20800                  	ret		8
   734                                  ;*******************************************************************
   735                                  segment data
   736                                  
   737 00000000 0F                      cor			db		branco_intenso
   738                                  
   739                                  ;	I R G B COR
   740                                  ;	0 0 0 0 preto
   741                                  ;	0 0 0 1 azul
   742                                  ;	0 0 1 0 verde
   743                                  ;	0 0 1 1 cyan
   744                                  ;	0 1 0 0 vermelho
   745                                  ;	0 1 0 1 magenta
   746                                  ;	0 1 1 0 marrom
   747                                  ;	0 1 1 1 branco
   748                                  ;	1 0 0 0 cinza
   749                                  ;	1 0 0 1 azul claro
   750                                  ;	1 0 1 0 verde claro
   751                                  ;	1 0 1 1 cyan claro
   752                                  ;	1 1 0 0 rosa
   753                                  ;	1 1 0 1 magenta claro
   754                                  ;	1 1 1 0 amarelo
   755                                  ;	1 1 1 1 branco intenso
   756                                  
   757                                  preto			equ		0
   758                                  azul			equ		1
   759                                  verde			equ		2
   760                                  cyan			equ		3
   761                                  vermelho		equ		4
   762                                  magenta			equ		5
   763                                  marrom			equ		6
   764                                  branco			equ		7
   765                                  cinza			equ		8
   766                                  azul_claro		equ		9
   767                                  verde_claro		equ		10
   768                                  cyan_claro		equ		11
   769                                  rosa			equ		12
   770                                  magenta_claro	equ		13
   771                                  amarelo			equ		14
   772                                  branco_intenso	equ		15
   773                                  
   774 00000001 00                      modo_anterior	db		0
   775 00000002 0000                    linha   		dw  	0
   776 00000004 0000                    coluna  		dw  	0
   777 00000006 0000                    deltax			dw		0
   778 00000008 0000                    deltay			dw		0	
   779 0000000A 4A4F474F2044412056-     titulo    		db  	'JOGO DA VELHA'
   780 00000013 454C4841           
   781 00000017 43616D706F20646520-     comando			db		'Campo de Comando'
   782 00000020 436F6D616E646F     
   783 00000027 43616D706F20646520-     mensagem		db		'Campo de Mensagem'
   784 00000030 4D656E736167656D   
   785                                  ;*************************************************************************
   786                                  segment stack stack
   787 00000000 <res 00000200>              			resb 	512
   788                                  stacktop:
